defns
LinTy :: '' ::=

defn
P ╟ T :: :: LinMon_Log :: 'LinMon_Log' {{ com Deduction rules }} by

----------------------- :: Var {{ com \CId }}
_T ╟ T

P , _T ╟ U [[:Tyu]]
----------------- :: Fun {{ com \CFun }}
P ╟ T ⊸ U

--------------------- :: Unit {{ com \CUnit }}
{} ╟ ①

P ╟ T1 [[:Tyt1]]
--------------------- :: Left {{ com \CLeft }}
P ╟ T1 ⨁ T2

P ╟ T2 [[:Tyt2]]
--------------------- :: Right {{ com \CRight }}
P ╟ T1 ⨁ T2

P1 ╟ T1 [[:Tyt1]]
P2 ╟ T2 [[:Tyt2]]
------------------------- :: Prod {{ com \CProd }}
P1, P2 ╟ T1 ⨂ T2

P1 ╟ T [[:Tyt]]
P2 ╟ T ⊸ U [[:Tytp]]
----------------- :: App {{ com \CApp }}
P1, P2 ╟ U

P1 ╟ ① [[:Tyt]]
P2 ╟ U [[:Tyu]]
----------------- :: PatU {{ com \CPatU }}
P1 , P2 ╟ U

P1 ╟ T1 ⨁ T2 [[:Tyt]]
P2, _T1 ╟ U [[:Tyu1]]
P2, _T2 ╟ U [[:Tyu2]]
----------------- :: PatS {{ com \CPatS }}
P1, P2 ╟ U

P1 ╟ T1 ⨂ T2 [[:Tyt]]
P2, _T1, _T2 ╟ U [[:Tyu]]
----------------- :: PatP {{ com \CPatP }}
P1, P2 ╟ U

!P ╟ T [[:Tyt]]
--------------------- :: Exp {{ com \CBangProm }}
!P ╟ !T

P ╟ !T [[:Tyt]]
----------------- :: Derelict {{ com \CBangDerel }}
P ╟ T

P1 ╟ !T [[:Tyt]]
P2, _!T, _!T ╟ U [[:Tyu]]
----------------- :: Dup {{ com \CBangContr }}
P1, P2 ╟ U

P1 ╟ !T [[:Tyt]]
P2 ╟ U [[:Tyu]]
------------------- :: Drop {{ com \CBangWeak }}
P1, P2 ╟ U

defn
P ⊪ t : T :: :: LinMon_Ty_term :: 'LinMon_Ty_term_' {{ com Typing judgment for terms }} by

----------------------- :: Var {{ com \CId }}
{ x ⫶ T } ⊪ x : T

P , { x ⫶ T } ⊪ u : U [[:Tyu]]
----------------- :: Fun {{ com \CFun }}
P ⊪ λ x ⟼ u : T ⊸ U

--------------------- :: Unit {{ com \CUnit }}
{} ⊪ () : ①

P ⊪ t1 : T1 [[:Tyt1]]
--------------------- :: Left {{ com \CLeft }}
P ⊪ ˢInl t1 : T1 ⨁ T2

P ⊪ t2 : T2 [[:Tyt2]]
--------------------- :: Right {{ com \CRight }}
P ⊪ ˢInr t2 : T1 ⨁ T2

P1 ⊪ t1 : T1 [[:Tyt1]]
P2 ⊪ t2 : T2 [[:Tyt2]]
------------------------- :: Prod {{ com \CProd }}
P1, P2 ⊪ ˢ(t1, t2) : T1 ⨂ T2

P1 ⊪ t : T [[:Tyt]]
P2 ⊪ t' : T ⊸ U [[:Tytp]]
----------------- :: App {{ com \CApp }}
P1, P2 ⊪ t' t : U

P1 ⊪ t : ① [[:Tyt]]
P2 ⊪ u : U [[:Tyu]]
----------------- :: PatU {{ com \CPatU }}
P1 , P2 ⊪ t ; u : U

P1 ⊪ t : T1 ⨁ T2 [[:Tyt]]
P2, { x1 ⫶ T1 } ⊪ u1 : U [[:Tyu1]]
P2, { x2 ⫶ T2 } ⊪ u2 : U [[:Tyu2]]
----------------- :: PatS {{ com \CPatS }}
P1, P2 ⊪ t ►case ¹ν { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } : U

P1 ⊪ t : T1 ⨂ T2 [[:Tyt]]
P2, { x1 ⫶ T1 }, { x2 ⫶ T2 } ⊪ u : U [[:Tyu]]
----------------- :: PatP {{ com \CPatP }}
P1, P2 ⊪ t ►case ¹ν (x1 , x2) ⟼ u : U

!P ⊪ t : T [[:Tyt]]
--------------------- :: Exp {{ com \CBangProm }}
!P ⊪ ᴇ t : !T

P ⊪ t : !T [[:Tyt]]
----------------- :: Derelict {{ com \CBangDerel }}
P ⊪ derelict t : T

P1 ⊪ t : !T [[:Tyt]]
P2, { x1 ⫶ !T }, { x2 ⫶ !T } ⊪ u : U [[:Tyu]]
----------------- :: Dup {{ com \CBangContr }}
P1, P2 ⊪ dup t as x1, x2 in u : U

P1 ⊪ t : !T [[:Tyt]]
P2 ⊪ u : U [[:Tyu]]
------------------- :: Drop {{ com \CBangWeak }}
P1, P2 ⊪ drop t in u : U

defn
P ; Ur ⊫ t : T :: :: LinDya_Ty_term :: 'LinDya_Ty_term_' {{ com Typing judgment for terms }} by

----------------------- :: VarLin {{ com \CId\textsubscript{Lin} }}
{ x ⫶ T } ; Ur ⊫ x : T

----------------------- :: VarUr {{ com \CId\textsubscript{Ur} }}
{} ; Ur , { x ⫶ T } ⊫ x : T

P , { x ⫶ T } ; Ur ⊫ u : U [[:Tyu]]
----------------- :: Fun {{ com \CFun }}
P ; Ur ⊫ λ x ⟼ u : T ⊸ U

--------------------- :: Unit {{ com \CUnit }}
{} ; Ur ⊫ () : ①

P ; Ur ⊫ t1 : T1 [[:Tyt1]]
--------------------- :: Left {{ com \CLeft }}
P ; Ur ⊫ ˢInl t1 : T1 ⨁ T2

P ; Ur ⊫ t2 : T2 [[:Tyt2]]
--------------------- :: Right {{ com \CRight }}
P ; Ur ⊫ ˢInr t2 : T1 ⨁ T2

P1 ; Ur ⊫ t1 : T1 [[:Tyt1]]
P2 ; Ur ⊫ t2 : T2 [[:Tyt2]]
------------------------- :: Prod {{ com \CProd }}
P1, P2 ; Ur ⊫ ˢ(t1, t2) : T1 ⨂ T2

% we should augment age of holes which are below an exponential
{} ; Ur ⊫ t : T [[:Tyt]]
--------------------- :: Exp {{ com \CExp }}
{} ; Ur ⊫ ᴇ t : !T

P1 ; Ur ⊫ t : T [[:Tyt]]
P2 ; Ur ⊫ t' : T ⊸ U [[:Tytp]]
----------------- :: App {{ com \CApp }}
P1, P2 ; Ur ⊫ t' t : U

P1 ; Ur ⊫ t : ① [[:Tyt]]
P2 ; Ur ⊫ u : U [[:Tyu]]
----------------- :: PatU {{ com \CPatU }}
P1 , P2 ; Ur ⊫ t ; u : U

P1 ; Ur ⊫ t : T1 ⨁ T2 [[:Tyt]]
P2, { x1 ⫶ T1 } ; Ur ⊫ u1 : U [[:Tyu1]]
P2, { x2 ⫶ T2 } ; Ur ⊫ u2 : U [[:Tyu2]]
----------------- :: PatS {{ com \CPatS }}
P1, P2 ; Ur ⊫ t ►case ¹ν { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } : U

P1 ; Ur ⊫ t : T1 ⨂ T2 [[:Tyt]]
P2, { x1 ⫶ T1 }, { x2 ⫶ T2 } ; Ur ⊫ u : U [[:Tyu]]
----------------- :: PatP {{ com \CPatP }}
P1, P2 ; Ur ⊫ t ►case ¹ν (x1 , x2) ⟼ u : U

% No shadowing allowed?
P1 ; Ur ⊫ t : ! T [[:Tyt]]
P2 ; Ur, { x ⫶ T } ⊫ u : U [[:Tyu]]
----------------- :: PatE {{ com \CPatE }}
P1, P2 ; Ur ⊫ t ►case ¹ν ᴇ x ⟼ u : U

defn
P ⫢ t : T :: :: LinMod_Ty_term :: 'LinMod_Ty_term_' {{ com Typing judgment for terms }} by

{{ [[˥]] ⥶ [[m]] }} [[:Subtypem]]
----------------------- :: Var {{ com \CId }}
ɷ·P, { x : m T } ⫢ x : T

P , { x : m T } ⫢ u : U [[:Tyu]]
----------------- :: Fun {{ com \CFun }}
P ⫢ ˢλ x m ⟼ u : T m → U

--------------------- :: Unit {{ com \CUnit }}
ɷ·P ⫢ () : ①

P ⫢ t1 : T1 [[:Tyt1]]
--------------------- :: Left {{ com \CLeft }}
P ⫢ ˢInl t1 : T1 ⨁ T2

P ⫢ t2 : T2 [[:Tyt2]]
--------------------- :: Right {{ com \CRight }}
P ⫢ ˢInr t2 : T1 ⨁ T2

P1 ⫢ t1 : T1 [[:Tyt1]]
P2 ⫢ t2 : T2 [[:Tyt2]]
------------------------- :: Prod {{ com \CProd }}
P1 + P2 ⫢ ˢ(t1, t2) : T1 ⨂ T2

% we should augment age of holes which are below an exponential
P ⫢ t : T [[:Tyt]]
--------------------- :: Exp {{ com \CExp }}
n·P ⫢ ˢᴇ n t : ! n T

P1 ⫢ t : T [[:Tyt]]
P2 ⫢ t' : T m → U [[:Tytp]]
----------------- :: App {{ com \CApp }}
m·P1 + P2 ⫢ t' t : U

P1 ⫢ t : ① [[:Tyt]]
P2 ⫢ u : U [[:Tyu]]
----------------- :: PatU {{ com \CPatU }}
P1 + P2 ⫢ t ; u : U

P1 ⫢ t : T1 ⨁ T2 [[:Tyt]]
P2, { x1 : ˥ T1 } ⫢ u1 : U [[:Tyu1]]
P2, { x2 : ˥ T2 } ⫢ u2 : U [[:Tyu2]]
----------------- :: PatS {{ com \CPatS }}
P1 + P2 ⫢ t ►case ¹ν { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } : U

P1 ⫢ t : T1 ⨂ T2 [[:Tyt]]
P2, { x1 : ˥ T1 }, { x2 : ˥ T2 } ⫢ u : U [[:Tyu]]
----------------- :: PatP {{ com \CPatP }}
P1 + P2 ⫢ t ►case ¹ν (x1 , x2) ⟼ u : U

P1 ⫢ t : !n T [[:Tyt]]
P2, { x : n T } ⫢ u : U [[:Tyu]]
----------------- :: PatE {{ com \CPatE }}
P1 + P2 ⫢ t ►case ¹ν ᴇ n x ⟼ u : U

defn
P ⟚ t : T :: :: LinDeepMod_Ty_term :: 'LinDeepMod_Ty_term_' {{ com Typing judgment for terms }} by

P1 ⟚ t : T1 ⨁ T2 [[:Tyt]]
P2, { x1 : m T1 } ⟚ u1 : U [[:Tyu1]]
P2, { x2 : m T2 } ⟚ u2 : U [[:Tyu2]]
----------------- :: PatS {{ com \CPatS }}
m·P1 + P2 ⟚ t ►case m { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } : U

P1 ⟚ t : T1 ⨂ T2 [[:Tyt]]
P2, { x1 : m T1 }, { x2 : m T2 } ⟚ u : U [[:Tyu]]
----------------- :: PatP {{ com \CPatP }}
m·P1 + P2 ⟚ t ►case m (x1 , x2) ⟼ u : U

P1 ⟚ t : !n T [[:Tyt]]
P2, { x : m·n T } ⟚ u : U [[:Tyu]]
----------------- :: PatE {{ com \CPatE }}
m·P1 + P2 ⟚ t ►case m ᴇ n x ⟼ u : U

defns
LinSem :: '' ::=

% If ectx composition is not a meta instruction but a syntactic rule for context formation, then all unfoc rules can be merged as a single "pop & reform term" instruction ?
% Not really for Close_Ampar because it is transformed back to a closed ampar instead of just being ectx substitution.

% We want theorem that C[t] -->* C[v] where englobing context doesn't change?

defn
C [ t ] ⟶ C' [ t' ] :: :: LinDeepMod_Sem :: '' {{ com Small-step evaluation }} {{ tex [[C]]\,\big[\,[[t]]\,\big][[⟶]][[C']]\,\big[\,[[t']]\,\big] }} by

% {{ NotVal [[t]] }} [[:NotValt]]
% -------------------------------- :: LinFocus_Left {{ com \CLeft\CFocus }}
% C[ˢInl t] ⟶ (C ∘ ( ˢInl ⬜ ))[t]

% -------------------------------- :: LinUnfocus_Left {{ com \CLeft\CUnfocus }}
% (C ∘ ( ˢInl ⬜ ))[v] ⟶ C[ˢInl v]

% {{ NotVal [[t]] }} [[:NotValt]]
% -------------------------------- :: LinFocus_Right {{ com \CRight\CFocus }}
% C[ˢInr t] ⟶ (C ∘ ( ˢInr ⬜ ))[t]

% -------------------------------- :: LinUnfocus_Right {{ com \CRight\CUnfocus }}
% (C ∘ ( ˢInr ⬜ ))[v] ⟶ C[ˢInr v]

% {{ NotVal [[t1]] }} [[:NotValt1]]
% -------------------------------- :: LinFocus_Prod1 {{ com \CProd\CFocus\textsubscript{1} }}
% C[ˢ(t1, t2)] ⟶ (C ∘ ˢ(⬜, t2))[t1]

% -------------------------------- :: LinUnfocus_Prod1 {{ com \CProd\CUnfocus\textsubscript{1} }}
% (C ∘ ˢ(⬜, t2))[v1] ⟶ C[ˢ(v1, t2)]

% {{ NotVal [[t2]] }} [[:NotValt2]]
% -------------------------------- :: LinFocus_Prod2 {{ com \CProd\CFocus\textsubscript{2} }}
% C[ˢ(v1, t2)] ⟶ (C ∘ ˢ(v1, ⬜))[t2]

% -------------------------------- :: LinUnfocus_Prod2 {{ com \CProd\CUnfocus\textsubscript{2} }}
% (C ∘ ˢ(v1, ⬜))[v2] ⟶ C[ˢ(v1, v2)]

% {{ NotVal [[t]] }} [[:NotValt]]
% -------------------------------- :: LinFocus_Exp {{ com \CExp\CFocus }}
% C[ˢᴇ n t] ⟶ (C ∘ ( ˢᴇ n ⬜))[t]

% -------------------------------- :: LinUnfocus_Exp {{ com \CExp\CUnfocus }}
% (C ∘ ( ˢᴇ n ⬜))[v] ⟶ C[ˢᴇ n v]

% ----------------------------- :: LinFocus_App1 {{ com \CApp\CFocus\textsubscript{1} }}
% C[t' t] ⟶ (C ∘ (t' ⬜))[t]

% ----------------------------- :: LinFocus_App2 {{ com \CApp\CFocus\textsubscript{2} }}
% (C ∘ (t' ⬜))[v] ⟶ (C ∘ (⬜ v))[t']

% ----------------------------- :: LinRed_App {{ com \CApp\CRed }}
% (C ∘ (⬜ v))[ˢλ x m ⟼ u] ⟶ C[u[x ≔ v] ]

% ----------------------- :: LinFocus_PatU {{ com \CPatU\CFocus }}
% C[t ; u] ⟶ (C ∘ (⬜ ; u))[t]

% ----------------------- :: LinRed_PatU {{ com \CPatU\CRed }}
% C[() ; u] ⟶ C[u]

% ----------------------- :: LinFocus_PatS {{ com \CPatS\CFocus }}
% C[t ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }] ⟶ (C ∘ (⬜ ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }))[t]

% ----------------------- :: LinRed_PatL {{ com \CPatS\CRed\textsubscript{1} }}
% (C ∘ (⬜ ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }))[Inl v1] ⟶ C[u1[x1 ≔ v1] ]

% ----------------------- :: LinRed_PatR {{ com \CPatS\CRed\textsubscript{2} }}
% (C ∘ (⬜ ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }))[Inl v2] ⟶ C[u2[x2 ≔ v2] ]

% ----------------------- :: LinFocus_PatP {{ com \CPatP\CFocus }}
% C[t ►case m (x1,x2) ⟼ u] ⟶ (C ∘ (⬜ ►case m (x1,x2) ⟼ u))[t]

% ----------------------- :: LinRed_PatP {{ com \CPatP\CRed }}
% (C ∘ (⬜ ►case m (x1,x2) ⟼ u))[(v1, v2)] ⟶ C[u[x1 ≔ v1][x2 ≔ v2] ]

% ----------------------- :: LinFocus_PatE {{ com \CPatE\CFocus }}
% C[t ►case m ᴇ n x ⟼ u] ⟶ (C ∘ (⬜ ►case m ᴇ n x ⟼ u))[t]

% ----------------------- :: LinRed_PatE {{ com \CPatE\CRed }}
% (C ∘ (⬜ ►case m ᴇ n x ⟼ u))[ᴇ n v] ⟶ C[u[x ≔ v] ]


{{ NotVal [[t]] }} [[:NotValt]]
-------------------------------- :: LinFocus_Left {{ com \CLeft\CFocus }}
C[ˢInl t] ⟶ (C ∘ ( ˢInl ⬜ ))[t]

-------------------------------- :: LinUnfocus_Left {{ com \CLeft\CUnfocus }}
(C ∘ ( ˢInl ⬜ ))[v] ⟶ C[ˢInl v]

{{ NotVal [[t]] }} [[:NotValt]]
-------------------------------- :: LinFocus_Right {{ com \CRight\CFocus }}
C[ˢInr t] ⟶ (C ∘ ( ˢInr ⬜ ))[t]

-------------------------------- :: LinUnfocus_Right {{ com \CRight\CUnfocus }}
(C ∘ ( ˢInr ⬜ ))[v] ⟶ C[ˢInr v]

{{ NotVal [[t1]] }} [[:NotValt1]]
-------------------------------- :: LinFocus_Prod1 {{ com \CProd\CFocus\textsubscript{1} }}
C[ˢ(t1, t2)] ⟶ (C ∘ ˢ(⬜, t2))[t1]

-------------------------------- :: LinUnfocus_Prod1 {{ com \CProd\CUnfocus\textsubscript{1} }}
(C ∘ ˢ(⬜, t2))[v1] ⟶ C[ˢ(v1, t2)]

{{ NotVal [[t2]] }} [[:NotValt2]]
-------------------------------- :: LinFocus_Prod2 {{ com \CProd\CFocus\textsubscript{2} }}
C[ˢ(v1, t2)] ⟶ (C ∘ ˢ(v1, ⬜))[t2]

-------------------------------- :: LinUnfocus_Prod2 {{ com \CProd\CUnfocus\textsubscript{2} }}
(C ∘ ˢ(v1, ⬜))[v2] ⟶ C[ˢ(v1, v2)]

{{ NotVal [[t]] }} [[:NotValt]]
-------------------------------- :: LinFocus_Exp {{ com \CExp\CFocus }}
C[ˢᴇ n t] ⟶ (C ∘ ( ˢᴇ n ⬜))[t]

-------------------------------- :: LinUnfocus_Exp {{ com \CExp\CUnfocus }}
(C ∘ ( ˢᴇ n ⬜))[v] ⟶ C[ˢᴇ n v]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------------- :: LinFocus_App1 {{ com \CApp\CFocus\textsubscript{1} }}
C[t' t] ⟶ (C ∘ (t' ⬜))[t]

----------------------------- :: LinUnfocus_App1 {{ com \CApp\CUnfocus\textsubscript{1} }}
(C ∘ (t' ⬜))[v] ⟶ C[t' v]

{{ NotVal [[t']] }} [[:NotValtp]]
----------------------------- :: LinFocus_App2 {{ com \CApp\CFocus\textsubscript{2} }}
C[t' v] ⟶ (C ∘ (⬜ v))[t']

----------------------------- :: LinUnfocus_App2 {{ com \CApp\CUnfocus\textsubscript{2} }}
(C ∘ (⬜ v))[v'] ⟶ C[v' v]

------------------ :: LinRed_App {{ com \CApp\CRed }}
C[(ˢλ x m ⟼ u) v] ⟶ C[u[x ≔ v] ]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: LinFocus_PatU {{ com \CPatU\CFocus }}
C[t ; u] ⟶ (C ∘ (⬜ ; u))[t]

----------------------- :: LinUnfocus_PatU {{ com \CPatU\CUnfocus }}
(C ∘ (⬜ ; u))[v] ⟶ C[v ; u]

----------------------- :: LinRed_PatU {{ com \CPatU\CRed }}
C[() ; u] ⟶ C[u]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: LinFocus_PatS {{ com \CPatS\CFocus }}
C[t ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }] ⟶ (C ∘ (⬜ ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }))[t]

----------------------- :: LinUnfocus_PatS {{ com \CPatS\CUnfocus }}
(C ∘ (⬜ ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }))[v] ⟶ C[v ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }]

----------------------- :: LinRed_PatL {{ com \CPatS\CRed\textsubscript{1} }}
C[(Inl v1) ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }] ⟶ C[u1[x1 ≔ v1] ]

----------------------- :: LinRed_PatR {{ com \CPatS\CRed\textsubscript{2} }}
C[(Inr v2) ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }] ⟶ C[u2[x2 ≔ v2] ]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: LinFocus_PatP {{ com \CPatP\CFocus }}
C[t ►case m (x1,x2) ⟼ u] ⟶ (C ∘ (⬜ ►case m (x1,x2) ⟼ u))[t]

----------------------- :: LinUnfocus_PatP {{ com \CPatP\CUnfocus }}
(C ∘ (⬜ ►case m (x1,x2) ⟼ u))[v] ⟶ C[v ►case m (x1,x2) ⟼ u]

----------------------- :: LinRed_PatP {{ com \CPatP\CRed }}
C[(v1, v2) ►case m (x1,x2) ⟼ u] ⟶ C[u[x1 ≔ v1][x2 ≔ v2] ]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: LinFocus_PatE {{ com \CPatE\CFocus }}
C[t ►case m ᴇ n x ⟼ u] ⟶ (C ∘ (⬜ ►case m ᴇ n x ⟼ u))[t]

----------------------- :: LinUnfocus_PatE {{ com \CPatE\CUnfocus }}
(C ∘ (⬜ ►case m ᴇ n x ⟼ u))[v] ⟶ C[v ►case m ᴇ n x ⟼ u]

----------------------- :: LinRed_PatE {{ com \CPatE\CRed }}
C[ᴇ n v ►case m ᴇ n x ⟼ u] ⟶ C[u[x ≔ v] ]
