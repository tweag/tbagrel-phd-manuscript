\documentclass[aspectratio=169]{beamer}
\usepackage{hyperref}
\usetheme{metropolis}
\hypersetup{
  hypertexnames=false,
  pdftitle   = {Formalization and Implementation of Safe Destination Passing in Pure Functional Programming Settings},
  pdfauthor  = {Thomas Bagrel},
  pdfsubject = {PhD Presentation},
  pdfcreator = {Thomas Bagrel},
  % ...
}

\usepackage{etoolbox}
\usepackage{calc}
\usepackage{xargs}
\usepackage{xpatch}
\usepackage{xkeyval}
\usepackage{xstring}
\usepackage{xifthen}
\usepackage{xparse}
\usepackage{expl3}
\usepackage{environ}
\usepackage{mathtools, amsfonts, amssymb, amsthm}
\usepackage{chngcntr}
\usepackage{csquotes}

% \usepackage[utf8]{inputenc}
% \usepackage[T1]{fontenc}
\usefonttheme{serif}
\usepackage{fontspec}
% \usepackage{unicode-math}

\usepackage[activate={true, nocompatibility}, stretch=10, shrink=10]{microtype}
%\usepackage[svgnames]{xcolor}
\usepackage{graphicx}
\usepackage{polyglossia}
\setmainlanguage{english}
\setotherlanguage{french}
\SetLanguageKeys{english}{indentfirst=true}
\SetLanguageKeys{french}{indentfirst=true}
\usepackage{float}
\renewcommand{\topfraction}{.67}
\renewcommand{\bottomfraction}{.0}
\renewcommand{\textfraction}{.33}
\renewcommand{\floatpagefraction}{.67}
\renewcommand{\dbltopfraction}{.67}
% \renewcommand{\dblbottomfraction}{.0}
% \renewcommand{\dbltextfraction}{.33}
\renewcommand{\dblfloatpagefraction}{.67}
\setcounter{topnumber}{9}
\setcounter{bottomnumber}{9}
\setcounter{totalnumber}{20}
\setcounter{dbltopnumber}{9}


\usepackage{caption}
\usepackage{subcaption}
\usepackage{refcount}
\makeatletter
\providecommand\english@loaded{}
\providecommand\frensh@loaded{}
\makeatother
\usepackage{url}
\usepackage{lastpage}
\usepackage{setspace}
\usepackage{enumitem}\let\newlist\relax\let\renewlist\relax
\usepackage{fancybox}
\usepackage{tabularx}
\usepackage[defaultlines=3,all]{nowidow}
% \usepackage{fancyhdr}

%% For rendering of JFLA article
% \usepackage{tipa}
\usepackage{minted}\usemintedstyle{tango}
\usepackage{stmaryrd}
\usepackage{hhline}
\usepackage[tikz]{bclogo}
\usepackage[normalem]{ulem}
\usepackage{newunicodechar}
\usepackage{adjustbox}

%% For schemas
\usepackage{tikzit}
\input{tikzstyle.tikzstyles}
%\tikzset{every picture/.style={line width=10pt}}
\newcommand{\figcomment}[1]{\textcolor{gray}{#1}}
\newcommand{\smallspc}{\hspace{-0.5em}}
\definecolor{sczcolor}{RGB}{0,0,0}
\definecolor{sczfcolor}{RGB}{128, 128, 128}
\definecolor{scicolor}{RGB}{199, 22, 6}
\definecolor{scifcolor}{RGB}{251, 164, 157}
\definecolor{sciicolor}{RGB}{60, 103, 163}
\definecolor{sciiicolor}{RGB}{97, 5, 94}
\newcommand{\scz}[1]{\textcolor{sczcolor}{#1}}
\newcommand{\sczf}[1]{\textcolor{sczfcolor}{#1}}
\newcommand{\sci}[1]{\textcolor{scicolor}{#1}}
\newcommand{\scif}[1]{\textcolor{scifcolor}{#1}}
\newcommand{\scii}[1]{\textcolor{sciicolor}{#1}}
\newcommand{\sciii}[1]{\textcolor{sciiicolor}{#1}}

%% For OTT rendering
\newunicodechar{⥶}{\ensuremath{\raisebox{0.2em}{$\scriptstyle<$}\hspace*{-0.65em}\raisebox{-0.12em}{$\scriptscriptstyle\leftarrow$}}}
\newcommand{\pleq}{[[⥶]]_{\scriptscriptstyle{\pmb{\mathtt{p}}}}}
\newcommand{\aleq}{[[⥶]]_{\scriptscriptstyle{\pmb{\mathtt{a}}}}}
\usepackage[supertabular]{ottalt}
\inputott{destination_calculus_ott.tex}
\usepackage{ottstyling}
% Hide "Index for ranges" from the metavars displayed tabular
% \patchcmd{\ottmetavars}{$ \ottmv{k} $ & \ottcom{Index for ranges} \\}{}{}{}

% \patchcmd{\ottdruleTyXXectxsXXOpenAmpar}{%
% \ottpremise{  \Delta_{{\mathrm{1}}} ,~ \Delta_{{\mathrm{2}}}  \,\pmb{\dashv}\, \ottnt{C} \pmb{:}  \ottstype{(}  \ottstype{U} \,\ottstype{\ltimes}\, \ottstype{T'}  \ottstype{)}  \ottstype{\rightarrowtail} \ottstype{U_{{\mathrm{0}}}} }%
% \ottpremise{ \Delta_{{\mathrm{2}}} ,~  \ottshname{\destminus^{\scriptscriptstyle\text{-}1} } \Delta_{{\mathrm{3}}}    \!\!\pmb{\phantom{a}^{\scriptscriptstyle \mathrm{v} }\!\!\vdash}\,  \ottnt{v_{{\mathrm{2}}}}  \pmb{:}  \ottstype{U}}%
% }{\ottpremise{  \Delta_{{\mathrm{1}}} ,~ \Delta_{{\mathrm{2}}}  \,\pmb{\dashv}\, \ottnt{C} \pmb{:}  \ottstype{(}  \ottstype{U} \,\ottstype{\ltimes}\, \ottstype{T'}  \ottstype{)}  \ottstype{\rightarrowtail} \ottstype{U_{{\mathrm{0}}}}
% \qquad
% \Delta_{{\mathrm{2}}} ,~  \ottshname{\destminus^{\scriptscriptstyle\text{-}1} } \Delta_{{\mathrm{3}}}    \!\!\pmb{\phantom{a}^{\scriptscriptstyle \mathrm{v} }\!\!\vdash}\,  \ottnt{v_{{\mathrm{2}}}}  \pmb{:}  \ottstype{U}}
% }{}{}

% \patchcmd{\ottdruleTyXXvalXXAmpar}{%
% \ottpremise{   \ottsmode{1}  \hspace{-0.15ex}  \ottsmode{\uparrow}    \ottsmode{\hspace{-0.1ex}\cdot\hspace{-0.1ex} }  \Delta_{{\mathrm{1}}} ,~ \Delta_{{\mathrm{3}}}   \!\!\pmb{\phantom{a}^{\scriptscriptstyle \mathrm{v} }\!\!\vdash}\,  \ottnt{v_{{\mathrm{1}}}}  \pmb{:}  \ottstype{T}}%
% \ottpremise{ \Delta_{{\mathrm{2}}} ,~  \ottshname{\destminus^{\scriptscriptstyle\text{-}1} } \Delta_{{\mathrm{3}}}    \!\!\pmb{\phantom{a}^{\scriptscriptstyle \mathrm{v} }\!\!\vdash}\,  \ottnt{v_{{\mathrm{2}}}}  \pmb{:}  \ottstype{U}}%
% }{
% \ottpremise{   \ottsmode{1}  \hspace{-0.15ex}  \ottsmode{\uparrow}    \ottsmode{\hspace{-0.1ex}\cdot\hspace{-0.1ex} }  \Delta_{{\mathrm{1}}} ,~ \Delta_{{\mathrm{3}}}   \!\!\pmb{\phantom{a}^{\scriptscriptstyle \mathrm{v} }\!\!\vdash}\,  \ottnt{v_{{\mathrm{1}}}}  \pmb{:}  \ottstype{T}
% \qquad
% \Delta_{{\mathrm{2}}} ,~  \ottshname{\destminus^{\scriptscriptstyle\text{-}1} } \Delta_{{\mathrm{3}}}    \!\!\pmb{\phantom{a}^{\scriptscriptstyle \mathrm{v} }\!\!\vdash}\,  \ottnt{v_{{\mathrm{2}}}}  \pmb{:}  \ottstype{U}}%
% }{}{}

% \patchcmd{\ottdruleTyXXtermXXPatS}{%
% \ottpremise{ \Gamma_{{\mathrm{2}}} ,~  \ottmv{x_{{\mathrm{1}}}} :\!_{\! \ottsmode{m} } \ottstype{T_{{\mathrm{1}}}}    \,\pmb{\vdash}\,  \ottnt{u_{{\mathrm{1}}}}  \pmb{:}  \ottstype{U}}%
% \ottpremise{ \Gamma_{{\mathrm{2}}} ,~  \ottmv{x_{{\mathrm{2}}}} :\!_{\! \ottsmode{m} } \ottstype{T_{{\mathrm{2}}}}    \,\pmb{\vdash}\,  \ottnt{u_{{\mathrm{2}}}}  \pmb{:}  \ottstype{U}}%
% }{\ottpremise{ \Gamma_{{\mathrm{2}}} ,~  \ottmv{x_{{\mathrm{1}}}} :\!_{\! \ottsmode{m} } \ottstype{T_{{\mathrm{1}}}}    \,\pmb{\vdash}\,  \ottnt{u_{{\mathrm{1}}}}  \pmb{:}  \ottstype{U}%
% \qquad
% \Gamma_{{\mathrm{2}}} ,~  \ottmv{x_{{\mathrm{2}}}} :\!_{\! \ottsmode{m} } \ottstype{T_{{\mathrm{2}}}}    \,\pmb{\vdash}\,  \ottnt{u_{{\mathrm{2}}}}  \pmb{:}  \ottstype{U}}
% }{}{}

% \patchcmd{\ottdruleTyXXectxsXXPatS}{%
% \ottpremise{\Delta_{{\mathrm{2}}}  +   \ottmv{x_{{\mathrm{1}}}} :\!_{\! \ottsmode{m} } \ottstype{T_{{\mathrm{1}}}}   \,\pmb{\vdash}\,  \ottnt{u_{{\mathrm{1}}}}  \pmb{:}  \ottstype{U}}%
% \ottpremise{\Delta_{{\mathrm{2}}}  +   \ottmv{x_{{\mathrm{2}}}} :\!_{\! \ottsmode{m} } \ottstype{T_{{\mathrm{2}}}}   \,\pmb{\vdash}\,  \ottnt{u_{{\mathrm{2}}}}  \pmb{:}  \ottstype{U}}%
% }{
%   \ottpremise{\Delta_{{\mathrm{2}}}  +   \ottmv{x_{{\mathrm{1}}}} :\!_{\! \ottsmode{m} } \ottstype{T_{{\mathrm{1}}}}   \,\pmb{\vdash}\,  \ottnt{u_{{\mathrm{1}}}}  \pmb{:}  \ottstype{U}
% \qquad
%   \Delta_{{\mathrm{2}}}  +   \ottmv{x_{{\mathrm{2}}}} :\!_{\! \ottsmode{m} } \ottstype{T_{{\mathrm{2}}}}   \,\pmb{\vdash}\,  \ottnt{u_{{\mathrm{2}}}}  \pmb{:}  \ottstype{U}}
% }{}{}

% %% Bibliography settings
% \usepackage[
%   backend=biber,
%   natbib=true,
%   bibstyle=authoryear,
%   citestyle=authoryear-comp,
%   sorting=ynt]{biblatex}
% \addbibresource{bibliography.bib}

%% General document setup
\setmainlanguage{english}

% \makeatletter

% \newrobustcmd*{\parentexttrack}[1]{%
%   \begingroup
%   \blx@blxinit
%   \blx@setsfcodes
%   \blx@bibopenparen#1\blx@bibcloseparen
%   \endgroup}

% \AtEveryCite{%
%   \let\parentext=\parentexttrack%
%   \let\bibopenparen=\bibopenbracket%
%   \let\bibcloseparen=\bibclosebracket}

% \makeatother

% \let\cite\parencite
% \let\citet\textcite

% \setmainfont{Tinos}[
%   Path=./fonts/,
%   Extension=.ttf,
%   UprightFont=*-Regular,
%   BoldFont=*-Bold,
%   ItalicFont=*-Italic,
%   BoldItalicFont=*-BoldItalic,
%   Scale=1.033]
\setmainfont{FiraSans}[
  Path=./fonts/,
  Extension=.ttf,
  UprightFont=*-Light,
  BoldFont=*-Medium,
  ItalicFont=*-LightItalic,
  BoldItalicFont=*-MediumItalic,
  Scale=0.887]
% \setmainfont{CMUSerif}[
%   Path=./fonts/,
%   Extension=.otf,
%   UprightFont=*-Roman,
%   BoldFont=*-Bold,
%   ItalicFont=*-Italic,
%   BoldItalicFont=*-BoldItalic,
%   Scale=1.0]
\setsansfont{iosevka-quasi-proportional-ss07}[
  Path=fonts/,
  Extension=.ttf,
  UprightFont=*-regular,
  BoldFont=*-semibold,
  ItalicFont=*-italic,
  BoldItalicFont=*-semibolditalic,
  Scale=0.887]
\setmonofont{iosevka-quasi-proportional-ss07}[
  Path=fonts/,
  Extension=.ttf,
  UprightFont=*-regular,
  BoldFont=*-semibold,
  ItalicFont=*-italic,
  BoldItalicFont=*-semibolditalic,
  Scale=0.887]
% \setmonofont{Iosevka-Term-SS07}[
%   Path=fonts/,
%   Extension=.ttf,
%   UprightFont=*-Regular,
%   BoldFont=*-Semibold,
%   ItalicFont=*-Italic,
%   BoldItalicFont=*-SemiboldItalic,
%   Scale=0.92]
\setmathrm{iosevka-quasi-proportional-ss07}[
  Path=fonts/,
  Extension=.ttf,
  UprightFont=*-regular,
  BoldFont=*-semibold,
  ItalicFont=*-italic,
  BoldItalicFont=*-semibolditalic,
  Scale=0.887]
\newfontfamily\mymathbffont{iosevka-quasi-proportional-ss07-semibold}[Path=fonts/,
  Extension=.ttf,Scale=0.887]
\newcommand{\mymathbf}[1]{\text{\mymathbffont #1}}
\let\mathbf\mymathbf
% \setmathsf{Tinos}[
%   Path=fonts/,
%   Extension=.ttf,
%   UprightFont=*-Italic,
%   BoldFont=*-BoldItalic,
%   ItalicFont=*-Italic,
%   BoldItalicFont=*-BoldItalic,
%   Scale=1.033]
\setmathsf{CMUSerif}[
  Path=./fonts/,
  Extension=.otf,
  UprightFont=*-Italic,
  BoldFont=*-BoldItalic,
  ItalicFont=*-Italic,
  BoldItalicFont=*-BoldItalic,
  Scale=1.0]
% \setmonofont{Fira-Code-Nerd-Font-Complete}[
%   Extension=.otf,
%   UprightFont=*-Regular,
%   BoldFont=*-Medium,
%   Scale=0.887]

\setlength{\parskip}{0.25\baselineskip}
\setlist[itemize]{topsep=0ex,itemsep=-0.5ex}

\definecolor{mintedframe}{RGB}{100,100,100}
\setminted{
    linenos,                       % Enable line numbering
    xleftmargin=12pt,              % Set left margin to 0
    frame=leftline,                  % Use a frame around the code
    framesep=7.5pt,                 % Space between frame and code
    rulecolor=mintedframe,
    numbersep=7.5pt,                % Space between line numbers and code
    numberblanklines=true,
}

\renewcommand{\theFancyVerbLine}{
\ttfamily
\textcolor{mintedframe}{
\scriptsize{
\arabic{FancyVerbLine}}}}

% %% New listing float
% \newfloat{listing}{tbp}{lop}[chapter]
% \floatname{listing}{Listing}
% \renewcommand{\thelisting}{\thechapter.\arabic{listing}} % chapter-based numbering

% % Step 3 (optional): Reset counter per chapter (for books/theses)
% \counterwithin{listing}{chapter}

% %% Editing marks
% \usepackage[colorinlistoftodos,prependcaption,textsize=tiny]{todonotes}
% % TOGGLE ME to turn off all the commentary:
% \InputIfFileExists{no-editing-marks}{
%   \def\noeditingmarks{}
% }
% % ^^ Need for pgfsyspdfmark apparently?
% \ifx\noeditingmarks\undefined
%     % Adapting to acmart's small margins
%     \setlength{\marginparsep}{0.3em}
%     \setlength{\marginparwidth}{1.4cm}

%     \newcommand{\Red}[1]{{\color{red}{#1}}}
%     \newcommand{\newaudit}[1]{{\color{blue}{#1}}}
%     \newcommand{\note}[1]{{\color{blue}{\begin{itemize} \item {#1} \end{itemize}}}}
%     \newenvironment{alt}{\color{red}}{}

%     \newcommandx{\unsure}[2][1=]{\todo[linecolor=orange,backgroundcolor=orange!25,bordercolor=orange,#1]{#2}}
%     \newcommandx{\info}[2][1=]{\todo[linecolor=green,backgroundcolor=green!25,bordercolor=green,#1]{#2}}
%     \newcommandx{\change}[2][1=]{\todo[linecolor=blue,backgroundcolor=blue!25,bordercolor=blue,#1]{#2}}
%     \newcommandx{\inconsistent}[2][1=]{\todo[linecolor=red,backgroundcolor=red!25,bordercolor=red,#1]{#2}}
%     \newcommandx{\critical}[2][1=]{\todo[linecolor=purple,backgroundcolor=purple!25,bordercolor=purple,#1]{#2}}
%     \newcommand{\improvement}[1]{\todo[linecolor=pink,backgroundcolor=pink!25,bordercolor=pink]{#1}}
%     \newcommandx{\resolved}[2][1=]{\todo[linecolor=OliveGreen,backgroundcolor=OliveGreen!25,bordercolor=OliveGreen,#1]{#2}} % use this to mark a resolved question
% \else
% %    \newcommand{\Red}[1]{#1}
%     \newcommand{\Red}[1]{{\color{red}{#1}}}
%     \newcommand{\newaudit}[1]{#1}
%     \newcommand{\note}[1]{}
%     \newenvironment{alt}{}{}
% %    \renewcommand\todo[2]{}
%     \newcommand{\unsure}[2][1=]{}
%     \newcommand{\info}[2][1=]{}
%     \newcommand{\change}[2]{}
%     \newcommand{\inconsistent}[2]{}
%     \newcommand{\critical}[2]{}
%     \newcommand{\improvement}[1]{}
%     \newcommand{\resolved}[2]{}
% \fi

%\usepackage[hypertexnames=false]{hyperref}
% \usepackage[capitalize, noabbrev]{cleveref}

%% User defined commands

\makeatletter
\newlength\fake@f
\newlength\fake@c
\def\fakesc#1{%
  \begingroup%
  \xdef\fake@name{\csname\curr@fontshape/\f@size\endcsname}%
  \fontsize{\fontdimen8\fake@name}{\baselineskip}\selectfont%
  \uppercase{#1}%
  \endgroup%
}
\makeatother
\newcommand\fauxsc[1]{\fauxschelper#1 \relax\relax}
\def\fauxschelper#1 #2\relax{%
  \fauxschelphelp#1\relax\relax%
  \if\relax#2\relax\else\ \fauxschelper#2\relax\fi%
}
\def\Hscale{.83}\def\Vscale{.79}\def\Cscale{1.00}
\def\fauxschelphelp#1#2\relax{%
  \ifnum`#1>``\ifnum`#1<`\{\scalebox{\Hscale}[\Vscale]{\uppercase{#1}}\else%
    \scalebox{\Cscale}[1]{#1}\fi\else\scalebox{\Cscale}[1]{#1}\fi%
  \ifx\relax#2\relax\else\fauxschelphelp#2\relax\fi}
% \let\textsc\fauxsc

\newcommand{\TODO}[1]{\textnormal{\textcolor{red}{TODO: #1} } }
\newcommand{\sepimp}{\mathrel{-\mkern-6mu*}}
\newcommand{\textopname}[1]{``#1''}
\newcommand{\parr}{\rotatebox[origin=c]{180}{\&}}
\makeatletter
\newcommand{\smallbullet}{} % for safety
\DeclareRobustCommand\smallbullet{%
\mathord{\mathpalette\smallbullet@{0.5}}%
}
\newcommand{\smallbullet@}[2]{%
\vcenter{\hbox{\scalebox{#2}{$\m@th#1\bullet$}}}%
}
\makeatother

\makeatletter
\newcommand{\oset}[3][0ex]{%
\mathrel{\mathop{#3}\limits^{
  \vbox to#1{\kern-2\ex@
  \hbox{$\scriptstyle#2$}\vss}}}}
\makeatother

\def\mycasem#1{\ifthenelse{\equal{#1}{[[¹ν]]}}{}{#1}}
\def\myfunvm#1{\ifthenelse{\equal{#1}{[[¹ν]]}}{\,\,}{#1}}
\def\myfuntm#1{\ifthenelse{\equal{#1}{[[¹ν]]}}{\,}{#1}}
\def\mydestm#1{\ifthenelse{\equal{#1}{[[¹ν]]}}{}{#1}}
\def\mymul#1{\ifthenelse{\equal{#1}{[[¹]]}}{}{#1}}

\let\figtextsize\normalsize
\newcommand{\destcalculus}{\ensuremath{\lambda_d}}
\newcommand{\destcalculusinplace}{\ensuremath{\lambda_{d\,\textsc{ip}}}}
% \newtheorem{lemma}{Lemma}
% \newtheorem{theorem}{Theorem}
\newcommand\btriangleq{\pmb{\triangleq}}
\newcommand\btriangleqrec{\oset{\mathsf{rec}}{\pmb{\triangleq}}}
\newlength{\interdefskip}
\setlength{\interdefskip}{0.1cm}
\newcommand{\newtype}[3][]{#2~\ifthenelse{\equal{#1}{}}{\btriangleq}{\btriangleqrec}~#3\\[\interdefskip]}
\newcommand{\newoperator}[5][]{\phantom{a}\!\!\!\!\!\!\begin{array}[t]{l}%
#2 ~\pmb{:}~ #3 \\
#4 ~\ifthenelse{\equal{#1}{}}{\btriangleq}{\btriangleqrec}~ #5
\end{array}\\[\interdefskip]}
\newcommand{\newoperatorb}[5][]{\phantom{a}\!\!\!\!\!\!\begin{array}[t]{l}%
#2 ~\pmb{:}~ #3 \\
#4 ~\ifthenelse{\equal{#1}{}}{\btriangleq}{\btriangleqrec}~\\\myspace{1}#5
\end{array}\\[\interdefskip]}
\newcommand{\figureratio}{1}
\newcommand{\codehere}[2][t]{\vspace{-0.05cm}\begin{center}\begin{minipage}[#1]{\figureratio\linewidth}{\figtextsize\ensuremath{#2}}\end{minipage}\end{center}\vspace{-0.05cm}}
\NewEnviron{codefig}[2][tbp]{\begin{listing}[#1]
\codehere{\BODY}#2
\end{listing}}
\NewEnviron{ottfig}[2][tbp]{\begin{figure}[#1]
\figtextsize\BODY#2
\end{figure}}
\newcommand{\sidebysidecodehere}[4]{\begin{center}\begin{minipage}[#1]{\figureratio\linewidth}
\noindent\begin{minipage}[#1]{#2\linewidth-0.02\linewidth}{\figtextsize\ensuremath{#3}}\end{minipage}
\hfill
\vrule width 0.5pt % Vertical rule of 1pt width
\hfill
\begin{minipage}[#1]{\linewidth-#2\linewidth-0.02\linewidth}{\figtextsize\ensuremath{#4}}\end{minipage}
\end{minipage}\end{center}
}

\newcommand{\sidebysidecodefig}[6][t]{
\begin{listing}[#1]
\sidebysidecodehere{#3}{#4}{#5}{#6}
#2
\end{listing}
}

\newenvironment{stretchedarray}[2][1]
  {\bgroup\renewcommand*{\arraystretch}{#1}\begin{array}{#2}}
  {\end{array}\egroup}

\newcommand{\mpar}{\text{\,\textramshorns\,}}
\newcommand{\dest}{-\prec}
%\newcommand{\TODO}[1]{{\color{red}\large #1}}
\newcommand{\mnew}[1]{\colorbox{green!50}{#1}}
\newcommand{\muline}[1]{\uline{#1}}
\newcommand{\mold}[1]{\uwave{#1}}
\newunicodechar{⊸}{\ensuremath{\pmb{\multimap}}}
\newunicodechar{→}{\ensuremath{\pmb{\to}}}
\newunicodechar{←}{\ensuremath{\leftarrow}}
\newunicodechar{⇒}{\ensuremath{\pmb{\Rightarrow}}}
\newunicodechar{□}{\ensuremath{{\color{hnamecolor} \square}}}
\newunicodechar{¤}{}
\newunicodechar{;}{\ensuremath{\fatsemi}}
\newunicodechar{∀}{\ensuremath{\pmb{\forall}}}
\newunicodechar{⩴}{\hspace{-0.2ex}:\hspace{-0.2ex}:\hspace{-0.2ex}}
\newunicodechar{Ⴈ}{1}
\newunicodechar{☠}{$\skull$}

\newlength{\widthaugment}
\NewEnviron{augmentwidth}[1]
  {\setlength{\widthaugment}{#1}
   \pgfmathsetmacro{\myratio}{\linewidth / (\widthaugment + \linewidth)}
   \scalebox{\myratio}{\begin{minipage}{\linewidth+\widthaugment}\BODY
   \end{minipage}}}

\makeatletter
\AtBeginEnvironment{minted}{\dontdofcolorbox}
\def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}}
\xpatchcmd{\inputminted}{\minted@fvset}{\minted@fvset\dontdofcolorbox}{}{}
\xpatchcmd{\mintinline}{\minted@fvset}{\minted@fvset\dontdofcolorbox}{}{} % see https://tex.stackexchange.com/a/401250/
\makeatother

\renewcommand{\MintedPygmentize}{./pygmentize_local}
\newlength{\currentparskip}
\newenvironment{unbreakable}
{%
  \setlength{\currentparskip}{\parskip}% Save current \parskip
  \setlength{\parskip}{\currentparskip}% Save current \parskip
  \par\vspace{0.5\baselineskip}% Add possible separation
  \noindent\begin{minipage}{\textwidth}%
    \setlength{\parskip}{\currentparskip}% Restore current \parskip
  %\medskip%
}
{%
  \end{minipage}%
  \par\vspace{0.5\baselineskip}% Add possible vertical separation
}

\def\foreverunspace{%
  \ifnum\lastnodetype=11
    \unskip\foreverunspace
  \else
    \ifnum\lastnodetype=12
      \unkern\foreverunspace
    \else
      \ifnum\lastnodetype=13
        \unpenalty\foreverunspace
      \fi
    \fi
  \fi
}

\newcommand{\IfFancyRuleNames}[2]{#1}

\newcommand{\SetPrefix}[1]{\IfFancyRuleNames{\renewcommand{\ottdrulename}[1]{#1}}{}}

\makeatletter

\IfFancyRuleNames{
  \def\CSep{/}
  \def\CHole{id\textsubscript{H}}
  \def\CDest{id\textsubscript{D}}
  \def\CUnit{$\ottstype{1}$I}
  \def\CFun{$\ottstype{\multimap}$I}
  \def\CLeft{$\ottstype{\oplus}$I\textsubscript{1}}
  \def\CRight{$\ottstype{\oplus}$I\textsubscript{2}}
  \def\CProd{$\ottstype{\otimes}$I}
  \def\CExp{$\ottstype{!}$I}
  \def\CBangProm{$\ottstype{!}$P}
  \def\CBangDerel{$\ottstype{!}$D}
  \def\CBangWeak{$\ottstype{!}$W}
  \def\CBangContr{$\ottstype{!}$C}
  \def\CAmpar{$\ottstype{\ltimes}$I}
  \def\CVal{fromVal}
  \def\CVar{id\textsubscript{V}}
  \def\CApp{$\ottstype{\multimap}$E}
  \def\CPatU{$\ottstype{1}$E}
  \def\CPatS{$\ottstype{\oplus}$E}
  \def\CPatP{$\ottstype{\otimes}$E}
  \def\CPatE{$\ottstype{!}$E}
  \def\CUpdA{$\ottstype{\ltimes}$upd}
  \def\CToA{$\ottstype{\ltimes}$to}
  \def\CFromA{$\ottstype{\ltimes}$from}
  \def\CNewA{$\ottstype{\ltimes}$new}
  \def\CFillU{$\ottstype{\lfloor 1\rfloor}$E}
  \def\CFillL{$\ottstype{\lfloor \oplus\rfloor}$E\textsubscript{1}}
  \def\CFillR{$\ottstype{\lfloor \oplus\rfloor}$E\textsubscript{2}}
  \def\CFillP{$\ottstype{\lfloor \otimes\rfloor}$E}
  \def\CFillE{$\ottstype{\lfloor !\rfloor}$E}
  \def\CFillF{$\ottstype{\lfloor \multimap\rfloor}$E}
  \def\CFillComp{$\ottstype{\lfloor}$~$\ottstype{\rfloor}$E\textsubscript{c}}
  \def\CFillLeaf{$\ottstype{\lfloor}$~$\ottstype{\rfloor}$E\textsubscript{l}}
  \def\CId{id}
  \def\COpenAmpar{$\ottstype{\ltimes}$op}
  \def\CAmparOpen{$\ottstype{\ltimes}$op}
  \def\CAmparClose{$\ottstype{\ltimes}$cl}
  \def\CFocus{F}
  \def\CUnfocus{U}
  \def\CRed{C}
  \def\CTyTerm{\destcalculus{}--ty}
  \def\CTySTerm{\destcalculus{}--ty\textsubscript{s}}
  \def\CTyVal{\destcalculus{}--ty\textsubscript{v}}
  \def\CTyEctxs{\destcalculus{}--ty\textsubscript{E}}
  \def\CTyCmd{\destcalculus{}--ty\textsubscript{cmd}}
  \def\CSem{\destcalculus{}--sem}
  \def\CLOne{$\lambda_{L1}$}
  \def\CLTwo{$\lambda_{L2}$}
  \def\CLm{$\lambda_{Lm}$}
  \def\CLdm{$\lambda_{Ldm}$}
  \def\CLOneOrTwo{$\lambda_{L1,2}$}
  \def\CLTwoOrm{$\lambda_{L2,m}$}
  \def\CSemSuff{\hspace*{-0.2ex}--sem}
  \def\CTy{\hspace*{-0.2ex}--ty}
  \def\CILL{ILL}
  \def\rref*#1{\textsc{#1}}
}{
  \renewcommand{\ottdrulename}[1]{\ottalt@replace@cs\ranchor\_-{}#1\\}\renewcommand{\maybecomm}[1]{\bgroup\def\text##1{}#1\egroup}
  \def\CSep{-}
  \def\CHole{Hole}
  \def\CDest{Dest}
  \def\CUnit{Unit}
  \def\CFun{Fun}
  \def\CLeft{Left}
  \def\CRight{Right}
  \def\CProd{Prod}
  \def\CExp{Exp}
  \def\CBangProm{Prom}
  \def\CBangDerel{Derel}
  \def\CBangWeak{Weak}
  \def\CBangContr{Contra}
  \def\CAmpar{Ampar}
  \def\CVal{Val}
  \def\CVar{Var}
  \def\CApp{App}
  \def\CPatU{PatU}
  \def\CPatS{PatS}
  \def\CPatP{PatP}
  \def\CPatE{PatE}
  \def\CUpdA{UpdA}
  \def\CToA{ToA}
  \def\CFromA{FromA}
  \def\CNewA{NewA}
  \def\CFillU{FillU}
  \def\CFillL{FillL}
  \def\CFillR{FillR}
  \def\CFillP{FillP}
  \def\CFillE{FillE}
  \def\CFillF{FillF}
  \def\CFillComp{FillComp}
  \def\CFillLeaf{FillLeaf}
  \def\CId{Id}
  \def\COpenAmpar{OpenAmpar}
  \def\COpen{Open}
  \def\CClose{Close}
  \def\CFocus{Focus}
  \def\CUnfocus{Unfocus}
  \def\CRed{Red}
  \def\CTyTerm{Ty-term}
  \def\CTySTerm{Ty-sterm}
  \def\CTyVal{Ty-val}
  \def\CTyEctxs{Ty-ectxs}
  \def\CTyCmd{Ty-cmd}
}
\makeatother

\makeatletter
\def\uwave{\bgroup \markoverwith{\lower3.5\p@\hbox{\sixly \textcolor{red}{\char58}}}\ULon}
\font\sixly=lasy6 % does not re-load if already loaded, so no memory problem.
\makeatother

\newcommand{\grammsep}{\hspace*{1.8ex}|\hspace*{1.8ex}}
\newcommand{\grammdef}{\mathrel{\raisebox{0.09ex}{$\mathop{:}$\hspace*{-0.1ex}$\mathop{:}$\hspace*{-0.1ex}}\shorteq}}

\setlist[itemize]{label=\blacktriangleright}
\setlist[enumerate]{label=\textbf{(\arabic*)}}

\title{Formalization and Implementation of Safe Destination Passing in Pure Functional Programming Settings}
\date{PhD Defense --- October 1\textsuperscript{st}, 2025}
\author{Thomas \textsc{Bagrel}}
\institute{LORIA/Inria Nancy \& Tweag}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Actual presentation content
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\maketitle

\begin{frame}{Programming languages}

\begin{itemize}
  \item Imperative languages: instructions step-by-step\\
  \phantom{aa}\textbf{how?} | mutability | untracked side-effects
  \item Functional languages: compose expressions\\
  \phantom{aa}\textbf{what?} | immutability | purity | first-class functions
\end{itemize}

\end{frame}

\begin{frame}[fragile]{Functional languages}

Modeled after mathematical principles

Better safety guarantees | Easier to reason about behavior

Memory managed automatically by GC $\to$ Con: overhead / hard to tune

\end{frame}

% \section{Getting familiar with functional languages}

\begin{frame}[fragile]{Functional data structures}

Data structures are heap-allocated; made of \textbf{linked} heap objects:
  \begin{itemize}
    \item a pointer to the info table (static struct describing the constructor)
    \item for each field, a pointer to this field's value (except for primitive types)
  \end{itemize}

\begin{center}
\scalebox{1.6}{{\footnotesize \mintinline{haskellc}/1 : 2 : []/} \quad $\rightsquigarrow$ \adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj}}}
\end{center}

\vspace*{-0.5cm}

{\small\itshape
\mintinline{haskellc}/(:)/ is list ``cons'' constructor\\[-0.1cm]
\mintinline{haskellc}/[]/ is list ``nil'' constructor\\[-0.1cm]
\mintinline{haskellc}/¤I#/ is constructor for boxed integers\\[-0.1cm]
\mintinline{haskellc}/1#/ is the primitive/unboxed integer ``one''
}

\end{frame}

\begin{frame}[fragile]{Building order in functional languages -- current}

Data structures: immutable, thus built from the leaves up to the root.

\begin{itemize}
  \item The value of a field must be an existing, fully constructed structure
\end{itemize}

\begin{center}
\scalebox{1.1}{\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj-0}}$\to$\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj-1}}$\to$\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj-2}}$\to$\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj}}}
\end{center}

\begin{itemize}
  \item Forces us to build structures in an order potentially different from input data flow.
\end{itemize}

\end{frame}

\begin{frame}[fragile]{Building order in functional languages -- goal}
What about lifting this limitation?

\begin{itemize}
  \item Allowing pieces of data structures to be connected like Lego bricks in \textbf{any order}
\end{itemize}

\begin{center}
\hspace*{-0.5cm}\scalebox{1.1}{\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj-dps-0}}$\to$\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj-dps-1}}$\to$\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj-dps-2}}$\to$\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj-dps-3}}$\to$\adjustbox{valign=c}{\tikzfig{schemas/constructor-heap-obj}}}
\end{center}

\vspace*{1cm}

{\small\itshape
\textcolor{hnamecolor}{$\displaystyle\square$} denotes a ``hole'' in the structure (an uninitialized memory cell)
}

\end{frame}

\begin{frame}{Challenges}

Unitialized memory/\textbf{holes}:
\begin{itemize}
  \item implies future \textbf{mutability}
  \item no read safety (risk of segfault)
\end{itemize}

Need proper functional API to manipulate incomplete structures.

\end{frame}

\begin{frame}{Table of Contents}

\begin{itemize}
  \item API style: destination passing
  \item Safety
  \begin{itemize}
    \item Linear Types
    \item Scope Control with Ages system
  \end{itemize}
\end{itemize}
\end{frame}

\section{Destination passing}

\begin{frame}[fragile]{Here comes destination passing}
Coming from old C days:

\begin{minipage}[t]{0.6\linewidth}
\begin{minted}{c}
MyStruct * fooNaive() {
  MyStruct *res = malloc(sizeof(MyStruct));
  res->f1 = 1; res->f2 = 2;
  return res;
}
\end{minted}
\end{minipage} \hfill \begin{minipage}[t]{0.39\linewidth}
\begin{minted}{c}
void fooDps(MyStruct *dest) {
  dest->f1 = 1; dest->f2 = 2;
}
\end{minted}
\end{minipage}

Caller is responsible for allocation in \mintinline{c}/fooDps/. More flexible:
\begin{itemize}
  \item can allocate several slots at once\\
  \mintinline{c}/MyStruct *vec = malloc(2 * sizeof(MyStruct)); fooDps(&vec[0]); fooDps(&vec[1]);/
  \item can allocate on the stack\\
  \mintinline{c}/MyStruct res; fooDps(&res);/
\end{itemize}

\end{frame}

\begin{frame}[fragile]{Functional DPS}

\begin{minipage}{0.63\linewidth}
\mintinline{haskellc}/Dest/ination: first-class typed wrapper for a\\\phantom{\mintinline{haskellc}/Dest/ination:} raw pointer to a \textbf{hole}

\begin{itemize}
  \item only way to refer to and act on a hole\\(of an incomplete structure)
\end{itemize}

\medskip

\mintinline{haskellc}/Ampar/: first-class typed wrapper for an\\\phantom{\mintinline{haskellc}/Ampar/:} \textbf{incomplete structure} and its destinations
\begin{itemize}
  \item only way to refer to and act on an incomplete structure
\end{itemize}
\end{minipage} \hfill \begin{minipage}{0.36\linewidth}
\hspace*{-1cm}\scalebox{1.2}{\adjustbox{valign=c}{\tikzfig{schemas/incomplete}}}
\end{minipage}

% NOTE: Dire que le boxing des dests n'est pas spécialement requis, c'est un peu spécifique à Haskell

\end{frame}

\begin{frame}[fragile]{Breadth-first tree traversal/building}
Schema with queue of dests
\end{frame}

\begin{frame}[fragile]{Functional DPS API -- Types (1/3)}
Every operation is done through \mintinline{haskellc}/Ampar/ and \mintinline{haskellc}/Dest/ types.

\medskip

\mintinline{haskellc}/data Ampar s t = ¤Ampar s t/ \quad \textit{(opaque)}

\begin{itemize}
  \item \mintinline{haskellc}/s/ is the type of the incomplete structure
  \item \mintinline{haskellc}/t/ carries all the destinations pointing to the holes in \mintinline{haskellc}/s/
\end{itemize}

E.g. \mintinline{haskellc}/Ampar [Int] (Dest Int, Dest Int)/: list of ints with two missing values

\medskip

\mintinline{haskellc}/data Dest t = ¤Dest Addr#/ \quad \textit{(opaque)}

\begin{itemize}
  \item \mintinline{haskellc}/t/ is the type of the hole that the destination references
\end{itemize}

\end{frame}

\begin{frame}[fragile]{Functional DPS API -- Functions (1/2)}
\begin{itemize}
\only<1->{
\item Plug an incomplete structure into the hole of another one? \mintinline{haskellc}/fillComp/}
\only<2>{
\hspace*{-1.25cm}\scalebox{1.0}{\adjustbox{valign=c}{\tikzfig{schemas/pres-fillComp}}}}
\only<3->{
\item Fill a hole with an already complete value? \mintinline{haskellc}/fillLeaf/}
\only<4>{
\scalebox{1.0}{\adjustbox{valign=c}{\tikzfig{schemas/pres-fillLeaf}}}}
\only<5->{
\item Allocate a hollow data constructor and plug it into a hole? \mintinline{haskellc}/fill @'Ctor/}
\only<6>{
\scalebox{1.0}{\adjustbox{valign=c}{\tikzfig{schemas/pres-fillCons}}}\\[0.3cm]
\scalebox{1.0}{\adjustbox{valign=c}{\tikzfig{schemas/pres-fillNil}}}}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Functional DPS API -- Functions (2/2)}
\begin{itemize}
\only<1->{
\item Access destinations of an \mintinline{haskellc}/Ampar/? \mintinline{haskellc}/`updWith`/}
\only<2>{
\hspace*{-1.25cm}\scalebox{1.0}{\adjustbox{valign=c}{\tikzfig{schemas/pres-updWith}}}}
\only<3->{
\item Spawn new incomplete structure? \mintinline{haskellc}/newAmpar/}
\only<4>{
\scalebox{1.0}{\adjustbox{valign=c}{\tikzfig{schemas/pres-newAmpar}}}}
\only<5->{
\item Extract a completed structure? \mintinline{haskellc}/fromAmpar'/}
\only<6>{
\scalebox{1.0}{\adjustbox{valign=c}{\tikzfig{schemas/pres-fromAmpar}}}}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Functional DPS API -- Simplified overview}
\begin{minted}{haskellc}
data Ampar s t
newAmpar ⩴ ∀ s. Ampar s (Dest s)
toAmpar ⩴ ∀ s. s → Ampar s ()
fromAmpar' ⩴ ∀ s. Ampar s () → s
updWith ⩴ ∀ s t u. Ampar s t → (t → u) → Ampar s u

data Dest t
type family DestsOf lCtor t  -- returns dests associated to fields of constructor
fill ⩴ ∀ lCtor t. Dest t → DestsOf lCtor t
fillComp ⩴ ∀ s t. Ampar s t → Dest s → t
fillLeaf ⩴ ∀ t. t → Dest t → ()
\end{minted}

% NOTE: trouver quoi dire, peut être parler de la type family ?
% NOTE: Dire que c'est un peu un mensonge, que ça ne fonctionne pas encore
\end{frame}

\section{Safety}

\subsection{Linearity}

\begin{frame}[fragile]{Unrestricted use of destinations}
\begin{minted}{haskellc}
-- fromAmpar' ⩴ ∀ s. Ampar s () → s
let complete :: Ampar [Int] () = newAmpar `updWith` \d → ()
 in print (fromAmpar' complete)
-- SEGFAULT!
\end{minted}
% TODO: depending on strictness analysis, insert example with filling the same dest twice
\end{frame}

\begin{frame}[fragile]{Linearity to the rescue}
Idea : destinations are linear resources
Each unconsumed destination witnesses a remaining hole
Destination is consumed when the associated hole is filled
\end{frame}

\begin{frame}[fragile]{Linear Haskell overview}
TODO
\end{frame}

\begin{frame}[fragile]{Linear scopes and tokens}
TODO
\end{frame}

\begin{frame}[fragile]{Updating the API with linearity}
TODO
\end{frame}

\begin{frame}[fragile]{Functional DPS API -- with linearity}
\begin{minted}{haskellc}
data Token
dup ⩴ Token ⊸ (Token, Token)
drop ⩴ Token ⊸ ()
withToken ⩴ ∀ t. (Token ⊸ Ur t) ⊸ Ur t

data Ampar s t
newAmpar ⩴ ∀ s. Token ⊸ Ampar s (Dest s)
tokenBesides ⩴ ∀ s t. Ampar s t ⊸ (Ampar s t, Token)
toAmpar ⩴ ∀ s. Token ⊸ s ⊸ Ampar s ()
fromAmpar ⩴ ∀ s t. Ampar s (Ur t) ⊸ Ur (s, t)
fromAmpar' ⩴ ∀ s. Ampar s () ⊸ Ur s
updWith ⩴ ∀ s t u. Ampar s t ⊸ (t ⊸ u) ⊸ Ampar s u

data Dest t
type family DestsOf lCtor t  -- returns dests associated to fields of constructor
fill ⩴ ∀ lCtor t. Dest t ⊸ DestsOf lCtor t
fillComp ⩴ ∀ s t. Ampar s t ⊸ Dest s ⊸ t
fillLeaf ⩴ ∀ t. t ⊸ Dest t ⊸ ()
\end{minted}
\end{frame}

\subsection{Safe yet?}

\begin{frame}[fragile]{Scope escape}
\begin{minted}{haskellc}
withToken $ \t → case dup t of (t1, t2) →
  let outer :: Ampar (Dest ()) () = (newAmpar t1 :: Ampar (Dest ()) (Dest (Dest ()))) `updWith` \(d0 :: Dest (Dest ())) →
        let inner :: Ampar () () = (newAmpar t2 :: Ampar () (Dest ())) `updWith` \(d1 :: Dest ()) → d0 &fillLeaf d1
         in fromAmpar' inner
   in fromAmpar' outer ; Ur ()
\end{minted}
\end{frame}

\begin{frame}[fragile]{Scope escape}
Not \emph{just} an artificial edge-case

Reappear subtly in more complex scenarii

Fundamental issue when storing away linear resource in linear container: break API invariant
\end{frame}

\subsection{Solutions to scope escape}

\begin{frame}[fragile]{With just Haskell type system}

\begin{block}{Solution 1: destinations can only store non-linear data}
TODO
\end{block}

\begin{block}{Solution 2: do not allow destinations for linear data to be filled with \mintinline{haskellc}/fillLeaf/ or \mintinline{haskellc}/fillComp/}
TODO
\end{block}

\end{frame}

\section{A more general solution: enrich the type system with scope control}

\begin{frame}[fragile]{Age system}
Principle: we track the age of resources.

Age 0 says the resource comes from the innermost `updWith` scope.

When entering a new `updWith` scope, all existing resources get their age incremented by 1.
\end{frame}

\begin{frame}[fragile]{Age system -- Example}
TODO
\end{frame}

\begin{frame}[fragile]{Age control in \mintinline{haskellc}/fill/ functions}

The RHS (content being stored away) must be exactly 1 scope older than the LHS (destination being filled)

TODO schema

\end{frame}

\begin{frame}[fragile]{Age control prevents scope escape}
\begin{minted}{haskellc}
withToken $ \t →
  let outer :: Ampar (Dest ()) () = (newAmpar :: Ampar (Dest ()) (Dest (Dest ()))) `updWith` \(d0 :: Dest (Dest ())) →
        let inner :: Ampar () () = (newAmpar :: Ampar () (Dest ())) `updWith` \(d1 :: Dest ()) → d0 &fillLeaf d1
         in fromAmpar' inner
   in fromAmpar' outer ; Ur ()
\end{minted}

% Pas super convaincu par cette slide
\end{frame}

\subsection{Formalization}

\begin{frame}[fragile]{Modal type system: easy extension}

Explain Linear Haskell

% Linearity only appear in identity/variable rule
\end{frame}

% Modal system, like Linear Haskell, defined in a generic way
% All the rules not speaking explicitely about ages are still incorporating them implicitely, through modes, so that we don't have to re-write or change them at all
% Ages appear only in the rules that need them, like fill rules
% If we can fit ages in the modal system

\begin{frame}[fragile]{Combining linearity and ages in a same semiring}

Semiring

% Parler de la formalisation en Rocq
\end{frame}


% NOTE: Retombées concrètes (proposal GHC, etc)
% NOTE: Thèse industrielle ancrée dans le réel
% 
\end{document}