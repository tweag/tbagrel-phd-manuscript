defns
Ty :: '' ::=

defn
G ⫦ v : T :: :: Ty_val :: Ty_val_ {{ com Typing judgment for values }} by

--------------------- :: Hole {{ com \CHole }}
{ +h : T ¹ν } ⫦ +h : T

{{ [[¹ν]] ⥶ [[m]] }} [[:Subtypem]]
---------------- :: Dest {{ com \CDest }}
{ -h : m ⌊T⌋n } ⫦ -h : ⌊T⌋n

--------------------- :: Unit {{ com \CUnit }}
{} ⫦ () :①

% {{ [[D]] # [[{ x : m T }]] }} [[:DisjointDx]]
{{ IsValid [[m]] }} [[:Validm]]
{{ DestOnly [[D]] }} [[:DestOnlyD]]
D + { x : m T } ⊢ u : U [[:Tyu]]
----------------- :: Fun {{ com \CFun }}
D ⫦ ᵛλ x m ⟼ u : T m → U

G ⫦ v1 : T1 [[:Tyv1]]
--------------------- :: Left {{ com \CLeft }}
G ⫦ Inl v1 : T1 ⨁ T2

G ⫦ v2 : T2 [[:Tyv2]]
--------------------- :: Right {{ com \CRight }}
G ⫦ Inr v2 : T1 ⨁ T2

G1 ⫦ v1 : T1 [[:Tyv1]]
G2 ⫦ v2 : T2 [[:Tyv2]]
------------------------- :: Prod {{ com \CProd }}
G1 + G2 ⫦ (v1, v2) : T1 ⨂ T2

G ⫦ v' : T [[:Tyvp]]
{{ IsValid [[n]] }} [[:Validn]]
--------------------- :: Exp {{ com \CExp }}
n·G ⫦ ᴇ n v' : ! n T

{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ DestOnly [[D3]] }} [[:DestOnlyD3]]
{{ ValidOnly [[-⁻¹D3]] }} [[:ValidOnlyhiD3]]
{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ [[D1]] # [[D3]] }} [[:DisjointD1D3]]
{{ [[D2]] # [[D3]] }} [[:DisjointD2D3]]
¹↑·D1 + D3 ⫦ v1 : T [[:Tyv1]]
D2 + -⁻¹D3 ⫦ v2 : U [[:Tyv2]]
---------------- :: Ampar {{ com \CAmpar }}
D1 + D2 ⫦ hnames(D3) ⟨v2 ❟ v1⟩ : U ⧔ T

defn
P ⊢ t : T :: :: Ty_term :: Ty_term_ {{ com Typing judgment for terms }} by

{{ DestOnly [[D]] }} [[:DestOnlyD]] % Functionnally equivalent as ctx_NoHole P as values cannot syntactically contains free variables
{{ [[P]] # [[D]] }} [[:DisjointPD]]
{{ DisposableOnly [[P]] }} [[:DisposP]]
D ⫦ v : T [[:Tyv]]
-------------------- :: Val {{ com \CVal }}
P + D ⊢ v : T

{{ DisposableOnly [[P]] }} [[:DisposP]]
{{ [[P]] # [[{ x : m T }]] }} [[:DisjointPx]]
{{ [[¹ν]] ⥶ [[m]] }} [[:Subtypem]]
-------------------- :: Var {{ com \CVar }}
P + { x : m T } ⊢ x : T

{{ IsValid [[m]] }} [[:Validm]]
P1 ⊢ t : T [[:Tyt]]
P2 ⊢ t' : T m → U [[:Tytp]]
----------------- :: App {{ com \CApp }}
m·P1 + P2 ⊢ t' t : U

P1 ⊢ t : ① [[:Tyt]]
P2 ⊢ u : U [[:Tyu]]
----------------- :: PatU {{ com \CPatU }}
P1 + P2 ⊢ t ; u : U

{{ IsValid [[m]] }} [[:Validm]]
{{ [[P2]] # [[{ x1 : m T1 }]] }} [[:DisjointP2x1]]
{{ [[P2]] # [[{ x2 : m T2 }]] }} [[:DisjointP2x2]]
P1 ⊢ t : T1 ⨁ T2 [[:Tyt]]
P2 + { x1 : m T1 } ⊢ u1 : U [[:Tyu1]]
P2 + { x2 : m T2 } ⊢ u2 : U [[:Tyu2]]
----------------- :: PatS {{ com \CPatS }}
m·P1 + P2 ⊢ t ►case m { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } : U

{{ IsValid [[m]] }} [[:Validm]]
{{ [[P2]] # [[{ x1 : m T1 }]] }} [[:DisjointP2x1]]
{{ [[P2]] # [[{ x2 : m T2 }]] }} [[:DisjointP2x2]]
{{ [[{ x1 : m T1 }]] # [[{ x2 : m T2 }]] }} [[:Disjointx1x2]]
P1 ⊢ t : T1 ⨂ T2 [[:Tyt]]
P2 + { x1 : m T1 } + { x2 : m T2 } ⊢ u : U [[:Tyu]]
----------------- :: PatP {{ com \CPatP }}
m·P1 + P2 ⊢ t ►case m (x1 , x2) ⟼ u : U

{{ IsValid [[m]] }} [[:Validm]]
{{ IsValid [[n]] }} [[:Validn]]
{{ [[P2]] # [[{ x : m·n T }]] }} [[:DisjointP2x]]
P1 ⊢ t : !n T [[:Tyt]]
P2 + { x : m·n T } ⊢ u : U [[:Tyu]]
----------------- :: PatE {{ com \CPatE }}
m·P1 + P2 ⊢ t ►case m ᴇ n x ⟼ u : U

{{ [[P2]] # [[{ x : ¹ν T }]] }} [[:DisjointP2x]]
P1 ⊢ t : U ⧔ T [[:Tyt]]
¹↑·P2 + { x : ¹ν T } ⊢ t' : T' [[:Tytp]]
-------------------------------- :: UpdA {{ com \CUpdA }}
P1 + P2 ⊢ t ►map x ⟼ t' : U ⧔ T'

P ⊢ u : U [[:Tyu]]
------------------------------- :: ToA {{ com \CToA }}
P ⊢ to⧔ u : U ⧔ ①

P ⊢ t : U ⧔ (! ¹∞ T) [[:Tyt]]
------------------------------- :: FromA {{ com \CFromA }}
P ⊢ from⧔ t : U ⨂ (! ¹∞ T)

{{ DisposableOnly [[P]] }} [[:DisposP]]
-------------------- :: NewA {{ com \CNewA }}
P ⊢ alloc : T ⧔ ⌊ T ⌋ ¹ν

{{ IsValid [[n]] }} [[:Validn]]
P ⊢ t : ⌊①⌋n [[:Tyt]]
------------------------------ :: FillU {{ com \CFillU }}
P ⊢ t ⨞ () : ①

{{ IsValid [[n]] }} [[:Validn]]
P ⊢ t : ⌊T1 ⨁ T2⌋n [[:Tyt]]
------------------------------ :: FillL {{ com \CFillL }}
P ⊢ t ⨞ Inl : ⌊T1⌋n

{{ IsValid [[n]] }} [[:Validn]]
P ⊢ t : ⌊T1 ⨁ T2⌋n [[:Tyt]]
------------------------------ :: FillR {{ com \CFillR }}
P ⊢ t ⨞ Inr : ⌊T2⌋n

{{ IsValid [[n]] }} [[:Validn]]
P ⊢ t : ⌊T1 ⨂ T2⌋n [[:Tyt]]
------------------------------ :: FillP {{ com \CFillP }}
P ⊢ t ⨞ (,) : ⌊T1⌋n ⨂ ⌊T2⌋n

{{ IsValid [[n]] }} [[:Validn]]
{{ IsValid [[n']] }} [[:Validnp]]
P ⊢ t : ⌊!n' T⌋n [[:Tyt]]
------------------------------ :: FillE {{ com \CFillE }}
P ⊢ t ⨞ ᴇ n' : ⌊T⌋n'·n

{{ IsValid [[m]] }} [[:Validm]]
{{ IsValid [[n]] }} [[:Validn]]
{{ [[P2]] # [[{ x : m T }]] }} [[:DisjointP2x]]
P1 ⊢ t : ⌊T m → U⌋n [[:Tyt]]
P2 + { x : m T } ⊢ u : U [[:Tyu]]
---------------------------------------- :: FillF {{ com \CFillF }}
P1 + (¹↑·n)·P2 ⊢ t ⨞(λ x m ⟼ u) : ①

P1 ⊢ t : ⌊U⌋¹ν [[:Tyt]]
P2 ⊢ t' : U ⧔ T [[:Tytp]]
----------------------------- :: FillComp {{ com \CFillComp }}
P1 + ¹↑·P2 ⊢ t ⨞· t' : T

{{ IsValid [[n]] }} [[:Validn]]
P1 ⊢ t : ⌊T⌋n [[:Tyt]]
P2 ⊢ t' : T [[:Tytp]]
----------------------------- :: FillLeaf {{ com \CFillLeaf }}
P1 + (¹↑·n)·P2 ⊢ t ◀ t' : ①

defn
P ˢ⊢ t : T :: :: Ty_sterm :: Ty_sterm_ {{ com Derived typing judgment for syntactic sugar forms }} by

P ⊢ t : T ⧔ ① [[:Tyt]]
---------------- :: FromA' {{ com \CFromA' }}
P ˢ⊢ from⧔' t : T

{{ UserDefined [[P]] }} [[:UserDefinedP]]
{{ DisposableOnly [[P]] }} [[:DisposP]]
---------------- :: Unit {{ com \CUnit }}
P ˢ⊢ ˢ() : ①

{{ UserDefined [[P2]] }} [[:UserDefinedP2]]
{{ IsValid [[m]] }} [[:Validm]]
{{ [[P2]] # [[{ x : m T }]] }} [[:DisjointP2x]]
P2 + { x : m T } ⊢ u : U [[:Tyu]]
---------------------------------------- :: Fun {{ com \CFun }}
P2 ˢ⊢ ˢλ x m ⟼ u : T m → U

{{ UserDefined [[P2]] }} [[:UserDefinedP2]]
P2 ⊢ t : T1
------------------------------ :: Left {{ com \CLeft }}
P2 ˢ⊢ ˢInl t : T1 ⨁ T2

{{ UserDefined [[P2]] }} [[:UserDefinedP2]]
P2 ⊢ t : T2
------------------------------ :: Right {{ com \CRight }}
P2 ˢ⊢ ˢInr t : T1 ⨁ T2

{{ UserDefined [[P2]] }} [[:UserDefinedP2]]
{{ IsValid [[m]] }} [[:Validm]]
P2 ⊢ t : T
----------------------------------- :: Exp {{ com \CExp }}
m·P2 ˢ⊢ ˢᴇ m t : ! m T

{{ UserDefined [[P21]] }} [[:UserDefinedP21]]
{{ UserDefined [[P22]] }} [[:UserDefinedP22]]
P21 ⊢ t1 : T1
P22 ⊢ t2 : T2
----------------------------------- :: Prod {{ com \CProd }}
P21 + P22 ˢ⊢ ˢ(t1, t2) : T1 ⨂ T2

defn
D ⊣ C : T ↣ U0 :: :: Ty_ectxs :: Ty_ectxs_ {{ com Typing judgment for evaluation contexts }} {{ tex [[D]][[⊣]][[C]][[:]][[T]]\ottstype{\rightarrowtail}[[U0]] }} by

-------------------- :: Id {{ com \CId }}
{} ⊣ ⬜ : U0 ↣ U0

{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ IsValid [[m]] }} [[:Validm]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
m·D1 + D2 ⊣ C : U ↣ U0 [[:TyC]]
D2 ⊢ t' : T m → U [[:Tytp]]
----------------- :: App1 {{ com \CApp\textsubscript{1} }}
D1 ⊣ C ∘ (t' ⬜) : T ↣ U0

{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ IsValid [[m]] }} [[:Validm]]
{{ ValidOnly [[D1]] }} [[:ValidOnlyD1]]
m·D1 + D2 ⊣ C : U ↣ U0 [[:TyC]]
D1 ⊢ v : T [[:Tyv]]
----------------- :: App2 {{ com \CApp\textsubscript{2} }}
D2 ⊣ C ∘ (⬜ v) : (T m → U) ↣ U0

{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
D1 + D2 ⊣ C : U ↣ U0 [[:TyC]]
D2 ⊢ u : U [[:Tyu]]
----------------- :: PatU {{ com \CPatU }}
D1 ⊣ C ∘ (⬜ ; u) : ① ↣ U0

% {{ [[D2]] # [[{ x1 : m T1 }]] }} [[:DisjointD2x1]]
% {{ [[D2]] # [[{ x2 : m T2 }]] }} [[:DisjointD2x2]]
{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ IsValid [[m]] }} [[:Validm]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
m·D1 + D2 ⊣ C : U ↣ U0 [[:TyC]]
D2 + { x1 : m T1 } ⊢ u1 : U [[:Tyu1]]
D2 + { x2 : m T2 } ⊢ u2 : U [[:Tyu2]]
----------------- :: PatS {{ com \CPatS }}
D1 ⊣ C ∘ (⬜ ►case m { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 }) : (T1 ⨁ T2) ↣ U0

% {{ [[D2]] # [[{ x1 : m T1 }]] }} [[:DisjointD2x1]]
% {{ [[D2]] # [[{ x2 : m T2 }]] }} [[:DisjointD2x2]]
{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ [[{ x1 : m T1 }]] # [[{ x2 : m T2 }]] }} [[:Disjointx1x2]]
{{ IsValid [[m]] }} [[:Validm]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
m·D1 + D2 ⊣ C : U ↣ U0 [[:TyC]]
D2 + { x1 : m T1 } + { x2 : m T2 } ⊢ u : U [[:Tyu]]
----------------- :: PatP {{ com \CPatP }}
D1 ⊣ C ∘ (⬜ ►case m (x1 , x2) ⟼ u) : (T1 ⨂ T2) ↣ U0

% {{ [[D2]] # [[{ x : m·m' T }]] }} [[:DisjointD2x]]
{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ IsValid [[m]] }} [[:Validm]]
{{ IsValid [[m']] }} [[:Validmp]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
m·D1 + D2 ⊣ C : U ↣ U0 [[:TyC]]
D2 + { x : m·m' T } ⊢ u : U [[:Tyu]]
----------------- :: PatE {{ com \CPatE }}
D1 ⊣ C ∘ (⬜ ►case m ᴇ m' x ⟼ u) : ! m' T ↣ U0

% {{ [[¹↑·D2]] # [[{ x : ¹ν T }]] }} [[:DisjointD2x]]
{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
D1 + D2 ⊣ C : U ⧔ T' ↣ U0 [[:TyC]]
¹↑·D2 + { x : ¹ν T } ⊢ t' : T' [[:Tytp]]
-------------------------------- :: UpdA {{ com \CUpdA }}
D1 ⊣ C ∘ (⬜ ►map x ⟼ t') : (U ⧔ T) ↣ U0

D ⊣ C : (U ⧔ ①) ↣ U0 [[:TyC]]
------------------------------- :: ToA {{ com \CToA }}
D ⊣ C ∘ (to⧔ ⬜) : U ↣ U0

D ⊣ C : (U ⨂ (! ¹∞ T)) ↣ U0 [[:TyC]]
------------------------------- :: FromA {{ com \CFromA }}
D ⊣ C ∘ (from⧔ ⬜) : (U ⧔ (! ¹∞ T)) ↣ U0

{{ IsValid [[n]] }} [[:Validn]]
D ⊣ C : ① ↣ U0 [[:TyC]]
------------------------------ :: FillU {{ com \CFillU }}
D ⊣ C ∘ (⬜ ⨞ ()) : ⌊①⌋n ↣ U0

{{ IsValid [[n]] }} [[:Validn]]
D ⊣ C : ⌊T1⌋n ↣ U0 [[:TyC]]
------------------------------ :: FillL {{ com \CFillL }}
D ⊣ C ∘ (⬜ ⨞ Inl) : ⌊T1 ⨁ T2⌋n ↣ U0

{{ IsValid [[n]] }} [[:Validn]]
D ⊣ C : ⌊T2⌋n ↣ U0 [[:TyC]]
------------------------------ :: FillR {{ com \CFillR }}
D ⊣ C ∘ (⬜ ⨞ Inr) : ⌊T1 ⨁ T2⌋n ↣ U0

{{ IsValid [[n]] }} [[:Validn]]
D ⊣ C : (⌊T1⌋n ⨂ ⌊T2⌋n) ↣ U0 [[:TyC]]
------------------------------ :: FillP {{ com \CFillP }}
D ⊣ C ∘ (⬜ ⨞ (,)) : ⌊T1 ⨂ T2⌋n ↣ U0

{{ IsValid [[n]] }} [[:Validn]]
{{ IsValid [[m]] }} [[:Validm]]
D ⊣ C : ⌊T⌋m·n ↣ U0 [[:TyC]]
------------------------------ :: FillE {{ com \CFillE }}
D ⊣ C ∘ (⬜ ⨞ ᴇ m) : ⌊!m T⌋n ↣ U0

% {{ [[D2]] # [[{ x : m T }]] }} [[:DisjointD2x]]
{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
{{ IsValid [[m]] }} [[:Validm]]
{{ IsValid [[n]] }} [[:Validn]]
D1 + (¹↑·n)·D2 ⊣ C : ① ↣ U0 [[:TyC]]
D2 + { x : m T } ⊢ u : U [[:Tyu]]
---------------------------------------- :: FillF {{ com \CFillF }}
D1 ⊣ C ∘ (⬜ ⨞(λ x m ⟼ u)) : ⌊T m → U⌋n ↣ U0

{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
D1 + ¹↑·D2 ⊣ C : T ↣ U0 [[:TyC]]
D2 ⊢ t' : U ⧔ T [[:Tytp]]
----------------------------- :: FillComp1 {{ com \CFillComp\textsubscript{1} }}
D1 ⊣ C ∘ (⬜ ⨞· t') : ⌊U⌋¹ν ↣ U0

{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ ValidOnly [[D1]] }} [[:ValidOnlyD1]]
D1 + ¹↑·D2 ⊣ C : T ↣ U0 [[:TyC]]
D1 ⊢ v : ⌊U⌋¹ν [[:Tyt]]
----------------------------- :: FillComp2 {{ com \CFillComp\textsubscript{2} }}
D2 ⊣ C ∘ (v ⨞· ⬜) : U ⧔ T ↣ U0

{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ ValidOnly [[D2]] }} [[:ValidOnlyD2]]
{{ IsValid [[n]] }} [[:Validn]]
D1 + (¹↑·n)·D2 ⊣ C : ① ↣ U0 [[:TyC]]
D2 ⊢ t' : T [[:Tytp]]
----------------------------- :: FillLeaf1 {{ com \CFillLeaf\textsubscript{1} }}
D1 ⊣ C ∘ (⬜ ◀ t') : ⌊T⌋n ↣ U0

{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ ValidOnly [[D1]] }} [[:ValidOnlyD1]]
{{ IsValid [[n]] }} [[:Validn]]
D1 + (¹↑·n)·D2 ⊣ C : ① ↣ U0 [[:TyC]]
D1 ⊢ v : ⌊T⌋n [[:Tyt]]
----------------------------- :: FillLeaf2 {{ com \CFillLeaf\textsubscript{2} }}
D2 ⊣ C ∘ (v ◀ ⬜) : T ↣ U0

{{ [[D1]] # [[D2]] }} [[:DisjointD1D2]]
{{ [[D1]] # [[D3]] }} [[:DisjointD1D3]]
{{ [[D2]] # [[D3]] }} [[:DisjointD2D3]]
{{ DestOnly [[D1]] }} [[:DestOnlyD1]]
{{ DestOnly [[D2]] }} [[:DestOnlyD2]]
{{ DestOnly [[D3]] }} [[:DestOnlyD3]]
{{ ValidOnly [[-⁻¹D3]] }} [[:ValidOnlyhiD3]]
{{ [[hnames(C)]] ## [[hnames(D3)]] }} [[:HDisjointCD3]] % that predicate implies D2 # D3
D1 + D2 ⊣ C : (U ⧔ T') ↣ U0 [[:TyC]]
D2 + -⁻¹D3 ⫦ v2 : U [[:Tyv2]]
---------------- :: OpenAmpar {{ com \COpenAmpar }}
¹↑·D1 + D3 ⊣ C ∘ (hnames(D3) ᵒᵖ⟨v2 ❟ ⬜⟩) : T' ↣ U0

defn
⊢ C [ t ] : T :: :: Ty :: Ty_ {{ com Typing judgment for commands }} {{ tex [[⊢]][[C]]\big[\,[[t]]\,\big][[:]][[T]] }} by

{{ ValidOnly [[D]] }} [[:ValidOnlyD]]
{{ DestOnly [[D]] }} [[:DestOnlyD]]
D ⊣ C : T ↣ U0 [[:TyC]]
D ⊢ t : T [[:Tyt]]
--------------------- :: cmd {{ com \CTyCmd }}
⊢ C[t] : U0

defns
Sem :: '' ::=

defn
C [ t ] ⟶ C' [ t' ] :: :: Sem :: '' {{ com Small-step evaluation of commands }} {{ tex [[C]]~\big[\,[[t]]\,\big]~[[⟶]]~[[C']]~\big[\,[[t']]\,\big] }} by

{{ NotVal [[t]] }} [[:NotValt]]
----------------------------- :: App_Focus1 {{ com \CApp{}F\textsubscript{1} }}
C[t' t] ⟶ (C ∘ (t' ⬜))[t]

----------------------------- :: App_Unfocus1 {{ com \CApp{}U\textsubscript{1} }}
(C ∘ (t' ⬜))[v] ⟶ C[t' v]

{{ NotVal [[t']] }} [[:NotValtp]]
----------------------------- :: App_Focus2 {{ com \CApp{}F\textsubscript{2} }}
C[t' v] ⟶ (C ∘ (⬜ v))[t']

----------------------------- :: App_Unfocus2 {{ com \CApp{}U\textsubscript{2} }}
(C ∘ (⬜ v))[v'] ⟶ C[v' v]

------------------ :: App_Red {{ com \CApp\CRed }}
C[(ᵛλ x m ⟼ u) v] ⟶ C[u[x ≔ v] ]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: PatU_Focus {{ com \CPatU\CFocus }}
C[t ; u] ⟶ (C ∘ (⬜ ; u))[t]

----------------------- :: PatU_Unfocus {{ com \CPatU\CUnfocus }}
(C ∘ (⬜ ; u))[v] ⟶ C[v ; u]

----------------------- :: PatU_Red {{ com \CPatU\CRed }}
C[() ; u] ⟶ C[u]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: PatS_Focus {{ com \CPatS\CFocus }}
C[t ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }] ⟶ (C ∘ (⬜ ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }))[t]

----------------------- :: PatS_Unfocus {{ com \CPatS\CUnfocus }}
(C ∘ (⬜ ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }))[v] ⟶ C[v ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }]

----------------------- :: PatL_Red {{ com \CPatS\CRed{}\textsubscript{1} }}
C[(Inl v1) ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }] ⟶ C[u1[x1 ≔ v1] ]

----------------------- :: PatR_Red {{ com \CPatS\CRed{}\textsubscript{2} }}
C[(Inr v2) ►case m { Inl x1 ⟼ u1, Inr x2 ⟼ u2 }] ⟶ C[u2[x2 ≔ v2] ]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: PatP_Focus {{ com \CPatP\CFocus }}
C[t ►case m (x1,x2) ⟼ u] ⟶ (C ∘ (⬜ ►case m (x1,x2) ⟼ u))[t]

----------------------- :: PatP_Unfocus {{ com \CPatP\CUnfocus }}
(C ∘ (⬜ ►case m (x1,x2) ⟼ u))[v] ⟶ C[v ►case m (x1,x2) ⟼ u]

----------------------- :: PatP_Red {{ com \CPatP\CRed }}
C[(v1, v2) ►case m (x1,x2) ⟼ u] ⟶ C[u[x1 ≔ v1][x2 ≔ v2] ]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: PatE_Focus {{ com \CPatE\CFocus }}
C[t ►case m ᴇ n x ⟼ u] ⟶ (C ∘ (⬜ ►case m ᴇ n x ⟼ u))[t]

----------------------- :: PatE_Unfocus {{ com \CPatE\CUnfocus }}
(C ∘ (⬜ ►case m ᴇ n x ⟼ u))[v] ⟶ C[v ►case m ᴇ n x ⟼ u]

----------------------- :: PatE_Red {{ com \CPatE\CRed }}
C[ᴇ n v' ►case m ᴇ n x ⟼ u] ⟶ C[u[x ≔ v'] ]

{{ NotVal [[t]] }} [[:NotValt]]
----------------------- :: UpdA_Focus {{ com \CUpdA\CFocus }}
C[t ►map x ⟼ t'] ⟶ (C ∘ (⬜ ►map x ⟼ t'))[t]

----------------------- :: UpdA_Unfocus {{ com \CUpdA\CUnfocus }}
(C ∘ (⬜ ►map x ⟼ t'))[v] ⟶ C[v ►map x ⟼ t']

{{ [[h''']] = [[max(H ∪ hnames(C)) + 1]] }} [[:hpMaxC]]
---------------------------------- :: Ampar_Open {{ com \CAmpar\CSep\COpen }}
C[ H ⟨ v2 ❟ v1 ⟩ ►map x ⟼ t'] ⟶ (C ∘ (H⩲h''' ᵒᵖ⟨ v2[H⩲h'''] ❟ ⬜⟩))[ t'[x ≔ v1[H⩲h'''] ] ]

---------------------------------- :: Ampar_Close {{ com \CAmpar\CSep\CClose }}
(C ∘ H ᵒᵖ⟨ v2 ❟ ⬜⟩)[v1] ⟶ C[ H ⟨ v2 ❟ v1 ⟩ ]

{{ NotVal [[u]] }} [[:NotValu]]
-------------------------- :: ToA_Focus {{ com \CToA\CFocus }}
C[to⧔ u] ⟶ (C ∘ (to⧔ ⬜))[u]

-------------------------- :: ToA_Unfocus {{ com \CToA\CUnfocus }}
(C ∘ (to⧔ ⬜))[v2] ⟶ C[to⧔ v2]

----------------------------------------- :: ToA_Red {{ com \CToA\CRed }}
C[to⧔ v2] ⟶ C[{} ⟨ v2 ❟ () ⟩]

{{ NotVal [[t]] }} [[:NotValt]]
-------------------------- :: FromA_Focus {{ com \CFromA\CFocus }}
C[from⧔ t] ⟶ (C ∘ (from⧔ ⬜))[t]

-------------------------- :: FromA_Unfocus {{ com \CFromA\CUnfocus }}
(C ∘ (from⧔ ⬜))[v] ⟶ C[from⧔ v]

-------------------------------------- :: FromA_Red {{ com \CFromA\CRed }}
C[from⧔ {} ⟨ v2 ❟ ᴇ ¹∞ v1 ⟩] ⟶ C[(v2, ᴇ ¹∞ v1)]

-------------------------------------- :: NewA_Red {{ com \CNewA\CRed }}
C[alloc] ⟶ C[{1} ⟨ +1 ❟ -1 ⟩]

{{ NotVal [[t]] }} [[:NotValt]]
-------------------------- :: FillU_Focus {{ com \CFillU\CFocus }}
C[t ⨞ ()] ⟶ (C ∘ (⬜ ⨞ () ))[t]

-------------------------- :: FillU_Unfocus {{ com \CFillU\CUnfocus }}
(C ∘ (⬜ ⨞ () ))[v] ⟶ C[v ⨞ ()]

------------------------------------- :: FillU_Red {{ com \CFillU\CRed }}
C[-h ⨞ ()] ⟶ C[h ≔ {} ()][()]

{{ NotVal [[t]] }} [[:NotValt]]
------------------------------------- :: FillL_Focus {{ com \CFillL\CFocus }}
C[t ⨞ Inl] ⟶ (C ∘ (⬜ ⨞ Inl))[t]

------------------------------------- :: FillL_Unfocus {{ com \CFillL\CUnfocus }}
(C ∘ (⬜ ⨞ Inl))[v] ⟶ C[v ⨞ Inl]

{{ [[h']] = [[max(hnames(C) ∪ {h}) + 1]] }} [[:hpMaxCh]]
--------------------------------------- :: FillL_Red {{ com \CFillL\CRed }}
C[-h ⨞ Inl] ⟶ C[h ≔ {h'+1} Inl  +(h'+1)][-(h'+1)]

{{ NotVal [[t]] }} [[:NotValt]]
------------------------------------- :: FillR_Focus {{ com \CFillR\CFocus }}
C[t ⨞ Inr] ⟶ (C ∘ (⬜ ⨞ Inr))[t]

------------------------------------- :: FillR_Unfocus {{ com \CFillR\CUnfocus }}
(C ∘ (⬜ ⨞ Inr))[v] ⟶ C[v ⨞ Inr]

{{ [[h']] = [[max(hnames(C) ∪ {h}) + 1]] }} [[:hpMaxCh]]
--------------------------------------- :: FillR_Red {{ com \CFillR\CRed }}
C[-h ⨞ Inr] ⟶ C[h ≔ {h'+1} Inr  +(h'+1)][-(h'+1)]

{{ NotVal [[t]] }} [[:NotValt]]
------------------------------------- :: FillE_Focus {{ com \CFillE\CFocus }}
C[t ⨞ ᴇ m] ⟶ (C ∘ (⬜ ⨞ ᴇ m))[t]

------------------------------------- :: FillE_Unfocus {{ com \CFillE\CUnfocus }}
(C ∘ (⬜ ⨞ ᴇ m))[v] ⟶ C[v ⨞ ᴇ m]

{{ [[h']] = [[max(hnames(C) ∪ {h}) + 1]] }} [[:hpMaxCh]]
--------------------------------------- :: FillE_Red {{ com \CFillE\CRed }}
C[-h ⨞ ᴇ m] ⟶ C[h ≔ {h'+1} ᴇ m  +(h'+1)][-(h'+1)]

{{ NotVal [[t]] }} [[:NotValt]]
------------------------------------- :: FillP_Focus {{ com \CFillP\CFocus }}
C[t ⨞ (,)] ⟶ (C ∘ (⬜ ⨞ (,)))[t]

------------------------------------- :: FillP_Unfocus {{ com \CFillP\CUnfocus }}
(C ∘ (⬜ ⨞ (,)))[v] ⟶ C[v ⨞ (,)]

{{ [[h']] = [[max(hnames(C) ∪ {h}) + 1]] }} [[:hpMaxCh]]
--------------------------------------- :: FillP_Red {{ com \CFillP\CRed }}
C[-h ⨞ (,)] ⟶ C[h ≔ {h'+1,h'+2} ( +(h'+1), +(h'+2))][( -(h'+1), -(h'+2) )]

{{ NotVal [[t]] }} [[:NotValt]]
------------------------------------- :: FillF_Focus {{ com \CFillF\CFocus }}
C[t ⨞(λ x m ⟼ u)] ⟶ (C ∘ (⬜ ⨞(λ x m ⟼ u)))[t]

------------------------------------- :: FillF_Unfocus {{ com \CFillF\CUnfocus }}
(C ∘ (⬜ ⨞(λ x m ⟼ u)))[v] ⟶ C[v ⨞(λ x m ⟼ u)]

------------------------------------- :: FillF_Red {{ com \CFillF\CRed }}
C[-h ⨞ (λ x m ⟼ u)] ⟶ C[h ≔ {} ᵛλ x m ⟼ u][()]

{{ NotVal [[t]] }} [[:NotValt]]
------------------------------------- :: FillComp_Focus1 {{ com \CFillComp\CFocus\textsubscript{1} }}
C[t ⨞· t'] ⟶ (C ∘ (⬜ ⨞· t'))[t]

------------------------------------- :: FillComp_Unfocus1 {{ com \CFillComp\CUnfocus\textsubscript{1} }}
(C ∘ (⬜ ⨞· t'))[v] ⟶ C[v ⨞· t']

{{ NotVal [[t']] }} [[:NotValtp]]
------------------------------------- :: FillComp_Focus2 {{ com \CFillComp\CFocus\textsubscript{2} }}
C[v ⨞· t'] ⟶ (C ∘ (v ⨞· ⬜))[t']

------------------------------------- :: FillComp_Unfocus2 {{ com \CFillComp\CUnfocus\textsubscript{2} }}
(C ∘ (v ⨞· ⬜))[v'] ⟶ C[v ⨞· v']

{{ [[h'']] = [[max(H ∪ (hnames(C) ∪ {h})) + 1]] }} [[:hpMaxCh]]
---------------------------------------- :: FillComp_Red {{ com \CFillComp\CRed }}
C[-h ⨞· H ⟨ v2 ❟ v1 ⟩] ⟶ C[h ≔ (H⩲h'') v2[H⩲h''] ][v1[H⩲h''] ]

{{ NotVal [[t]] }} [[:NotValt]]
------------------------------------- :: FillLeaf_Focus1 {{ com \CFillLeaf\CFocus\textsubscript{1} }}
C[t ◀ t'] ⟶ (C ∘ (⬜ ◀ t'))[t]

------------------------------------- :: FillLeaf_Unfocus1 {{ com \CFillLeaf\CUnfocus\textsubscript{1} }}
(C ∘ (⬜ ◀ t'))[v] ⟶ C[v ◀ t']

{{ NotVal [[t']] }} [[:NotValtp]]
------------------------------------- :: FillLeaf_Focus2 {{ com \CFillLeaf\CFocus\textsubscript{2} }}
C[v ◀ t'] ⟶ (C ∘ (v ◀ ⬜))[t']

------------------------------------- :: FillLeaf_Unfocus2 {{ com \CFillLeaf\CUnfocus\textsubscript{2} }}
(C ∘ (v ◀ ⬜))[v'] ⟶ C[v ◀ v']

---------------------------------------- :: FillLeaf_Red {{ com \CFillLeaf\CRed }}
C[-h ◀ v] ⟶ C[h ≔ {} v ][ () ]