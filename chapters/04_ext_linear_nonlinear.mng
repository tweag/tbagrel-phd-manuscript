\chapter{Extending DPS support for linear data structures}\label{chap:ext-linear-nonlinear}

One problem with the approach of the previous chapter is that we are not able to build data structures hosting linear data with a destination-based approach.

This is unfortunate, because previous work, such as \cite{minamide_functional_1998}, or \cite{lorenzen_searchtree_2024} would allow for efficient queues to store linear data, without issues with scope escape.

One observation is that scope escape can only happen when we let the user have direct access to a linear destination\footnote{Starting from this point, we will call \emph{linear destination} an object of type $[[⌊ T ⌋ ˥]]$, that is, a destination that can host linear data. Similarly, an \emph{unrestricted destination} will be an object of type $[[⌊ T ⌋ ɷ]]$}. That's one necessary condition for scope escape to happen.

As we've seen in previous chapter, it's enough to forbid linear destinations to prevent any potential scope escape, and recover a safe system without the need for ages. But we could be more subtle, and allow linear destinations on the right-hand side of an ampar, while preventing the user from ever accessing them.

If we do so, how could the user use these destinations to build a structure? Well, we need new operators, that operate on a closed ampar, instead of a destination. In fact, that is exactly what happens in \cite{minamide_functional_1998}, or \cite{lorenzen_searchtree_2024}: they only allow incomplete structures with one hole, and extending the structure happens by manipulating the whole structure itself, not destinations (as they don't exist in these works).