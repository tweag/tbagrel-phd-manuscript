\chapter*{Related Work}\label{sec:related-work}\addcontentsline{toc}{chapter}{Related Work}\markboth{Related Work}{Related Work}

This chapter situates \emph{functional destination passing} within the broader landscape of related approaches to safe and controlled memory updates in functional programming. A particularly close and relevant theme is that of \emph{functional data structures with holes}, since \emph{destination passing} provides a flexible and principled way to manipulate such structures. However, despite their conceptual overlap, \emph{functional destination passing} and \emph{functional data structures with holes} remain slightly distinct in their nature.

\emph{Functional destination passing} encompasses techniques where updates to write-once memory cells are exposed through a safe or at least controlled interface. In fact, in previous work, this interface has not often been directly exposed to programmers; instead, in these cases, \emph{destination passing} is employed internally by compilers to optimize functional programs. This includes performance improvements for functional linked data structures (\cref{ssec:tmc}) and functional arrays (\cref{ssec:shaikhha-dps}), which are written in the usual purely functional style but benefit from behind-the-scenes mutation to reduce allocations and improve performance, with no explicit user control.

In contrast, \emph{functional structures with holes} focus on allowing incomplete data structures, a.k.a. structures with holes, to exist as first-class values ---that the user can manipulate explicitely--- in a purely functional setting, and be completed or refined later. Completing these structures necessarily involves some form of memory update, but many systems (\cref{ssec:minamide}) do not include an explicit notion of first-class write pointer (\emph{destination}) to do the mutation. In contrast, this thesis explores how both \emph{functional structures with holes} and \emph{functional destination passing} can be combined effectively, leveraging the strengths of each to achieve more expressive manipulation patterns of functional data, always in a safe manner.

Both of these notions inherently involve mutation and uninitialized data and therefore require robust static guarantees to ensure safety. \emph{Linear} and \emph{uniqueness type systems} are thus commonly employed to enforce strict control over destinations or structures with holes, preventing unsafe updates and premature reads on incomplete structures. However, as demonstrated in this work, \emph{linearity} alone is insufficient to capture the full range of safety and expressiveness we needed. Modal type systems (\cref{ssec:oxidizing}) are in that case particularly helpful to let us design a coherent and ergonomic type system, easily, for our specific needs. Complementary approaches such as \emph{permission-based type systems} (\cref{ssec:mezzo}) and resource lifetime management techniques \emph{à la} Rust also play an important role to enforce fine-grained control over resources, which may be leveraged to control our destinations or structures with holes.

\section{Destination-passing style for efficient memory management}\label{ssec:shaikhha-dps}

~\citet{shaikhha_destination-passing_2017} present a destination-based intermediate language for a functional array programming language, with destination-specific optimizations, that boasts near-C performance.

This is the most comprehensive evidence to date of the benefits of destination-passing style for performance in functional languages, although their work is on array programming, while this article focuses on linked data structures. They can therefore benefit from optimizations that are perhaps less valuable for us, such as allocating one contiguous memory chunk for several arrays.

The main difference between their work and ours is that their language is solely an intermediate language: it would be unsound to program in it manually. We, on the other hand, are proposing a type system to make it sound for the programmer to program directly with destinations.

We see these two aspects as complementing each other: good compiler optimizations are important to alleviate the burden from the programmer and allow high-level abstraction; having the possibility to use destinations in code affords the programmer more control, should they need it.

\section{Programming with Permissions in Mezzo}\label{ssec:mezzo}

~\citet{protzenko_mezzo_2013} introduced the Mezzo programming language, in which mutable data structures can be freezed into immutable ones after having been completed. This principle is used to some extend in their list standard library module, to mimic a form of DPS programming. An earlier appearance of DPS programming as a mean to achieve better performance in a mutable language can also be seen in~\cite{larus_restructuring_1989}.

\section{Tail modulo constructor}\label{ssec:tmc}

Another example of destinations in a compiler's optimizer is~\cite{bour_tmc_2021}. It's meant to address the perennial problem that the map function on linked lists isn't tail-recursive, hence consumes stack space. The observation is that there's a systematic transformation of functions where the only recursive call is under a constructor to a destination-passing tail-recursive implementation.

Here again, there's no destination in user land, only in the intermediate representation. However, there is a programmatic interface: the programmer annotates a function like
\begin{verbatim}
let[@tail_mod_cons] rec map =
\end{verbatim}
to ask the compiler to perform the translation. The compiler will then throw an error if it can't. This way, contrary to the optimizations in~\cite{shaikhha_destination-passing_2017}, it is entirely predictable.

This has been available in OCaml since version 4.14. This is the one example we know of of destinations built in a production-grade compiler. Our \destcalculus{} makes it possible to express the result tail-modulo-constructor in a typed language. It can be used to write programs directly in that style,  or it could serve as a typed target language for an automatic transformation. On the flip-side, tail modulo constructor is too weak to handle our difference lists or breadth-first traversal examples.

\section{A functional representation of data structures with a hole}\label{ssec:minamide}\label{ssec:ampar-motivation}

The idea of using linear types as a foundation of a functional calculus in which incomplete data structures can exist and be composed as first class values dates back to~\cite{minamide_functional_1998}. Our system is strongly inspired by theirs. In~\cite{minamide_functional_1998}, a first-class structure with a hole is called a \emph{hole abstraction}. Hole abstractions are represented by a special kind of linear functions with bespoke restrictions. As with any function, we can't pattern-match on their output (or pass it to another function) until they have been applied; but they also have the restriction that we cannot pattern-match on their argument ---the \emph{hole variable}--- as that one can only be used directly as argument of data constructors, or of other hole abstractions. The type of hole abstractions, $\ottstype{([[T]], [[S]]) hfun}$ is thus a weak form of linear function type $\ottstype{[[T]] \multimap [[S]]}$.

In~\cite{minamide_functional_1998}, it's only ever possible to represent structures with a single hole. But this is a rather superficial restriction. The author doesn't comment on this, but we believe that this restriction only exists for convenience of the exposition: the language is lowered to a language without function abstraction and where composition is performed by combinators. While it's easy to write a combinator for single-argument-function composition, it's cumbersome to write combinators for functions with multiple arguments. But having multiple-hole data structures wouldn't have changed their system in any profound way.

The more important difference is that while their system is based on a type of linear functions, ours is based on the linear logic's ``par'' type. In classical linear logic, linear implication $\ottstype{[[T]] \multimap [[S]]}$ is reinterpreted as $\ottstype{[[S]]\mathop{\parr}[[T]]^{\perp}}$. We, likewise, reinterpret $\ottstype{([[T]], [[S]]) hfun}$ as $[[S ⧔ ⌊ T ⌋ ¹ν]]$ (a sort of weak ``par'').

A key consequence is that destinations ---as first-class representations of holes--- appear naturally in \destcalculus{}, while~\cite{minamide_functional_1998} doesn't have them. This means that using~\cite{minamide_functional_1998}, or the more recent but similarly expressive system from~\cite{lorenzen_searchtree_2024}, one can implement the examples with difference lists and queues from~\cref{ssec:efficient-queue}, but couldn't do our breadth-first traversal example from~\cref{sec:bft}, since it requires to be able to store destinations in a structure.

Nevertheless, we still retain the main restrictions that~\citet{minamide_functional_1998} places on hole abstractions. For instance, we can't pattern-match on $[[S]]$ in (unapplied) $\ottstype{([[T]], [[S]]) hfun}$; so in \destcalculus{}, we can't act directly on the left-hand side $[[S]]$ of $[[S ⧔ T]]$, only on the right-hand side $[[T]]$. Similarly, hole variables can only be used as arguments of constructors or hole abstractions; it's reflected in \destcalculus{} by the fact that the only way to act on destinations is via fill operations, with either hollow constructors or another ampar.

The ability to manipulate destinations, and in particular, store them, does come at a cost though: the system needs this additional notion of ages to ensure that destinations are used soundly. On the other hand, our system is strictly more general, in~\citet{minamide_functional_1998}'s system can be embedded in \destcalculus{}, and if one stays in this fragment, we're never confronted with ages.

\section{Semi-axiomatic sequent calculus}\label{ssec:sax}

In~\cite{deyoung_sax_2020} constructors return to a destination rather than allocating memory. It is very unlike the other systems described in this section in that it's completely founded in the Curry-Howard isomorphism. Specifically it gives an interpretation of a sequent calculus which mixes Gentzen-style deduction rules and Hilbert-style axioms. As a consequence, the \emph{par} connective is completely symmetric, and, unlike our $[[⌊ T ⌋ ¹ν]]$ type, their dualization connective is involutive.

The cost of this elegance is that computations may try to pattern-match on a hole, in which case they must wait for the hole to be filled. So the semantics of holes is that of a future or a promise. In turns this requires the semantics of their calculus to be fully concurrent, which is a very different point in the design space.

\section{Rust lifetimes}\label{ssec:rust-lifetimes}

Rust uses a system of lifetimes (see e.g.~\cite{pearce_lifetime_2021}) to ensure that borrows don't live longer than what they reference. It plays a similar role as our system of ages.

Rust lifetimes are symbolic. Borrows and moves generate constraints (inequalities of the form $\alpha\leqslant\beta$) on the symbolic lifetimes. For instance, that a the lifetime of a reference is larger than the lifetime of any structure the reference is stored in. Without such constraints, Rust would have similar problems to those of \cref{sec:scope-escape-dests}. The borrow checker then checks that the constraints are solvable. This contrasts with \destcalculus{} where ages are set explicitly, with no analysis needed.

Another difference between the two systems is that \destcalculus{}'s ages (and modes in general) are relative. An explicit modality $\ottstype{!}_{[[¹↑^ka]]}$ must be used when a part has an age different than its parent, and means that the part is $[[ka]]$ scope older than the parent. On the other hand, Rust's lifetimes are absolute, the lifetime of a part is tracked independently of the lifetime of its parent.

\section{Oxidizing OCaml}\label{ssec:oxidizing}

~\citet{lorenzen_oxidizing_2024} present an extension of the OCaml type system to support modes. Their modes are split along three different ``axes'', among which affinity and locality are comparable to our multiplicities and ages.
Like our multiplicities, there are two modes for affinity \verb|once| and \verb|many|, though in~\cite{lorenzen_oxidizing_2024}, \verb|once| supports weakening, whereas \destcalculus{}'s $[[¹]]$ multiplicity is properly linear (proper linearity matters for destination lest we end up reading uninitialized memory).

Locality tracks scope. There are two locality modes, \verb|local| (doesn't escape the current scope) and \verb|global| (can escape the current scope). The authors present their locality mode as a drastic simplification of Rust's lifetime system, which nevertheless fits their need.

However, such a simplified system would be a bit too weak to track the scope of destinations. The observation is that if destinations from two nested scopes are given the same mode, then we can't safely do anything with them, as it would be enough to reproduce the counterexamples of \cref{sec:scope-escape-dests}. So in order to type the breadth-first traversal example of \cref{sec:bft}, where destinations are stored in a structure, we need at least $[[ν]]$ (for the current scope), $[[↑]]$ (for the previous scope exactly), plus at least one extra mode for the rest of the scopes (destinations of this generic age cannot be safely used). It turns out that such systems with finitely many ages are incredibly easy to get wrong, and it was in fact much simpler to design a system with infinitely many ages.

\cleardoublepage\phantomsection\chapter*{Conclusion and future work}\label{chap:global-conclusion}\addcontentsline{toc}{chapter}{Conclusion and future work}\markboth{Conclusion and future work}{Conclusion and future work}

Destination passing is not a novel concept in programming language design. It was used early on ---when manual memory management was essential even for simple programs--- as a means to avoid unnecessary memory allocations for intermediate results.

It was then partially abandoned during the rise of object-oriented programming, which brought widespread adoption of automatic memory management. Today, however, we reexamine destination passing in the context of functional programming languages, with slightly different expectations.

For instance, we do not advocate a return to full manual memory management, as it was the case when destination passing was used in the past. Indeed, the ability to ignore memory concerns is, in most cases, a key benefit of modern languages. Rather, functional destination passing can pursue two goals: to allow compilers to optimize code by transforming it into destination-passing style automatically at compile time~\cite{bour_tmc_2021,leijen_trmc_2023}; or, as demonstrated in this thesis, to provide programmers with the ability to manually opt in to destination passing for specific sections of functional code where improved performance or expressivity is needed.

Because destination passing is inherently imperative, it must be carefully adapted for use in functional programming languages, particularly when aiming to preserve the principles of immutability and purity that are central in such settings.

To address this, we first turned to linear type systems (\cref{chap:preli}). From their foundations in (linear) logic to their modern formulations and implementations, we examined how linear types can be leveraged to ensure that a resource will only be used exactly once.

With linear types in place, we set out to formalize destination passing within a functional model, called \destcalculus{} (\cref{chap:dest-calculus}). The core idea is that a destination ---a pointer to a yet-unused memory cell--- must be used exactly once. Once used, the corresponding memory cell becomes readable, and the value contained within is now guaranteed not to change (to abide by immutability). Consequently, the main invariant is that a destination should always point to an existing hole (a yet unused memory cell), and that every remaining hole in a structure must be referenced by exactly one destination that hasn't been used yet. Destinations acts as both witnesses and a way of filling those holes, and when no destination remains, the structure should be fully initialized and contain no remaining holes.

Early on this journey however, we encountered the critical issue of \emph{scope escape}, which required over a year of research to resolve. Scope escape (\cref{sec:scope-escape-dests}) arises when a destination is used to store another destination. Even under a strict linear discipline, the type system cannot always distinguish whether a destination has been consumed, meaning the associated memory cell contains a valid value; or if the destination has been merely stored for later use, in which case reading the corresponding memory cell prematurely may cause a segmentation fault or a similar memory error.

To address this, we had to strengthen the type system of \destcalculus{} by introducing a \emph{system of ages} alongside linearity to ensure memory safety. Fortunately, in \cref{sec:modal-lin}, we had already developed a modal presentation of linear type systems, structured around an underlying semiring algebra, that is well suited for easy extension. In particular, this allowed us to integrate both the linear and age systems into a same semiring, hence the resulting type system for \destcalculus{} (\cref{sec:syntax-type-system}) remains close in spirit to earlier work, while addressing the additional safety concerns posed by scope escape.

In \destcalculus{}, the main additions compared to a standard $\lambda$-calculus are ampars--- structures that may be partially constructed and contain holes ---and destinations, which are linearly tracked pointers to these holes. While holes themselves are not first-class citizens of the language, unlike destinations, they play a crucial role in both typing and semantics. In particular, we introduced a new typing discipline for structures with holes (\cref{ssec:runtime-values}). Both the holes within an ampar and its associated destinations are represented as named bindings in the typing context. A hole and a destination with the same name cancel each other out. As a result, a fully constructed ampar has an empty typing context, while a non-empty context indicates either an unfilled hole or a destination referencing an already-filled one. This is how we ensure, within the type system, that no destination can be reused or forgotten.

The operational semantics of \destcalculus{} (\cref{ssec:sem}) relies on a rather abstract memory model, in which program state is purely defined by the evaluation context and the term under focus. Memory writes triggered by the action of filling a destination are modeled as global substitutions on named holes within the evaluation context. This semantic model is simpler than conventional store-based semantics, as typing rules for evaluation contexts are direct extensions of those for terms, whereas store semantics typically require more complex typing machinery. Despite its simplicity, this approach faithfully captures the behavior of destination-induced memory mutations.

A key contribution of this work is that we were able to formalize \destcalculus{} in the Coq proof assistant (\cref{sec:formal-proof}) and then produce a mechanically verified proof of the usual safety theorems for \destcalculus{}, namely \emph{progress} and \emph{preservation}.

With \destcalculus{}, we thus obtain a formal functional language with destination passing embedded so deeply in its core that we have maximal flexibility in using destinations. For example, standard data constructors are not required as primitive elements of the language, as they can be reconstructed using destination-filling operations. This expressive power, however, comes at the cost of requiring a custom type system to ensure safety.

Thus, the second, and equally important part of the PhD ---especially since the PhD is funded by a company with industrial functional programming in its DNA--- consisted in porting the core ideas of \destcalculus{} and destination passing into the setting of a practical, industrial functional programming language. Haskell was a natural choice for this, due to its existing support for linear types. Even more so since my industrial supervisor, Arnaud \textsc{Spiwack}, is one of the authors of Linear Haskell~\cite{bernardy_linear_2018,spiwack_linearly_2022} and a strong proponent of improving linear type support and ergonomics within GHC. The main challenge in implementing destination passing in Haskell is that we cannot rely on the custom type system of \destcalculus{}, based on both linearity and ages, to guarantee safety. Instead, we must rely on linearity alone.

Initial experiments with destination-passing style programming in Haskell actually predate the theoretical development of \destcalculus{}. At that time, scope escape was still an open problem, with no solution yet in sight (so the age system had not been introduced either). As a result, in the meantime, we began developing a prototype API for destination passing in Haskell (\cref{chap:dps-haskell}), where scope escape is ruled out by design: we chose to forbid storing destinations inside other destinations as a safety measure. A major concern for the implementation was to avoid mutations (for destination-filling operations) that could disrupt Haskell's memory model. To address this, we used \emph{compact regions} ---memory areas outside the reach of the garbage collector--- in which unfinished data structures could live without troubles. This practical work ultimately spanned from designing a consistent and ergonomic high-level API down to implementing low-level compiler primitives representing destination-filling operations. The resulting benchmarks (\cref{sec:benchmark}) are encouraging: destination passing proves to be a valuable tool in specific scenarios, improving the performance of some functional programs and enabling more direct, imperative-style code when desired, without compromising memory safety. However, further work is needed to improve both the ergonomics and performance of the DPS implementation if we want it to gain broader adoption in the functional programming community.

One inconvenience with DPS Haskell, in the form presented in \cref{chap:dps-haskell}, is the restriction we imposed initially ---that destinations cannot store any linear resource to avoid scope escape. It impedes the flexibility and expressivity gains that we claimed true for \destcalculus. In particular, one of our motivating examples, breadth-first traversal of a tree, cannot be implemented using our destination-passing toolkit alone in this first version of DPS Haskell: at some point, we have no choice than to fall back to standard Haskell data structures rather than relying exclusively on the destination-based structures.

In \cref{chap:ext-linear-nonlinear}, we attempt to recover much of the lost expressivity. However, relaxing the safety constraint that destinations cannot be filled with linear resources requires great care to avoid scope escape and other issues that arise in the absence of ages (and age control). Still, by the end of this effort, we obtain a way to write our favorite breadth-first tree traversal using only destination-based data structures, in Haskell, through an API we believe to be safe.

Further work would consist in verifying the safety of both the original and extended DPS Haskell APIs developed in \cref{chap:dps-haskell,chap:ext-linear-nonlinear}. We have argued that \destcalculus{} provides a framework to reason about the safety and correctness of destination-passing systems ---now would be the time to put that claim to the test.

A second direction for improvement is to implement DPS support for Haskell within the garbage-collected heap (that is, the standard memory region where most Haskell data resides) rather than relying on the protective shell of compact regions. The challenge here lies in the tight coupling between memory safety and the garbage collector internals, particularly those concerning when and where immutability assumptions are used.

I hope that, by now, the reader has got a good and enjoyable overview of this exotic journey: an exploration of how imperative techniques and functional principles can be reconciled, from high-level and formal considerations to low-level implementation and associated performance concerns. At last, we can say with confidence: safe, functional destination passing is not an oxymoron ---it exists!
