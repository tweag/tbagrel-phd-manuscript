\chapter{Formal functional language with first-class destinations: $\lambda$-calculus}

\section{Introduction}\label{sec:intro}

In destination-passing style, a function doesn't return a value: it takes as an argument a location where the value ought to be returned. In our notation, a function of type $[[T ¹ν → U]]$ would, in destination-passing style, have type $[[T ¹ν → ⌊ U ⌋ ¹ν ¹ν → ①]]$ instead. This style is common in systems programming, where destinations $[[⌊ U ⌋ ¹ν]]$ are more commonly known as “out parameters”. In C, $[[⌊ U ⌋ ¹ν]]$ would typically be a pointer of type $\ottstype{U\,*}$.

The reason why system programs rely on destinations so much is that using destinations can save calls to the memory allocator. If a function returns a $[[U]]$, it has to allocate the space for a $[[U]]$. But with destinations, the caller is responsible for finding space for a $[[U]]$. The caller may simply ask for the space to the memory allocator, in which case we've saved nothing; but it can also reuse the space of an existing $[[U]]$ which it doesn't need anymore, or it could use a space in an array, or it could allocate the space in a region of memory that the memory allocator doesn't have access to, like a memory-mapped file.

This does all sound quite imperative, but we argue that the same considerations are relevant for functional programming, albeit to a lesser extent. In fact~\cite{shaikhha_destination-passing_2017} has demonstrated that using destination passing in the intermediate language of a functional array-programming language allowed for some significant optimizations. Where destinations truly shine in functional programming, however, is that they increase the expressiveness of the language; destinations as first-class values allow for meaningfully new programs to be written. This point was first explored in~\cite{bagrel_destination-passing_2024}.

The trouble, of course, is that destinations are imperative; we wouldn't want to sacrifice the immutability of our linked data structure (we'll usually just say “structure”) for the sake of the more situational destinations. The goal is to extend functional programming just enough to be able to build immutable structures by destination passing without endangering purity and memory safety. This is precisely what~\cite{bagrel_destination-passing_2024} does, using a linear type system to restrict mutation. Destinations become write-once references into an immutable structure with holes. In that we follow their leads, but we refine the type system further to allow for even more programs, as we discuss in \cref{sec:scope-escape-dests}.

There are two key elements to the expressiveness of destination passing:
\begin{itemize}
\item structures can be built in any order. Not only from the leaves to the root, like in ordinary functional programming, but also from the root to the leaves, or any combination thereof. This can be done in ordinary functional program using function composition in a form of continuation-passing; and destinations act as an optimization. This line of work was pioneered by~\cite{minamide_functional_1998}. While this only increases expressiveness when combined with the next point, the optimization is significant enough that destination passing has been implemented in the Ocaml optimizer to support tail modulo constructor~\cite{bour_tmc_2021};
\item when destinations are first-class values, they can be passed and stored like ordinary values. This is the innovation of~\cite{bagrel_destination-passing_2024} upon which we build. The consequence is that not only the order in which a structure is built is arbitrary, this order can be determined dynamically during the runtime of the program.
\end{itemize}

To support this programming style, we introduce \destcalculus{}. We intend \destcalculus{} to serve as a core calculus to reason about safe destinations. Indeed \destcalculus{} subsumes all the systems that we've discussed in this section: they can all be encoded in \destcalculus{} via simple macro expansion. As such we expect that potential extensions to these systems can be justified by giving their semantics as an expansion in \destcalculus{}.

Our contributions are as follows:
\begin{itemize}
\item \destcalculus{}, a linear and modal simply typed $\lambda$-calculus with destinations (\cref{sec:syntax-type-system,sec:ectxs-sem}). \destcalculus{} is expressive enough so that previous calculi for destinations can be encoded in \destcalculus{} (see~\cref{sec:related-work});
\item a demonstration that \destcalculus{} is more expressive than previous calculi with destinations (\cref{sec:scope-escape-dests,sec:bft}), namely that destinations can be stored in structures with holes. We show how we can improve, in particular, on the breadth-first traversal example of~\cite{bagrel_destination-passing_2024};
\item an implementation strategy for \destcalculus{} which uses mutation without compromising the purity of \destcalculus{} (\cref{sec:implementation});
\item formally-verified proofs, with the Coq proof assistant, of the main safety lemmas (\cref{sec:formal-proof}).
\end{itemize}

\section{Working with destinations}\label{sec:working-with-dests}

Let's introduce and get familiar with \destcalculus{}, our simply typed $\lambda$-calculus with destination. The syntax is standard, except that we use linear logic's $[[T⨁U]]$ and $[[T⨂U]]$ for sums and products, since \destcalculus{} is linearly typed, even though it isn't a focus in this section.

\subsection{Building up a vocabulary}\label{ssec:build-up-vocab}

\activespaces

In its simplest form, destination passing, much like continuation passing, is using a location, received as an argument, to return a value. Instead of a function with signature $[[T ¹ν → U]]$, in \destcalculus{} you would have $[[T ¹ν → ⌊ U ⌋ ¹ν ¹ν → ①]]$, where $[[⌊ U ⌋ ¹ν]]$ is read “destination for type $[[U]]$”. For instance, here is a destination-passing version of the identity function:

\codehere{\newoperator
{\ottkw{dId}}{[[T ¹ν → ⌊ T ⌋ ¹ν ¹ν → ①]]}
{\ottkw{dId}~[[x]]~[[d]]}{[[d ◀ x]]}}

We think of a destination as a reference to an uninitialized memory location, and $[[d ◀ x]]$ (read “fill $[[d]]$ with $[[x]]$”) as writing $[[x]]$ to the memory location.

The form $[[d ◀ x]]$ is the simplest way to use a destination. But we don't have to fill a destination with a complete value in a single step. Destinations can be filled piecemeal.

\codehere{\newoperator
{\ottkw{fillWithInlCtor}}{[[⌊ T ⨁ U ⌋ ¹ν ¹ν → ⌊ T ⌋ ¹ν]]}
{\ottkw{fillWithInlCtor}~[[d]]}{[[d ⨞ Inl]]}}

In this example, we're filling a destination for type $[[T ⨁ U]]$ by setting the outermost constructor to left variant $[[Inl]]$. We think of $[[d ⨞ Inl]]$ (read “fill $[[d]]$ with $[[Inl]]$”) as allocating memory to store a block of the form $[[Inl]]~\holesq$, write the address of that block to the location that $[[d]]$ points to, and return a new destination of type $[[⌊ T ⌋ ¹ν]]$ pointing to the uninitialized argument of $[[Inl]]$. Uninitialized memory, when part of a structure or value, like $\holesq$ in $[[Inl]]~\holesq$, is called a \emph{hole}.

Notice that with $\ottkw{fillWithInlCtor}$ we are constructing the structure from the outermost constructor inward: we've written a value of the form $[[Inl]]~\holesq$ into a hole, but we have yet to describe what goes in the new hole $\holesq$. Such data constructors with uninitialized arguments are called \emph{hollow constructors}. This is opposite to how functional programming usually works, where values are built from the innermost constructors outward: first we make a value $[[v]]$ and only then can we use $[[Inl]]$ to make an $[[Inl v]]$. This will turn out to be a key ingredient in the expressiveness of destination passing.

Yet, everything we've shown so far could have been done with continuations. So it's worth asking: how are destination different from continuations? Part of the answer lies in our intention to effectively implement destinations as pointers to uninitialized memory (see~\cref{sec:implementation}). But where destinations really differ from continuations is when one has several destinations at hand. Then they have to fill \emph{all} the destinations; whereas when one has multiple continuations, they can only return to one of them. Multiple destination arises when a destination of pair gets filled with a hollow pair constructor:

\codehere{\newoperator
{\ottkw{fillWithPairCtor}}{[[⌊ T ⨂ U ⌋ ¹ν ¹ν → ⌊ T ⌋ ¹ν ⨂ ⌊ U ⌋ ¹ν]]}
{\ottkw{fillWithPairCtor}~[[d]]}{[[d ⨞ (,)]]}}

After using $\ottkw{fillWithPairCtor}$, the user must fill both the first field \emph{and} the second field, using the destinations of type $[[⌊ T ⌋ ¹ν]]$ and $[[⌊ U ⌋ ¹ν]]$ respectively. In plain English, it sounds obvious, but the key remark is that $\ottkw{fillWithPairCtor}$ doesn't exist on continuations.

\paragraph{Structures with holes}
It is crucial to note that while a destination is used to build a structure, the type of the structure being built might be different from the type of the destination that is being filled. A destination of type $[[⌊ T ⌋ ¹ν]]$ is a pointer to a yet-undefined part of a bigger structure. We say that such a structure has a hole of type $[[T]]$; but the type of the structure itself isn't specified (and never appears in the signature of destination-filling functions). For instance, using $\ottkw{fillWithPairCtor}$ only indicates that the structure being operated on has a hole of type $[[T ⨂ U]]$ that is being written to.

Thus, we still need a type to tie the structure under construction --- left implicit by destination-filling primitives --- with the destinations representing its holes. To represent this, \destcalculus{} introduces a type $[[S ⧔ ⌊ T ⌋ ¹ν]]$ for a structure of type $[[S]]$ missing a value of type $[[T]]$ to be complete. There can be several holes in $[[S]]$, resulting in several destinations on the right hand side: for example, $[[S ⧔ (⌊ T ⌋ ¹ν ⨂ ⌊ U ⌋ ¹ν)]]$ represents a $[[S]]$ that misses both a $[[T]]$ and a $[[U]]$ to be complete.

The general form $[[S ⧔ T ]]$ is read “$[[S]]$ ampar $[[T]]$”. The name “ampar” stands for “asymmetric memory par”; we will explain why it is asymmetric in~\cref{ssec:ampar-motivation}. For now, it's sufficient to observe that $[[S ⧔ ⌊ T ⌋ ¹ν]]$ is akin to a “par” type $\ottstype{S \parr T^\perp}$ in linear logic; you can think of $[[S ⧔ ⌊ T ⌋ ¹ν]]$ as a (linear) function from $[[T]]$ to $[[S]]$. That structures with holes could be seen a linear functions was first observed in~\cite{minamide_functional_1998}, we elaborate on the value of having a par type rather than a function type in~\cref{sec:bft}. A similar connective is called $\ottstype{Incomplete}$ in~\cite{bagrel_destination-passing_2024}.

Destinations always exist within the context of a structure with holes. A destination is both a witness of a hole present in the structure, and a handle to write to it. Crucially, destinations are otherwise ordinary values. To access the destinations of an ampar, \destcalculus{} provides a $\ottkw{map}$ construction, which lets us apply a function to the right-hand side of the ampar. It is in the body of the $\ottkw{map}$ construction that functions operating on destinations can be called:

\codehere{
  \newoperator
  {\ottkw{fillWithInlCtor'}}{[[S ⧔ ⌊ T ⨁ U ⌋ ¹ν ¹ν → S ⧔ ⌊ T ⌋ ¹ν]]}
  {\ottkw{fillWithInlCtor'}~[[x]]}{[[x ►map d ⟼ fillWithInlCtor d]]}
  \newoperator
  {\ottkw{fillWithPairCtor'}}{[[S ⧔ ⌊ T ⨂ U ⌋ ¹ν ¹ν → S ⧔ (⌊ T ⌋ ¹ν ⨂ ⌊ U ⌋ ¹ν)]]}
  {\ottkw{fillWithPairCtor'}~[[x]]}{[[x ►map d ⟼ fillWithPairCtor d]]}
}

To tie this up, we need a way to introduce and to eliminate structures with holes. Structures with holes are introduced with $[[alloc]]$ which creates a value of type $[[T ⧔ ⌊ T ⌋ ¹ν]]$. $[[alloc]]$ is a bit like the identity function: it is a hole (of type $[[T]]$) that needs a value of type $[[T]]$ to be a complete value of type $[[T]]$. Memory-wise, it is an uninitialized block large enough to host a value of type $[[T]]$, and a destination pointing to it. Conversely, structures with holes are eliminated with\footnote{As the name suggest, there is a more general elimination $\ottkw{from}_{\ottkw{\ltimes} }$. It will be discussed in~\cref{sec:syntax-type-system}.} $\ottkw{from}_{\ottkw{\ltimes} }' : [[S⧔① ¹ν → S]]$: if all the destinations have been consumed and only unit remains on the right side, then $[[S]]$ no longer has holes and thus is just a normal, complete structure.

Equipped with these, we can, for instance, derive traditional constructors from piecemeal filling. In fact, \destcalculus{} doesn't have primitive constructor forms, constructors in \destcalculus{} are syntactic sugar. We show here the definition of $[[Inl]]$ and $[[(,)]]$, but the other constructors are derived similarly.

\codehere{\newoperator
{[[Inl]]}{[[T ¹ν → T ⨁ U]]}
{[[ˢInl x]]}{[[from⧔' (alloc ►map d ⟼ d ⨞ Inl ◀ x)]]}}

\codehere{\newoperator
{[[(,)]]}{[[T ¹ν → U ¹ν → T ⨂ U]]}
{[[ˢ(x, y)]]}{[[from⧔' (alloc ►map d ⟼ (d ⨞ (,)) ►case ¹ν  (d1, d2) ⟼ d1 ◀ x; d2 ◀ y)]]}}


\paragraph{Memory safety and purity}
At this point, the reader may be forgiven for feeling distressed at all the talk of mutations and uninitialized memory. How is it consistent with our claim to be building a pure and memory-safe language? The answer is that it wouldn't be if we'd allow unrestricted use of destination. Instead \destcalculus{} uses a linear type system to ensure that:

\begin{itemize}
\item destination are written at least once, preventing examples like:

  \codehere{\newoperator
  {\ottkw{forget}}{[[T]]}
  {\ottkw{forget}}{[[from⧔' (alloc ►map d ⟼ ())]]}}

  where reading the result of $\ottkw{forget}$ would result in reading the location pointed to by a destination that we never used, in other words, reading uninitialized memory;
\item destination are written at most once, preventing examples like:

  \codehere{\newoperator
  {\ottkw{ambiguous1}}{[[Bool]]}
  {\ottkw{ambiguous1}}{[[from⧔' (alloc ►map d ⟼ d ◀ true; d ◀ false)]]}
  \newoperator
  {\ottkw{ambiguous2}}{[[Bool]]}
  {\ottkw{ambiguous2}}{[[from⧔' (alloc ►map d ⟼ let x ≔ (d ◀ false) in d ◀ true; x)]]}}

  where $\ottkw{ambiguous1}$ returns $[[false]]$ and $\ottkw{ambiguous2}$ returns $[[true]]$ due to evaluation order, even though let-expansion should be valid in a pure language.
\end{itemize}

\subsection{Functional queues, with destinations}\label{ssec:efficient-queue}

Now that we have an intuition of how destinations work, let's see how they can be used to build usual data structures. For that section, we suppose that \destcalculus{} is equipped with equirecursive types and a fixed-point operator, that isn't part of our formally proven fragment.

\paragraph{Linked lists}

We define lists as the fixpoint of the functor $[[X]] \mapsto [[① ⨁ (T ⨂ X)]]$. For convenience, we also define filling operators $\triangleleft\ottsctor{[]}$ and $\triangleleft\ottsctor{(::)}$:

\sidebysidecodehere{b}{0.50}{
\newtype[~\mathsfbf{rec}]{[[List T]]}{[[① ⨁ (T ⨂ (List T))]]}
\newoperator
  {\triangleleft\ottsctor{[]}}{[[⌊ List T ⌋ ¹ν ¹ν → ①]]}
  {[[d ⨞ [] ]]}{[[d ⨞Inl ⨞()]]}
}{
\newoperator
  {\triangleleft\ottsctor{(::)}}{[[⌊ List T ⌋ ¹ν ¹ν → ⌊ T⌋ ¹ν ⨂ ⌊ List T ⌋ ¹ν]]}
  {[[d ⨞ (::)]]}{[[d ⨞Inr ⨞(,)]]}
}

Just like we did in~\cref{ssec:build-up-vocab} we can recover traditional constructors from filling operators:

\codehere{\newoperator
{\ottsctor{(::)}}{[[T ⨂ (List T) ¹ν → List T]]}
{[[x ˢ:: xs]]}{[[from⧔' (alloc ►map d ⟼ (d ⨞ (::)) ►case ¹ν (dx, dxs) ⟼ dx ◀ x ; dxs ◀ xs)]]}}

\paragraph{Difference lists}
\newcommand{\lstcat}{\mathop{+\!+}}
Just like in any language, iterated concatenation of lists
$(([[xs1]] \lstcat [[xs2]])\lstcat \ldots)\lstcat [[xs]]_n$
is quadratic in \destcalculus{}. The usual solution to this is difference lists. The name difference lists covers many related implementation, but in pure functional languages, a difference list is usually represented as a function~\cite{hughes_dlist_1986}. A singleton difference list is $\lamnt{[[ys]]}{[[¹ν]]}{[[x ˢ:: ys]]}$, and concatenation of difference lists is function composition. Difference lists are turned into a list by applying it to the empty list. The consequence is that no matter how many compositions we have, each cons cell will be allocated a single time, making the iterated concatenation linear indeed.

However, each concatenation allocates a closure. If we're building a difference list from singletons and composition, there's roughly one composition per cons cell, so iterated composition effectively performs two traversals of the list. We can do better!

In \destcalculus{} we can represent a difference list as a list with a hole. A singleton difference list is $[[x]] \ottsctor{::} \holesq$. Concatenation is filling the hole with another difference list, using operator $\mathop{\triangleleft\mycirc}$. The details are on the left of~\cref{fig:impl-dlist-queue}. This encoding makes no superfluous traversal; in fact, concatenation is an $O(1)$ in-place update.

\sidebysidecodefig{\caption{Difference list and queue implementation in equirecursive \destcalculus{}}\label{fig:impl-dlist-queue}}{t}{0.51}{
\newtype{[[DList T]]}{[[(List T) ⧔ ⌊ List T ⌋ ¹ν]]}
\newoperatorb
  {\ottkw{append}}{[[DList T ¹ν → T ¹ν → DList T]]}
  {[[ys append y]]}{\!\!\!\begin{array}[t]{l}[[
ys ►map dys ⟼ (dys ⨞ (::)) ►case ¹ν⮒
‥‥(dy, dys') ⟼ dy ◀ y ; dys'
]]\end{array}}
\newoperator
  {\ottkw{concat}}{[[DList T ¹ν → DList T ¹ν → DList T]]}
  {[[ys concat ys']]}{[[ys ►map d ⟼ d ⨞· ys']]}
\newoperator
  {\ottkw{to}_{\ottkw{List} }}{[[DList T ¹ν → List T]]}
  {[[toList ys]]}{[[from⧔' (ys ►map d ⟼ d ⨞ [])]]}
}{
\newtype{[[Queue T]]}{[[(List T) ⨂ (DList T)]]}
\newoperator
  {\ottkw{singleton}}{[[T ¹ν → Queue T]]}
  {[[singleton x]]}{[[ˢ(ˢInr (x ˢ:: ˢ[]), alloc)]]}
\newoperatorb
  {\ottkw{enqueue}}{[[Queue T ¹ν → T ¹ν → Queue T]]}
  {[[q enqueue y]]}{[[q ►case ¹ν (xs, ys) ⟼ ˢ(xs, ys append y)]]}
\newoperatorb
  {\ottkw{dequeue}}{[[Queue T ¹ν → ① ⨁ (T ⨂ (Queue T))]]}
  {[[dequeue q]]}{\!\!\!\begin{array}[t]{l}[[
q ►case ¹ν {⮒
‥‥ˢ((x ˢ:: xs), ys) ⟼ ˢInr ˢ(x, ˢ(xs, ys)),⮒
‥‥ˢ(ˢ[], ys) ⟼ (toList ys) ►case ¹ν {⮒
‥‥‥‥ˢ[] ⟼ Inl (),⮒
‥‥‥‥x ˢ:: xs ⟼ ˢInr ˢ(x, ˢ(xs, alloc))⮒
‥‥}⮒
}]]\end{array}}
}

\paragraph{Efficient queue using previously defined structures}
A simple implementation of a queue in a purely functional language is as a pair of lists $[[ˢ(front, back)]]$~\cite{hood_queue_1981}. Such queues are called \emph{Hood-Melville queues}. Elements are popped from $[[front]]$ and are enqueued in $[[back]]$. When we need to pop an element and $[[front]]$ is empty, then we set the queue to $[[ˢ(reverse back, ˢ[])]]$, and pop from the new front.

For such a simple implementation, Hood-Melville queues are surprisingly efficient: the cost of the reverse operation is $O(1)$ amortized for a single-threaded use of the queue. Still, it would be better to get rid of this full traversal of the back list.

Taking a step back, this $[[back]]$ list that has to be reversed before it is accessed is really merely a representation of a list that can be extended from the back. And we already know an efficient implementation of lists that can be extended from the back but only accessed in a single-threaded fashion: difference lists.

So we can give an improved version of the simple functional queue using destinations. This implementation is presented on the right-hand side of~\cref{fig:impl-dlist-queue}. Note that contrary to an imperative programming language, we can't implement the queue as a single difference list: our type system prevents us from reading the front elements of difference lists. Just like for the simple functional queue, we need a pair of one list that we can read from, and one that we can extend. Nevertheless this implementation of queues is both pure, as guaranteed by the \destcalculus{} type system, and nearly as efficient as what an imperative programming language would afford.

\section{Scope escape of destinations}\label{sec:scope-escape-dests}

In \cref{sec:working-with-dests}, we've silently been making an assumption: establishing a linear discipline on destinations ensures that all destinations will eventually find their way to the left of a fill operator $\blacktriangleleft$ or $\triangleleft$, so that the associated holes get written to. This turns out to be more subtle than it may first appear.

To see why, let's consider the type $[[⌊ ⌊ T⌋ ¹ν⌋ ¹ν]]$: the type of a destination pointing to a hole where a destination is expected. Think of it as an equivalent of the pointer type $\ottstype{T\,*\!*}$ in the C language. Destinations are indeed ordinary values, so they can be stored in data structures, and before they get effectively stored, holes stand in their places in the structure. In particular if we have $[[d]]\pmb{:}[[⌊ T⌋ ¹ν]]$ and $[[dd]]\pmb{:}[[⌊ ⌊ T⌋ ¹ν⌋ ¹ν]]$, we can form $[[dd ◀ d]]$.

This, by itself, is fine: we're building a linear data structure containing a destination; the destination $[[d]]$ is used linearly as it will eventually be consumed when that structure is consumed. However, as we explained in \cref{ssec:build-up-vocab}, destinations always exist within the scope of a structure with holes, and they witness how incomplete the structure is. As a result, to make a structure readable, it is not enough to know that all its remaining destinations will end up on the left of a fill operator \emph{eventually}; they must do so \emph{now}, before the scope they belong to ends. Otherwise some holes might not have been written to \emph{yet} when the structure is made readable.

The problem is, with a malicious use of $[[dd ◀ d]]$, we can store away $[[d]]$ in a parent scope, so $[[d]]$ might not end up on the left of a fill operator before the scope it originates from is complete. And still, that would be accepted by the linear type system.

To visualize the problem, let's consider simple linear store semantics. We'll need the $\ottkw{alloc'}$ operator\footnote{The actual semantics that we'll develop in \cref{sec:ectxs-sem} is more refined and can give a semantics to the more flexible $[[from⧔' t]]$ and $[[alloc]]$ operators directly, but for now, this simpler semantic will suffice for $\ottkw{alloc'}$.}

% the mode on the right-most arrow should be $[[¹∞]]$, but we mask it for now: it doesn't matter as we are exposing this particular problem of the system
\codehere{\newoperator
  {\ottkw{alloc'}}{[[(⌊ T ⌋ ¹ν ¹ν → ①) ¹ν → T]]}
  {[[alloc' f]]}{[[from⧔' (alloc ►map d ⟼ f d)]]}
}

The semantics of $\ottkw{alloc'}$ is: allocate a hole in the store, call the function with the corresponding destination; when the function has returned, dereference the destination to obtain a $[[T]]$. Which we can visualize as:

\codehere{[[Z | alloc' (ˢλ d ¹ν ⟼ t) ⟶ Z ⨆ { h ≔ ⬜ } | (t[d ≔ -h] ; deref -h) ]]}
For instance:
\bgroup\setlength{\arraycolsep}{0.5ex}
\codehere{\!\!\!\begin{array}{crcl}
       & $\{ \}$ &|& [[alloc' (ˢλ d ¹ν ⟼ d ⨞ Inl ⨞ () ) ]] \\
[[⟶]] & [[ { h ≔ ⬜ } ]] &|& [[-h ⨞ Inl ⨞ () ; deref -h ]] \\
[[⟶]] & [[ { h ≔ Inl () } ]] &|& [[deref -h ]] \\
[[⟶]] & $\{ \}$ &|& [[Inl () ]]
\end{array}}

Now, we are ready to see a counterexample and how it goes wrong:
\codehere{[[alloc' (ˢλ dd ¹ν ⟼ (alloc' (ˢλ d ¹ν ⟼ dd ◀ d)) ►case ¹ν { true ⟼ (), false ⟼ () }) ]]}
Here $[[dd]] \pmb{:} [[⌊⌊ Bool ⌋ ¹ν⌋ ¹ν]]$ and $[[d]] \pmb{:} [[⌊ Bool ⌋ ¹ν]]$. The problem with this example stems from the fact that $[[d]]$ is fed to $[[dd]]$, instead of being filled, in the scope of $[[d]]$. Let's look a the problem in action:

\codehere{\!\!\!\begin{array}{crcl}
       & $\{ \}$ &|& [[alloc' (ˢλ dd ¹ν ⟼ (alloc' (ˢλ d ¹ν ⟼ dd ◀ d)) ►case ¹ν { true ⟼ (), false ⟼ () }) ]] \\
[[⟶]] & [[ { hd ≔ ⬜ } ]] &|& [[(alloc' (ˢλ d ¹ν ⟼ -hd ◀ d)) ►case ¹ν { true ⟼ (), false ⟼ () } ; deref -hd]] \\
[[⟶]] & [[ { hd ≔ ⬜ , h ≔ ⬜ } ]] &|& [[(-hd ◀ -h ; deref -h) ►case ¹ν { true ⟼ (), false ⟼ () } ; deref -hd]] \\
[[⟶]] & [[ { hd ≔ -h , ul< h ≔ ⬜ > } ]] &|& [[ ul< (deref -h) > ►case ¹ν { true ⟼ (), false ⟼ () } ; deref -hd]]
\end{array}}\egroup
\noindent{}Because of $[[d]]$ escaping its scope, we end up reading uninitialized memory.

This example must be rejected by our type system. As demonstrated by~\cite{bagrel_destination-passing_2024}, it's possible to reject this example using purely a linear type system: they make it so that, in $[[d ◀ t]]$, $[[t]]$ can't be linear. Since all destinations are linear, $[[t]]$ can't be, or contain, a destination. This is a rather blunt restriction! Indeed, it makes the type $[[⌊ ⌊ T⌋ ¹ν⌋ ¹ν]]$ practically useless: we can form destinations with type $[[⌊ ⌊ T⌋ ¹ν⌋ ¹ν]]$ but they can never be filled. More concretely, this means that destination can never be stored in data structures with holes, such as the difference list or queues of \cref{ssec:efficient-queue}.

But we really want to be able to store destinations in data structures with holes, in fact, we'll use this capability to our advantage in \cref{fig:impl-bfs}. So we want $[[t]]$ in $[[d ◀ t]]$ to be allowed to be linear. Without further restrictions, the counterexample would be well-typed. To address this, \destcalculus{} uses a system of ages to represent scopes. Ages are described in \cref{sec:syntax-type-system}.

\section{Breadth-first tree traversal}\label{sec:bft}

As a more full-fledged example, which uses the full expressive power of \destcalculus{}, we borrow and improve on an example from~\cite{bagrel_destination-passing_2024}, breadth-first tree relabeling:

\begin{quote}
Given a tree, create a new one of the same shape, but with the values at the nodes replaced by the numbers $1\ldots|T|$ in breadth-first order.
\end{quote}

This example cannot be implemented using \cite{minamide_functional_1998} system where structures with holes are represented as linear functions. Destinations as first-class values are very much required. Indeed, breadth-first traversal implies that the order in which the structure must be populated (left-to-right, top-to-bottom) is not the same as the structural order of a functional binary tree, that is, building the leaves first and going up to the root. This isn't very natural in functional programming, which is why a lot has been written on purely functional breadth-first traversals~\cite{okasaki_bfs_2000,jones_gibbons_linearbfs_93,gibbons_phases_2023}.

On the other hand, as demonstrated in~\cite{bagrel_destination-passing_2024}, first-class destination passing lets us use the familiar algorithm with queues that is taught in classroom. Specifically, the algorithm keeps a queue of pairs $(\textit{input subtree}, \textit{destination to output subtree})$.

\Cref{fig:impl-bfs} presents the \destcalculus{} implementation of the breadth-first tree traversal. There, $[[Tree T]]$ is defined unsurprisingly as $[[Tree T]]\btriangleq [[① ⨁ (T ⨂ ((Tree T) ⨂ (Tree T)))]]$; we refer to the constructors of $[[Tree T]]$ as $\ottsctor{Nil}$ and $\ottsctor{Node}$, defined in the obvious way. We also assume some encoding of the type $[[Nat]]$ of natural number. $[[Queue T]]$ is the efficient queue type from \cref{ssec:efficient-queue}.

We implement the actual breadth-first relabeling $\ottkw{relabelDPS}$ as an instance of a more general breadth-first traversal function $\ottkw{mapAccumBFS}$, which applies any state-passing style transformation of labels in breadth-first order. A similar traversal function can be found in~\cite{bagrel_destination-passing_2024}. The difference is that, because they can't store destinations in structures with holes (see the discussion in \cref{sec:scope-escape-dests}), their implementation can't use the efficient queue implementation from \cref{ssec:efficient-queue}. So they have to revert to using a Hood-Melville queue for breadth-first traversal.

In $\ottkw{mapAccumBFS}$, we create a new destination $[[dtree]]$ into which we will write the result of the traversal, then call the main loop $\ottkw{go}$. The $\ottkw{go}$ function is in destination-passing style, but what's remarkable is that $\ottkw{go}$ takes an unbounded number of destinations as arguments, since there are as many destinations as items in the queue. This is where we actually use the fact that destinations are ordinary values.

New in \cref{fig:impl-bfs} are the \textcolor{modecolor}{fuchsia} annotations: these are \emph{modes}. We'll describe modes in detail in \cref{sec:syntax-type-system}. In the meantime, $[[¹]]$ and $[[ω]]$ control linearity: we use $[[ω]]$ to mean that the state and function $[[f]]$ can be used many times. On the other hand, $[[∞]]$ is an \emph{age} annotation; in particular, the associated argument cannot carry destinations. Without these modes, our type system presented in~\cref{ssec:ty-term-val} would reject the example. Arguments with no modes are otherwise linear and can capture destinations. We introduce the exponential modality $[[! m T]]$ to reify mode $[[m]]$ in a type; this is useful to return several values having different modes from a function, like in $[[f]]$. An exponential is rarely needed in an argument position, as we have $[[(! m T) ¹ν → U]]\simeq[[T m → U]]$.

\begin{codefig}{\caption{Breadth-first tree traversal in destination-passing style}\label{fig:impl-bfs}}
\newoperator[~\mathsfbf{rec}]
{\ottkw{go}}{[[(S ω∞ → T1 ¹ν → (! ω∞ S) ⨂ T2) ω∞→ S ω∞ → Queue (Tree T1 ⨂ ⌊ Tree T2 ⌋ ¹ν) ¹ν → ①]]}
{[[go f st q]]}{\!\!\!\begin{array}[t]{l}[[
(dequeue q) ►case ¹ν {⮒
‥‥Inl () ⟼ (),⮒
‥‥ˢInr ˢ(ˢ(tree, dtree), q') ⟼ tree ►case ¹ν {⮒
‥‥‥‥ˢNil ⟼ dtree ⨞ Nil ; go f st q',⮒
‥‥‥‥ˢNode x tl tr ⟼ ༼(dtree ⨞ Node) ►case ¹ν⮒
‥‥‥‥‥‥ˢ(dy, ˢ(dtl, dtr)) ⟼ ༼(༼f st༽ x) ►case ¹ν⮒
‥‥‥‥‥‥‥‥ˢ(ˢᴇ ω∞ st', y) ⟼⮒
‥‥‥‥‥‥‥‥‥‥dy ◀ y ;⮒
‥‥‥‥‥‥‥‥‥‥go f st' (q' enqueue ˢ(tl, dtl) enqueue ˢ(tr, dtr))༽༽⮒
‥‥}⮒
}
]]\end{array}}
\newoperator
{\ottkw{mapAccumBFS}}{[[(S ω∞ → T1 ¹ν → (! ω∞ S) ⨂ T2) ω∞→ S ω∞ → Tree T1 ¹∞ → Tree T2]]}
{[[mapAccumBFS f st tree]]}{\!\!\!\begin{array}[t]{l}[[
from⧔' (alloc ►map dtree ⟼ go f st (singleton ˢ(tree, dtree)))
]]\end{array}}
\newoperator
{\ottkw{relabelDPS}}{[[Tree ① ¹∞ → Tree Nat]]}
{[[relabelDPS tree]]}{\!\!\!\begin{array}[t]{l}[[
mapAccumBFS (ˢλ st ω∞ ⟼ ˢλ un ¹ν ⟼ un ; ˢ(ˢᴇ ω∞ (succ st), st)) ˢ1 tree
]]\end{array}}
\end{codefig}

\section{Type system}\label{sec:syntax-type-system}

\newcommand{\grammsep}{\hspace*{2ex}|\hspace*{2ex}}
\newcommand{\grammdef}{:\hspace*{-0.3ex}:\hspace*{-0.3ex}=}

\begin{codefig}{\caption{Grammar of \destcalculus{}}\label{fig:grammar}}{\setlength{\arraycolsep}{1ex}
\!\!\!\begin{array}{rrl}
[[t]], [[u]] &::=& [[x]] \grammsep [[t' t]] \grammsep [[t ; t']] \\
             &|\,& [[ t ►case m { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } ]] \grammsep [[t ►case m ( x1 , x2 ) ⟼ u]] \grammsep [[t ►case m ᴇ n x ⟼ u]] \\
             &|\,& [[t ►map x ⟼ t']] \grammsep [[ to⧔ t ]] \grammsep [[ from⧔ t ]] \grammsep [[ alloc ]] \\
             &|\,& [[ t ⨞ () ]] \grammsep [[ t ⨞ Inl ]] \grammsep [[t ⨞ Inr]] \grammsep [[t ⨞ (,)]] \grammsep [[t ⨞ ᴇ m]] \grammsep [[t ⨞ ( λ x m ⟼ u )]] \grammsep [[t ⨞· t']] \grammsep [[t ◀ t']] \\
&&\\
[[T]], [[U]], [[S]] &::=& [[⌊ T ⌋ n]] \quad\quad\textit{(destination)} \\
                    &|\,& [[S ⧔ T]] \hspace*{\widthof{$[[⌊ T ⌋ n]]$}-\widthof{$[[U ⧔ T]]$}}\quad\quad\textit{(ampar)} \\
                    &|\,& [[①]] \grammsep [[T1 ⨁ T2]] \grammsep [[T1 ⨂ T2]] \grammsep [[! m T]] \grammsep [[T m → U]] \\
&&\\
        [[m]], [[n]] &::=& [[p a]] \hspace*{\widthof{$[[⌊ T ⌋ m]]$}-\widthof{$[[p a]]$}}\quad\quad\textit{(pair of multiplicity and age)} \\
               [[p]] &::=& [[¹]] \grammsep [[ω]] \\
               [[a]] &::=& [[↑]]^{n} \grammsep [[∞]] \\
&&\\
[[P]] &::=& [[{ }]] \grammsep [[{ x : m T }]] \grammsep [[P1 , P2]] \grammsep [[P1 + P2]] \grammsep [[m · P]]
\end{array}
}\end{codefig}

\sidebysidecodefig{\caption{Syntactic sugar for terms}\label{fig:sterm}}{t}{0.46}{
[[ˢ()]] \btriangleq \!\!\!\begin{array}[t]{l}[[
from⧔' (alloc ►map d ⟼ d ⨞ () )
]]\end{array}\\[\interdefskip]
[[ˢInl t]] \btriangleq \!\!\!\begin{array}[t]{l}[[
from⧔' (alloc ►map d ⟼⮒
‥‥d ⨞ Inl ◀ t⮒
)
]]\end{array}\\[\interdefskip]
[[ˢInr t]] \btriangleq \!\!\!\begin{array}[t]{l}[[
from⧔' (alloc ►map d ⟼⮒
‥‥d ⨞ Inr ◀ t⮒
)
]]\end{array}\\[\interdefskip]
[[ˢᴇ m t]] \btriangleq \!\!\!\begin{array}[t]{l}[[
from⧔' (alloc ►map d ⟼⮒
‥‥d ⨞ ᴇ m ◀ t⮒
)
]]\end{array}
}{
[[from⧔' t]] \btriangleq \\
\myspace{1}\!\!\!\begin{array}[t]{l}[[
(from⧔ (t ►map un ⟼ un ; ᴇ ¹∞ () )) ►case ¹ν⮒
‥‥( st , ex ) ⟼ ༼ex ►case ¹ν⮒
‥‥‥‥ᴇ ¹∞ un ⟼ un ; st༽
]]\end{array}\\[\interdefskip]
[[ˢλ x m ⟼ u]] \btriangleq \!\!\!\begin{array}[t]{l}[[
from⧔' (alloc ►map d ⟼⮒
‥‥d ⨞ ( λ x m ⟼ u )⮒
)
]]\end{array}\\[\interdefskip]
[[ˢ( t1 , t2 )]] \btriangleq \!\!\!\begin{array}[t]{l}[[
from⧔' (alloc ►map d ⟼⮒
‥‥(d ⨞ (,)) ►case ¹ν⮒
‥‥‥‥( d1 , d2 ) ⟼ d1 ◀ t1 ; d2 ◀ t2⮒
)
]]\end{array}
}

\destcalculus{} is a simply typed $\lambda$-calculus with unit ($[[①]]$), product ($\ottstype{\otimes}$) and sum ($\ottstype{\oplus}$) types. Its most salient features are the destination $[[⌊ T ⌋ n]]$ and ampar $[[S ⧔ T]]$ types which we've introduced in \cref{sec:working-with-dests,sec:scope-escape-dests,sec:bft}. Just as important are \emph{modes} and the associated exponential modality $\ottstype{!}_{[[m]]}$.
The grammar of \destcalculus{} is presented in~\cref{fig:grammar}. Some of the constructions that we've been using in \cref{sec:working-with-dests,sec:scope-escape-dests,sec:bft} are syntactic sugar for more fundamental forms, we give their definitions in \cref{fig:sterm}.

Following a common trend (e.g.~\cite{bernardy_linear_2018,qtt_2018,granule_2019,bernardy_modality_2020}), our modes form a semiring\footnote{Technically, our semirings are commutative but don't have a zero. The terminology “ringoid” has been sometimes used for semiring without neutral elements (neither zero nor unit), for instance~\cite{bernardy_modality_2020}. So maybe a more accurate terminology would be commutative ringoids with units. We'll stick to “semiring” from now on.}. In \destcalculus{} the mode semiring is the product of a \emph{multiplicity} semiring for linearity, as in~\cite{bernardy_linear_2018}, and of an \emph{age} semiring (see \cref{ssec:age-control}) to prevent the scoping issues discussed in \cref{sec:scope-escape-dests}.

We usually omit mode annotations when the mode is the unit element $[[¹ν]]$. In particular, a function arrow without annotation, or with multiplicity annotation $[[¹]]$, is linear; it is equivalent to the linear arrow $\ottstype{\multimap}$ from~\cite{girard_linear_1995}.

\subsection{The age semiring}\label{ssec:age-control}

In order to prevent destinations from escaping their scope, as discussed in \cref{sec:scope-escape-dests}, we track the \emph{age} of destinations. Specifically we track, with a de-Bruijn-index-like discipline, what scope a destination originates from. We'll see in \cref{ssec:ty-term-val} that scopes are introduced by $[[t ►map x ⟼ t']]$. If we have a term $[[t1 ►map x1 ⟼ t2 ►map x2 ⟼ t3 ►map x3 ⟼ x1]]$, then the innermost occurrence of $[[x1]]$ has age $[[↑]]^2$ because two nested $\ottkw{map}$ separates the definition and use site of $[[x1]]$.

We also have an age $[[∞]]$ for values which don't originate from the scope of a $[[t ►map x ⟼ t']]$ and can be freely used in and returned by any scope. In particular, destinations can never have age $[[∞]]$; the main role of age $[[∞]]$ is thus to act as a guarantee that a value doesn't contain destinations.\info{I removed the bit about extending ages to variables because we, in fact, have no age (or multiplicity, or mod) variables.} Finally, we will write $[[ν]] \btriangleq [[↑]]^0$ for the age of destination that originate from the current scope; and $[[↑]] \btriangleq [[↑]]^1$ as we will frequently multiply ages by $[[↑]]$, when entering a scope, to mean that in the scope, all the free variables have their age increased by $1$.

This description is reflected by the semiring operations. Multiplication $[[·]]$ is used when nesting a term inside another: then ages, as indices, are summed. Addition $\ottsmode{+}$ is used to share a variable between two subterms, it ought to be read as giving the variable the same age on both sides.
Tables for the $\ottsmode{+}$ and $\ottsmode{[[·]]}$ operations are presented in~\cref{fig:mul-age-tables}.

\begin{figure}[t]
\begin{tabular}{|c|c|c|}\hline
$\ottsmode{+}$ & $[[↑]]^{n}$               & $[[∞]]$ \\\hline
$[[↑]]^{m}$    & $\text{if }n = m\text{ then }[[↑]]^{n}\text{ else }[[∞]]$ & $[[∞]]$ \\\hline
$[[∞]]$        & $[[∞]]$                   & $[[∞]]$ \\\hline
\end{tabular}
\hfill
\begin{tabular}{|c|c|c|}\hline
$[[·]]$        & $[[↑]]^{n}$               & $[[∞]]$ \\\hline
$[[↑]]^{m}$    & $[[↑]]^{n+m}$ & $[[∞]]$ \\\hline
$[[∞]]$        & $[[∞]]$                   & $[[∞]]$ \\\hline
\end{tabular}
\hfill
\vrule width 0.5pt % Vertical rule of 1pt width
\hfill
\begin{tabular}{|c|c|c|}\hline
$\ottsmode{+}$ & $[[¹]]$ & $[[ω]]$ \\\hline
$[[¹]]$        & $[[ω]]$ & $[[ω]]$ \\\hline
$[[ω]]$        & $[[ω]]$ & $[[ω]]$ \\\hline
\end{tabular}
\hfill
\begin{tabular}{|c|c|c|}\hline
$[[·]]$        & $[[¹]]$ & $[[ω]]$ \\\hline
$[[¹]]$        & $[[¹]]$ & $[[∞]]$ \\\hline
$[[ω]]$        & $[[∞]]$ & $[[∞]]$ \\\hline
\end{tabular}

\bigskip
\qquad$[[ν]] \btriangleq [[↑]]^0$\qquad\qquad$[[↑]] \btriangleq [[↑]]^1$\hfill\hfill


\caption{Operation tables for age and multiplicity semirings}\label{fig:mul-age-tables}
\end{figure}

\subsection{Design motivation behind the ampar and destination types}\label{ssec:ampar-motivation}

Minamide's work~\cite{minamide_functional_1998} is the earliest record we could find of a functional calculus in which incomplete data structures can exists as first class values, and be composed. Crucially, such structures don't have to be completed immediately, and can act as actual containers, e.g. to implement different lists as in~\cref{ssec:efficient-queue}.

In~\cite{minamide_functional_1998}, a structure with a hole is named \emph{hole abstraction}. In the body of a hole abstraction, the bound \emph{hole variable} should be used linearly (exactly once), and must only be used as a parameter of a data constructor (it cannot be pattern-matched on). A hole abstraction of type $\ottstype{([[T]], [[S]]) hfun}$ is thus a weak form of linear lambda abstraction $\ottstype{[[T]] \multimap [[S]]}$, which just moves a piece of data into a bigger data structure.

% In fact, the type of hole abstraction $\ottstype{([[T1]], [[T2]]) hfun}$ in Minamine's work shares a lot of similarity with the separating implication or \emph{magic wand} $\ottstype{[[T1]] \sepimp [[T2]]}$ from separation logic: given a piece of memory matching description $[[T1]]$, we obtain a (complete) piece of memory matching description $[[T2]]$.

Now, in classical linear logic (CLL), we know we can transform linear implication $\ottstype{[[T]] \multimap [[S]]}$ into $\ottstype{[[S]]~\parr~[[T]]^{\perp}}$. Doing so for the type $\ottstype{([[T]], [[S]]) hfun}$ gives $\ottstype{[[S]] ~\parr~ \lfloor[[T]]\rfloor}$, where $\ottstype{\lfloor\smallbullet\rfloor}$ is a form of dualisation. We use a slightly abusive notation here; this is not exactly the same \emph{par} connective as in CLL, because $\ottstype{hfun}$ is not as powerful as $\ottstype{\multimap}$.

Transforming the hole abstraction from its original implication form to a \emph{par} form let us consider the dualized type $\ottstype{\lfloor[[T]]\rfloor}$ --- that we call \emph{destination} type --- as a first-class component of our calculus. We also get to see the hole abstraction as a pair-like structure (like it is implemented in practice), where the two sides might be coupled together in a way that prevent using both of them simultaneously.

\paragraph{From par $\ottstype{\parr}$ to ampar $\ottstype{\ltimes}$}

In CLL, thanks to the cut rule, any of the sides $[[S]]$ or $[[T]]$ of a par $\ottstype{[[S]]~\parr~[[T]]}$ can be eliminated, by interaction with the opposite type $\ottstype{\smallbullet^{\perp}}$, which then frees up the other side. But in \destcalculus{}, we have two types of interaction to consider: interaction between $[[T]]$ and $\ottstype{\lfloor[[T]]\rfloor}$, and interaction between $[[T]]$ and $[[T]]\ottstype{\to\smallbullet}$. The structure containing holes, $[[S]]$, can safely interact with $\ottstype{\lfloor[[S]]\rfloor}$ (merge it into another structure with holes), but not with $[[T]]\ottstype{\to\smallbullet}$, as it would let us read an incomplete structure!

On the other hand, a complete value of type $[[T]] = \ottstype{(\ldots\lfloor[[T']]\rfloor\ldots)}$ containing destinations (but no holes) can safely interact with a function $[[T ¹ν → ①]]$: in particular, the function can pattern-match on the value of type $[[T]]$ to access destination $\ottstype{\lfloor[[T']]\rfloor}$. However, it might not be safe to fill the $[[T]] = \ottstype{(\ldots\lfloor[[T']]\rfloor\ldots)}$ into a $\ottstype{\lfloor[[T]]\rfloor}$ as that might allow scope escape of the destination $\ottstype{\lfloor[[T']]\rfloor}$ as we've just seen in~\cref{sec:scope-escape-dests}.

As a result, we cannot adopt rules from CLL blindly. We must be even more cautious since the destination type is not an involutive dualisation, unlike CLL one.

To recover sensible rules for the connective, we decided to make it asymmetric, hence ampar ($[[S ⧔ T]]$) for \emph{asymmetrical memory par}:
\begin{itemize}
\item the left side $[[S]]$ can contain holes, and can be only be eliminated by interaction with $\ottstype{\lfloor[[S]]\rfloor}$ using operator $\triangleleft\mycirc$ to free up the right side $[[T]]$;
\item the right side $[[T]]$ cannot contain holes (it might contain destinations), and can be eliminated by interaction with $[[T ¹ν → ①]]$ to free up the left side $[[S]]$. This is done using $\ottkw{from}_{\ottkw{\ltimes}}'$ and $\ottkw{map}$.

\end{itemize}

\subsection{Typing rules}\label{ssec:ty-term-val}

The typing rules for \destcalculus{} are highly inspired from\cite{bernardy_modality_2020} and Linear Haskell~\cite{bernardy_linear_2018}, and are detailed in~\cref{fig:ty-term-sterm}. In particular, we use the same additive/multiplicative approach on contexts for linearity and age enforcement. For that we need two operations:
\begin{itemize}
  \item We lift mode multiplication to typing contexts as a pointwise operation on bindings;\\ we pose $[[n'·({ x : m T })]] \btriangleq [[{ x : n' · m T }]]$.
  \item We define context addition as a partial operation where $[[({ x : m T }) + P]] = [[{ x : m T },P]]$\hspace*{0.6em}if $[[x]] \notin [[P]]$ and $[[({ x : m T }) + ({ x : m' T })]] = [[x]]:\!_{\![[m]]\ottsmode{+}[[m']]}[[T]]$.
\end{itemize}

\begin{ottfig}[b]{\caption{Typing rules for terms and syntactic sugar}\label{fig:ty-term-sterm}}\bgroup\renewcommand{\ottdruleTyXXtermXXVal}{}
\ottdefnTyXXterm{}

\renewcommand\ottaltinferrule[4]{
  \inferrule*[fraction={===},narrower=0.3,lab=#1,#2]
    {#3}
    {#4}
}
\ottdefnTyXXsterm{}
\egroup
\end{ottfig}

\cref{fig:ty-term-sterm} presents the typing rules for terms, and rules for syntactic sugar forms that have been derived from term rules and proven formally too. \cref{fig:ty-val} presents the typing rules for values of the language. We'll now walk through the few peculiarities of the type system for terms.

The predicate $\mathtt{DisposableOnly}~[[P]]$ in rules \rref*{Ty-term-Var}, \rref*{Ty-term-Alloc} and \rref*{Ty-sterm-Unit} says that $[[P]]$ can only contain bindings with multiplicity $[[ω]]$, for which weakening is allowed in linear logic. It is enough to allow weakening at the leaves of the typing tree, \emph{i.e.} in the three aforementioned rules.

\newcommand{\pleq}{\mathop{\mathtt{<:}^{\scriptscriptstyle{\pmb{\mathsf{p}}}}}}
\newcommand{\aleq}{\mathop{\mathtt{<:}^{\scriptscriptstyle{\pmb{\mathsf{a}}}}}}

Rule \rref*{Ty-term-Var}, in addition to weakening, allows for dereliction of the mode for the variable used, with subtyping constraint $[[¹ν <: m]]$ defined as~~$[[p a <: p' a']] \Longleftrightarrow [[p]] \pleq [[p']] \land~[[a]] \aleq [[a']]$ where:\improvement{All the bit about mode ordering should move in the section about modes}

{\setlength{\arraycolsep}{\widthof{\,}}
\begin{minipage}{0.2\linewidth}
$\left\{\begin{array}{rcl}
  [[¹]] &\pleq& [[¹]] \\
  [[p]] &\pleq& [[ω]]
\end{array}\right.$
\end{minipage}\begin{minipage}{0.8\linewidth}
$\left\{\begin{array}{rcl}
  [[↑]]^{m} &\aleq& [[↑]]^{n} \Longleftrightarrow m = n \quad \text{(no finite age dereliction ; recall that $[[↑]]^{0} = [[ν]]$)} \\
  [[a]] &\aleq& [[∞]]
\end{array}\right.$
\end{minipage}
}

Rule \rref*{Ty-term-PatU} is elimination for unit, and is also used to chain fill operations.

Pattern-matching with rules \rref*{Ty-term-App}, \rref*{Ty-term-PatS}, \rref*{Ty-term-PatP} and \rref*{Ty-term-PatE} is parametrized by a mode $[[m]]$ by which the typing context $[[P1]]$ of the scrutinee is multiplied. The variables which bind the subcomponents of the scrutinee then inherit this mode. In particular, this choice enforces the equivalence $[[! ωa (T1 ⨂ T2)]] \simeq [[(! ωa T1) ⨂ (! ωa T2)]]$, which is not part of intuitionistic linear logic, but valid in Linear Haskell~\cite{bernardy_linear_2018}.

\paragraph{Rules for scoping}

As destinations always exist in the context of a structure with holes, and must stay in that context (see \cref{sec:scope-escape-dests}), we need a formal notion of \emph{destination scope}. Destination scopes (we’ll usually just say \emph{scopes}) are created by \rref{Ty-term-Map}, as destinations are only ever accessed through $\ottkw{map}$. More precisely, $[[t ►map x ⟼ t']]$ creates a new scope for $[[x]]$ which spans over $[[t']]$. In that scope, $[[x]]$ has age $[[ν]]$ (``now''), and the age of the other bindings in the typing context is incremented by $1$ (i.e. scaled by $[[↑]]$). We see that $[[t']]$ types in $[[¹↑·P2,{ x : ¹ν T }]]$ while the global term $[[t ►map x ⟼ t']]$ mentions unscaled context $[[P2]]$. The notion of age, that we attach on bindings, lets us distinguish $[[x]]$ --- introduced by $\ottkw{map}$ to bind the right-hand side of the ampar, containing destinations --- from anything else that was previously bound, and this information is propagated throughout the typing of $[[t']]$. Specifically, distinguishing the age of destinations is crucial when typing destination-filling primitives. 

\Cref{fig:scope-rules} illustrates scopes introduced by $\ottkw{map}$, and how the typing rules for $\ottkw{map}$ and $\blacktriangleleft$ interact.

\begin{figure}[t]
  \scalebox{1.0}{\tikzfig{schemas/mapscopes}}
  \caption{Scope rules for $\ottkw{map}$ in \destcalculus{}}
  \label{fig:scope-rules}
\end{figure}

Anticipating \cref{ssec:runtime-values}, ampar values are pairs with a structure with holes on the left, and destinations on the right. With $\ottkw{map}$ we enter a new scope where the destinations are accessible, but the structure with holes remains in the outer scope. As a result, when filling a destination with \rref{Ty-term-FillLeaf}, for instance $[[x1 ◀ x0]]$ in the figure, we type $[[x1]]$ in the new scope, while we type $[[x0]]$ in the outer scope, as it’s being moved to the structure with holes on the left of the ampar, which lives in the outer scope too. This is, in fact the opposite of the scaling that $\ottkw{map}$ does: while $\ottkw{map}$ creates a new scope for its body, operator $\blacktriangleleft$, and similarly, $\triangleleft\mycirc$ and $[[⨞]](\lamnt{[[x]]}{[[m]]}{[[u]]})$, transfer their right operand to the outer scope. We chose this destination-filling form for function creation because of that similarity, and so that any data can be built through piecemeal destination filling, for consistency.

When using $\ottkw{from}_{\ottkw{\ltimes} }'$ (rule \rref*{Ty-sterm-FromA'}), the left of an ampar is extracted to the current scope (as seen at the bottom of~\cref{fig:scope-rules} with $[[x22]]$): this is the fundamental reason why the left of an ampar has to ``take place'' in the current scope. We know the structure is complete and can be extracted because the right side is of type unit ($[[①]]$), and thus no destination on the right side means no hole can remain on the left. $\ottkw{from}_{\ottkw{\ltimes}}'$ is implemented in terms of $\ottkw{from}_{\ottkw{\ltimes}}$ in~\cref{fig:sterm} to keep the core calculus tidier (and limit the number of typing rules, evaluation contexts, etc), but it can be implemented much more efficiently in a real-world implementation.

When an ampar is complete and disposed of with the more general $\ottkw{from}_{\ottkw{\ltimes} }$ in rule \rref*{Ty-term-FromA} however, we extract both sides of the ampar to the current scope, even though the right side is normally in a different scope. This is only safe to do because the right side is required to have type $[[! ¹∞ T]]$, which means it is scope-insensitive: it cannot contain any scope-controlled resource. In particular this ensures that the right side cannot contain destinations, meaning that the structure on the left is complete and ready to be read.

In \rref*{Ty-term-ToA}, on the other hand, there is no need to bother with scopes: the operator $\ottkw{to}_{\ottkw{\ltimes}}$ embeds an already completed structure in an ampar whose left side is the structure (that continues to type in the current scope), and right side is unit.

The remaining operators $[[⨞]][[()]], [[⨞]][[Inl]], [[⨞]][[Inr]], [[⨞]]\,\expcons{[[m]]}, [[⨞]][[(,)]]$ from rules \textsc{Ty-term-Fill$*$} are the other destination-filling primitives. They write a hollow constructor to the hole pointed by the destination operand, and return the potential new destinations that are created in the process (or unit if there is none).

\section{Operational semantics}\label{sec:ectxs-sem}

Before we define the operational semantics of \destcalculus{} we need to introduce a few more concepts. We'll need commands $[[ C[t] ]]$, they're described in \cref{ssec:ty-ectxs-cmd}; and we'll need values, described in \ref{fig:grammar}. Indeed, the terms of \destcalculus{} lack any way to represent destinations or holes, or really any kind of value (for instance $[[Inl ()]]$ has been, so far, just syntactic sugar for a term $\ottkw{from}_{\ottkw{\ltimes} }'~(\ottkw{map}~[[alloc]]~\ottkw{with}~\ldots)$). It's a peculiarity of \destcalculus{} that values only exist during the reduction, in this aspect our operational semantics resembles a denotational semantics. We sometimes call values \emph{runtime values} to emphasize this aspect. In order to express type safety with respect to our operational semantics, we'll need to extend the type system to cover commands and values, but these new typing rules are better thought of as technical device for the proofs than as part of the type system proper.

\subsection{Runtime values and extended terms}\label{ssec:runtime-values}

\begin{codefig}{\caption{Extended terms and runtime values}\label{fig:grammar-val}}{\setlength{\arraycolsep}{1ex}
\!\!\!\begin{array}{rrl}
[[t]], [[u]] &::=& \ldots \grammsep [[v]] \\
&&\\
       [[v]] &::=& [[+ h]] \hspace*{\widthof{$[[H ⟨ v2 ❟ v1 ⟩]]$}-\widthof{$[[+ h]]$}}\quad\quad\textit{(hole)} \\
             &|\,& [[- h]] \hspace*{\widthof{$[[H ⟨ v2 ❟ v1 ⟩]]$}-\widthof{$[[- h]]$}}\quad\quad\textit{(destination)} \\
             &|\,& [[H ⟨ v2 ❟ v1 ⟩]] \quad\quad\textit{(ampar value form)} \\
             &|\,& [[()]] \grammsep [[ᵛλ x m ⟼ u]] \grammsep [[Inl v]] \grammsep [[Inr v]] \grammsep [[ᴇ m v]] \grammsep [[( v1 , v2 )]] \\
             &&\\
\end{array}\\\hspace*{-0.5em}\begin{array}{rrlcccccc}
[[D]] &::=& [[{ }]] \grammsep [[{ - h : m ⌊ T ⌋ n }]] &|& [[D1 , D2]] &|& [[D1 + D2]] &|& [[m · D]] \\
[[P]] &::=& [[{ }]] \grammsep [[{ - h : m ⌊ T ⌋ n }]] \grammsep [[{ x : m T }]] &|& [[P1 , P2]] &|& [[P1 + P2]] &|& [[m · P]] \\
\hspace*{\widthof{$[[t]], [[u]]$}-\widthof{$[[G]]$}}[[G]] &::=& [[{ }]] \grammsep [[{ - h : m ⌊ T ⌋ n }]] \grammsep [[{ + h : T n }]] \grammsep [[-⁻¹ D]] &|& [[G1 , G2]] &|& [[G1 + G2]] &|& [[m · G]]
\end{array}
}\end{codefig}

\begin{ottfig}{\caption{Typing rules for extended terms and runtime values}\label{fig:ty-val}}
  \drules[Ty-term]{$[[P ⊢ t : T]]$}{Extended terms}{Val}

  \hfill

  \ottdefnTyXXval{}
\end{ottfig}

The syntax of runtime values is given in \cref{fig:grammar-val}. It features constructors for all of our basic types, as well as functions (note that in $[[ᵛλ x m ⟼ u]]$, $[[u]]$ is a term, not a value). The more interesting values are holes $[[+ h]]$, destinations $[[- h]]$, and ampars $[[H ⟨ v2 ❟ v1 ⟩]]$, which we'll describe in the rest of the section. In order for the operational semantics to use substitution, which requires substituting variables with values, we also extend the syntax of terms to include values.

Destinations and holes are two faces of the same coin, as seen in~\cref{ssec:build-up-vocab}, and we must ensure that throughout the reduction, a destination always points to a hole, and a hole is always the target of exactly one destination. Thus, the new idea of our type system is to feature \emph{hole bindings} $[[{ + h : T n }]]$ and \emph{destination bindings} $[[{ - h : m ⌊ T ⌋ n }]]$ in addition to the variable bindings $[[{ x : m T}]]$ that usually populates typing contexts. In both cases, we call $[[h]]$ a \emph{hole name}. By definition, a context $[[G]]$ can contain both destination bindings and hole bindings, but \emph{not a destination binding and a hole binding for the same hole name}.

We need to extend our previous context operations to act on the new binding forms:
\[\left\{\begin{array}{rcl}
  [[n'·({ x : m T })]] &=& [[{ x : n' · m T }]] \\
  [[n'·({ + h : T n })]] &=& [[{ + h : T n' · n }]] \\
  [[n'·({ - h : m ⌊ T ⌋ n })]] &=& [[{ - h : n' · m ⌊ T ⌋ n }]]
\end{array}\right.\]
\[\left\{\begin{array}{rcll}
  [[({ x : m T }) + ({ x : m' T })]] &=& [[x]]:\!_{\![[m]]\ottsmode{+}[[m']]}[[T]] &\\
%  [[({ x : m T }) + P]] &=& [[{ x : m T },P]]\quad\textit{if}~[[x]] \notin [[P]]\\
  [[({ + h : T n }) + ({ + h : T n' })]] &=& [[+h]]:\!_{\![[n]]\ottsmode{+}[[n']]}[[T]] &\\
%  [[({ + h : T n }) + G]] &=& [[{ + h : T n },P]]\quad\textit{if}~[[h]] \notin [[G]]\\
  [[({ - h : m ⌊ T ⌋ n }) + ({ - h : m' ⌊ T ⌋ n })]] &=& [[-h]]:\!_{\![[m]]\ottsmode{+}[[m']]}[[ ⌊ T ⌋ n ]]\quad&\textit{(note that $[[n]]$ is the same in both)}\\
% [[({ - h : m ⌊ T ⌋ n })]]+\Omega &=& [[{ - h : m ⌊ T ⌋ n }]],\Omega\quad\textit{if}~[[h]] \notin \Omega
  (\ottnt{name}:\!_{\![[m]]}[[T]]) + \Omega &=& \ottnt{name}:\!_{\![[m]]}[[T]],\Omega&\textit{if}~\ottnt{name} \notin \Omega
\end{array}\right.\]

The last definition ranges over\hspace*{0.6em}$\ottnt{name} ::= [[x]]~|~[[+h]]~|~[[-h]]$\hspace*{0.6em}and\hspace*{0.6em}$\Omega ::= [[P]]~|~[[G]]~|~[[D]]$. Context addition is still very partial; for instance, $[[({ + h : T n }) + ({ - h : m ⌊ T ⌋ n' })]]$ is not defined, as $[[h]]$ is present on both sides but with different binding forms.

One of the main goals of \destcalculus{} is to ensure that a hole value is never read. The type system (\cref{fig:ty-val}) maintains this invariant by simply not allowing any hole bindings in the context when typing terms (see \cref{fig:grammar-val} for the different type of contexts used in the typing judgment). In fact, the only place where holes are introduced, is the left-hand side $[[v2]]$ in an ampar $[[H ⟨ v2 ❟ v1 ⟩]]$, in \rref{Ty-val-Ampar}.

Specifically, holes come from the operator $\ottshname{\destminus^{\scriptscriptstyle\text{-}1} }$, which represents the matching hole bindings for a set of destination bindings. It is a partial operation on destination-binding contexts defined pointwise as:\quad$[[-⁻¹ ({ - h : ¹ν ⌊ T ⌋ n })]] = [[{ + h : T n }]]$.
Note that $\ottshname{\destminus^{\scriptscriptstyle\text{-}1} }$ is undefined if any of the bindings has a mode other than $[[¹ν]]$.

Furthermore, in \rref{Ty-val-Ampar}, the holes and the corresponding destination are bound: this is how we ensure that, indeed, there's one destination per hole and one hole per destination.

On the other hand, both sides of the ampar may also contain stored destinations from other scopes, represented by $[[¹↑·D1]]$ and $[[D2]]$ in the respective typing contexts of $[[v1]]$ and $[[v2]]$\unsure{Not sure whether we should explain why $[[D1]]$ is offset by $[[¹↑]]$ in the premise but not in conclusion. It's hard to come up with an intuitive narrative.}.

\TODO{Revisit LinOnly / FinAgeOnly ?}

The properties $\mathtt{LinOnly}~[[D3]]$ and $\mathtt{FinAgeOnly}~[[D3]]$ are true given that $[[-⁻¹ D3]]$ is a valid typing context, so are not really a new restriction on $[[D3]]$. They are mostly used to ease the mechanized proof of type safety for the system.\improvement{We haven't defined what LinOnly and FinAgeOnly mean. This is intuitive, but still. Can we simply remove LinOnly and FinOnly from the rule? This way we can remove this paragraph}

\paragraph{Other salient points}
We don't distinguish values with holes from fully-defined values at the syntactic level: instead types prevent holes from being read. In particular, while values are typed in contexts $[[G]]$ allowing both destination and hole bindings, when using a value as a term in \rref{Ty-term-Val}, it's only allowed to have free destinations, but no free holes.

Notice, also, that values can't have free variables, since contexts $[[G]]$ only contain hole and destination bindings, no variable binding. That values are closed is a standard feature of denotational semantics or abstract machine semantics. This is true even for function values (\rref{Ty-val-Fun}), which, also is prevented from containing free holes. Since a function's body is unevaluated, it's unclear what it'd mean for a function to contain holes; at the very least it'd complicate our system a lot, and we are unaware of any benefit supporting free holes in function could bring.

One might wonder how we can represent a curried function $[[ˢλ x ¹ν ⟼ ˢλ y ¹ν ⟼ x concat y]]$ as the value level, as the inner abstraction captures the free variable $[[x]]$. The answer is that such a function, at value level, is encoded as $[[ᵛλ x ¹ν ⟼ from⧔' (alloc ►map d ⟼ d ⨞ ( λ y ¹ν ⟼ x concat y))]]$, where the inner closure is not yet in value form. As the form $[[d ⨞ ( λ y ¹ν ⟼ x concat y)]]$ is part of term syntax, it's allowed to have free variable $[[x]]$.

\TODO{Revisit this paragraph}

Rules \rref*{Ty-val-Hole} and \rref*{Ty-val-Dest} are interesting. The mode must be exactly $[[¹ν]]$: there is no mode weakening for hole or destinations. Typing of value keeps track precisely of holes and destinations during evaluation. Which is what we need to make sure that holes are written before they are read.

Consequently the mode $[[n]]$ of a hole binding $[[{ + h : T n }]]$ arises precisely when a structure with holes has exponentials e.g. $[[ᴇ ων +h]]$. It means that only a value with mode $[[n]]$ (more precisely, a value typed in a context of the form $[[n · G]]$) can be written to $[[+h]]$.

Destination bindings $[[{ - h : m ⌊ T ⌋ n }]]$, on the other hand, mentions two modes: $[[m]]$ and $[[n]]$; $[[m]]$ is the mode of the destination as a value: it tracks on the age of $[[-h]]$. Whereas $[[n]]$ is part of the destination's type $[[⌊ T ⌋ n]]$\improvement{(Yann) I know it's just a phrasing, but as it is it sounds to naively contradict the intro of the section which says explicitly that modes aren't part of types, which got me a bit surprised in the first read. (Arnaud) I don't think we're saying this anymore} and means that only values with mode $[[n]]$ can fill $[[-h]]$. In a well-typed closed program the $[[m]]$ can never be of multiplicity $[[ω]]$ or age $[[∞]]$; a destination is always linear and of finite age.

\subsection{Evaluation contexts and commands}\label{ssec:ectxs}\label{ssec:ty-ectxs-cmd}

The semantics of \destcalculus{} is given using small-step reductions on a pair $[[ C[t] ]]$ of an evaluation context $[[C]]$, and an (extended) term $[[t]]$ under focus. We call such a pair $[[ C[t] ]]$ a \emph{command}, borrowing the terminology from~\cite{herbelin_curien_2000}. We use the notation usually reserved for one-hole contexts because it makes most reduction rules familiar, but it's important to keep in mind that $[[ C[t] ]]$ is formally a pair, which won't always have a clear corresponding term.

The intuition behind our using such commands is that destination actually require a very tame notion of state. So tame, in fact, that we can simply represent writing to a hole by a mere substitution in the evaluation context.

\TODO{Fix overflowing figure}

\begin{codefig}{\caption{Grammar for evaluation contexts}\label{fig:grammar-ectxs}}{\setlength{\arraycolsep}{1ex}
\!\!\!\begin{array}{rrl}
[[c]] &::=& [[t' ⬜]] \grammsep [[⬜ v]] \grammsep [[⬜ ; u]] \\
      &|\,& [[ ⬜ ►case m { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } ]] \grammsep [[⬜ ►case m ( x1 , x2 ) ⟼ u]] \grammsep [[⬜ ►case m ᴇ n x ⟼ u]] \\
      &|\,& [[⬜ ►map x ⟼ t']] \grammsep [[ to⧔ ⬜ ]] \grammsep [[ from⧔ ⬜ ]] \\
      &|\,& [[ ⬜ ⨞ () ]] \grammsep [[ ⬜ ⨞ Inl ]] \grammsep [[⬜ ⨞ Inr]] \grammsep [[⬜ ⨞ (,)]] \grammsep [[⬜ ⨞ ᴇ m]] \grammsep [[⬜ ⨞ ( λ x m ⟼ u )]] \grammsep [[⬜ ⨞· t']] \grammsep [[v ⨞· ⬜]] \grammsep [[⬜ ◀ t']] \grammsep [[v ◀ ⬜]]\\
      &|\,& [[ H ᵒᵖ⟨ v2 ❟ ⬜ ⟩ ]] \quad\quad\textit{(open ampar focusing component)} \\
&&\\
[[C]] &::=& [[ ⬜ ]] \grammsep [[C ∘ c]] \grammsep [[C [ h ≔ H v ] ]]
\end{array}
}\end{codefig}

The grammar of evaluation contexts is given in~\cref{fig:grammar-ectxs}. An evaluation context $[[C]]$ is the composition of an arbitrary number of focusing components $[[c1]], [[c2]]\ldots$. We chose to represent this composition explicitly using a stack, instead of a meta-operation that would only let us access its final result. As a result, focusing and defocusing operations are made explicit in the semantics, resulting in a more verbose but simpler proof. It is also easier to imagine how to build a stack-based interpreter for such a language.

Focusing components are all directly derived from the term syntax, except for the \emph{open ampar} focusing component $[[H ᵒᵖ⟨ v2 ❟ ⬜ ⟩]]$. This focusing component indicates that an ampar is currently being $\ottkw{map}$ped on, with its left-hand side $[[v2]]$ (the structure being built) being attached to the open ampar focusing component, while its right-hand side (containing destinations) is either in subsequent focusing components, or in the term under focus. Ampars being open during the evaluation of $\ottkw{map}$'s body and closed back afterwards is the counterpart to the notion of scopes in the typing rules.

We introduce a special substitution $[[ C[h ≔ H v] ]]$ that is used to update structures under construction that are attached to open ampar focusing components in the stack. Such a substitution is triggered when a destination $[[-h]]$ is filled in the term under focus, and results in the value $[[v]]$ (that may contain holes itself, e.g. if it is a hollow constructor $[[( +h1, +h2 )]]$) being written to the hole $[[+h]]$ (that must appear somewhere on an open ampar focusing component). The set $[[H]]$ tracks the potential hole names introduced by value $[[v]]$, and is used to update the hole name set of the ampar where $[[h]]$ lives:
\[\begin{array}{rcll}
  [[ (C ∘ {h} ⨆ H ᵒᵖ⟨ v2 ❟ ⬜ ⟩) [h ≔ H' v'] ]] &=& [[C ∘ H ⨆ H' ᵒᵖ⟨ v2[ h ≔ H' v' ] ❟ ⬜ ⟩ ]] &\\
  [[ (C ∘ c) [h ≔ H' v'] ]] &=& [[ C[h ≔ H' v'] ∘ c ]]&\textit{otherwise}
\end{array}\]

Evaluation contexts $[[C]]$ are typed in a context $[[D]]$ that can only contains destination bindings. As we can see in \rref{Ty-cmd}, $[[D]]$ is exactly the typing context that the term $[[t]]$ has to use to form the command $[[ C[t] ]]$.

In other words, while $[[P ⊢ t : T]]$ \emph{requires} the binding in context $[[P]]$, $[[D ⊣ C : T ↣ U0]]$ \emph{provides} the bindings in $[[D]]$. The typing rules for evaluation contexts $[[C]]$ and commands $[[ C[t] ]]$ are presented in~\cref{fig:ty-ectxs-cmd}.

\TODO{Fix overflowing figure}

\begin{ottfig}[p]{\caption{Typing rules for evaluation contexts and commands}\label{fig:ty-ectxs-cmd}}
\ottdefnTyXXectxs{}
\ottdefnTy{}
\end{ottfig}

An evaluation context has a context type $[[T]]\ottstype{\rightarrowtail}[[U0]]$. The meaning of $[[C]][[:]] [[T]]\ottstype{\rightarrowtail}[[U0]]$ is that given $[[t]][[:]][[T]]$, $[[ C[t] ]]$ returns a value of type $[[U0]]$. Composing an evaluation context $[[C]][[:]][[T]]\ottstype{\rightarrowtail}[[U0]]$ with a new focusing component never affects the type $[[U0]]$ of the future command; only the type $[[T]]$ of the focus is altered.

All typing rules for evaluation contexts can be derived systematically from the ones for the corresponding term (except for the rule \rref*{Ty-ectxs-OpenAmpar} that is a truly new form). Let's take the rule \rref*{Ty-ectxs-PatP} as an example:

\medskip

\sidebysidecodehere{t}{0.45}{
\drule{Ty-term-PatP}
}{
\drule{Ty-ectxs-PatP}
}

\medskip

\begin{itemize}
  \item the typing context $[[m·D1,D2]]$ in the premise for $[[C]]$ corresponds to $[[m·P1 + P2]]$ in the conclusion of \rref*{Ty-term-PatP};
  \item the typing context $[[D2,{ x1 : m T1 },{ x2 : m T2 }]]$ in the premise for term $[[u]]$ corresponds to the typing context $[[P2,{ x1 : m T1 },{ x2 : m T2 }]]$ for the same term in \rref*{Ty-term-PatP};
  \item the typing context $[[D1]]$ in the conclusion for $[[C ∘ (⬜ ►case m (x1 , x2) ⟼ u) ]]$ corresponds to the typing context $[[P1]]$ in the premise for $[[t]]$ in \rref*{Ty-term-PatP} (the term $[[t]]$ is located where the focus $[]$ is in \rref*{Ty-ectxs-OpenAmpar}).
\end{itemize}

We think of the typing rule for an evaluation context as a rotation of the typing rule for the associated term, where the typing contexts of one subterm and the conclusion are swapped, an the typing contexts of the other potential subterms are kept unchanged (with the difference that typing contexts for evaluation contexts are of shape $[[D]]$ instead of $[[P]]$).

\subsection{Small-step semantics}\label{ssec:sem}

We equip \destcalculus{} with small-step semantics. There are three sorts of semantic rules:
\begin{itemize}
  \item focus rules, where we focus on a subterm of a term, by pushing a corresponding focusing component on the stack $[[C]]$;
  \item unfocus rules, where the term under focus is in fact a value, and thus we pop a focusing component from the stack $[[C]]$ and transform it back to the corresponding term so that a redex appears (or so that another focus/unfocus rule can be triggered);
  \item reduction rules, where the actual computation logic takes place.
\end{itemize}

% \ExplSyntaxOn
% \NewDocumentCommand{\transformsemname}{m}
% {
%   \tl_set:Nn \l_tmpa_tl { #1 } % Store the input string in a temporary variable
% %  \regex_replace_all:nnN { \\[a-zA-Z]- } { \1 } \l_tmpa_tl
%   \regex_replace_once:nnN { (.+) - Red } { Red - \1 } \l_tmpa_tl % Perform the regex replacement
%   \regex_replace_once:nnN { (.+) - Focus } { Focus - \1 } \l_tmpa_tl % Perform the regex replacement
%   \regex_replace_once:nnN { (.+) - Unfocus } { Unfocus - \1 } \l_tmpa_tl % Perform the regex replacement
%   \regex_replace_once:nnN { (.+) - Unfocus } { Unfocus - \1 } \l_tmpa_tl % Perform the regex replacement
%   \l_tmpa_tl % Output the transformed string
% }
% \ExplSyntaxOff

\newlength{\tempwidth}
\newcommand{\ifnonempty}[2]{%
  \settowidth{\tempwidth}{#1}%
  \ifthenelse{\lengthtest{\tempwidth < 1ex}}{}{#2}
}

\bgroup
\renewcommand\arraystretch{1.4}
\renewcommand\ottaltinferrule[4]{
  % #4 is conclusion
  % #3 is premise
  % #1 is rule name
  %  & \text{#1}
  \ensuremath{#4} \ifnonempty{\ensuremath{#3}}{\quad\textit{when}\quad\ensuremath{#3}} \\
}
Here the focus, unfocus, and reduction rules for \textsc{PatP}:
{\[\begin{array}{ll}\drule{Focus-PatP}
\drule{Unfocus-PatP}
\drule{Red-PatP}
\end{array}\]}
\egroup

Rules are triggered in a purely deterministic fashion; once a subterm is a value, it cannot be focused on again. As focusing and defocusing rules are entirely mechanical (they are just a matter of pushing and popping a focusing component on the stack), we only present the set of reduction rules for the system in~\cref{fig:sem}, but the whole system is included in the annex (see~\cref{fig:sem-full1,fig:sem-full2}).

\begin{ottfig}{\caption{Small-step semantics}\label{fig:sem}}
\bgroup
\renewcommand\arraystretch{1.4}
\renewcommand\ottaltinferrule[4]{
  % #4 is conclusion
  % #3 is premise
  % #1 is rule name
  %  & \text{#1}
  \ensuremath{#4} & \text{\textsc{#1}} \\
}
\makeatletter
\renewenvironment{drulepar}[3][\relax]
  {\ifx#1\relax\else\def\ottalt@rulesection@prefix{#1-}\fi
  \drulesectionhead{#2}{#3}$\!\!\!\array{ll}}
  {\endarray$}
\makeatother
\drules{$[[C [ t ] ⟶ C' [ t' ] ]]$}{Small-step evaluation of commands}{%
Red-App,
Red-PatU,
Red-PatL,
Red-PatR,
Red-PatP,
Red-PatE,
Red-ToA,
Red-FromA,
Red-Alloc,
Red-FillU,
Red-FillF,
Red-FillL,
Red-FillR,
Red-FillE,
Red-FillP,
Red-FillComp,
Red-FillLeaf,
Open-Ampar,
Close-Ampar}
\egroup
\vspace*{-0.5cm}
\[
\text{\textit{where}}\quad\left\{\begin{array}{rcl}
[[h']] &=& [[max(hnames(C) ∪ {h}) + 1]]\\
[[h'']] &=& [[max(H ∪ (hnames(C) ∪ {h})) + 1]] \\
[[h''']] &=& [[max(H ∪ hnames(C)) + 1]]
\end{array}\right.\]
\end{ottfig}

Reduction rules for function application, pattern-matching, $\ottkw{to}_{\ottkw{\ltimes} }$ and $\ottkw{from}_{\ottkw{\ltimes} }$ are straightforward.

All reduction rules for destination-filling primitives trigger a memory write on hole $[[+h]]$; we model this as a special substitution $[[ C[h ≔ H v] ]]$ on the evaluation context $[[C]]$. \rref*{Red-FillU} and \rref*{Red-FillF} do not create any new hole; they only write a value to an existing one. On the other hand, rules \rref*{Red-FillL}, \rref*{Red-FillR}, \rref*{Red-FillE} and \rref*{Red-FillP} all write a hollow constructor to the hole $[[h]]$, that is to say a value containing holes itself. Thus, we need to generate fresh names for these new holes, and also return a destination for each new hole with a matching name.

The substitution $[[ C[h ≔ H v] ]]$ should only be performed if $[[h]]$ is a globally unique name; otherwise we break the promise of a write-once memory model. To this effect, we allow name shadowing while an ampar is closed, but as soon as an ampar is open, it should have globally unique hole names. This restriction is enforced by premise $[[hnames(C)]] ~\mathtt{\#\#}~ [[hnames(D3)]]$ in rule \rref*{Ty-ectxs-OpenAmpar} for the open ampar focusing component that is created during reduction of $\ottkw{map}$. Likewise, any hollow constructor written to a hole should also have globally unique hole names. For simplicity's sake, we assume that hole names are natural numbers.

\TODO{Fix renaming with new defs for $[[h']]$, $[[h'']]$...}

To obtain globally fresh names, in the premises of the corresponding rules, we first pose\\ $[[h']] = [[max(hnames(C) ∪ {h}) + 1]]$ to find the next unused name. Then we use either the \emph{shifted set}\\ $[[H ⩲ h']] \btriangleq \{ [[h+h']]~|~[[h]]\in [[H]] \}$ or the \emph{conditional shift operator}:
$$
[[h [H ⩲ h'] ]] \btriangleq \left\{\begin{array}{ll}[[h+h']] & \textit{if}~[[h]]\in[[H]]\\[[h]] & \textit{otherwise}\end{array}\right.
$$
We extend $\smallbullet\ottshname{[}[[H ⩲ h']]\ottshname{]}$ to arbitrary values, extended terms, and typing contexts in the obvious way (keeping in mind that $[[H' ⟨ v2 ❟ v1 ⟩]]$ binds the names in $[[H']]$).


Rules \rref*{Open-Ampar} and \rref*{Close-Ampar} dictate how and when a closed ampar (a value) is converted to an open ampar (a focusing component) and vice-versa, and they make use of the shifting strategy we've just introduced. With \rref*{Open-Ampar}, the hole names bound by the ampar gets renamed to fresh ones, and the left-hand side gets attached to the focusing component $[[H⩲h' ᵒᵖ⟨ v2[H⩲h'] ❟ ⬜⟩]]$ while the right-hand side (containing destinations) is substituted in the body of the $\ottkw{map}$ statement (which becomes the new term under focus). The rule \rref*{Close-Ampar} triggers when the body of a $\ottkw{map}$ statement has reduced to a value. In that case, we can close the ampar, by popping the focusing component from the stack $[[C]]$ and merging back with $[[v2]]$ to form a closed ampar again.

In rule \rref*{Red-FillComp}, we write the left-hand side $[[v2]]$ of a closed ampar $[[H ⟨ v2 ❟ v1 ⟩]]$ to a hole $[[+h]]$ that is part of a structure with holes somewhere inside $[[C]]$. This effectively results in the composition of two structures with holes. Because we dissociate $[[v2]]$ and $[[v1]]$ that were previously bound together by the ampar connective ($[[v2]]$ is merged with another structure, while $[[v1]]$ becomes the new focus), their hole names are no longer bound, and thus, we need to make them globally unique, as we do when an ampar is opened with $\ottkw{map}$. The renaming is carried out by the conditional shift $[[v2[H ⩲ h''] ]]$ and $[[v1[H ⩲ h''] ]]$.

\paragraph{Type safety} With the semantics now defined, we can state the usual type safety theorems:

\begin{thm}[Type preservation]
  If $[[⊢ C [t] : T]]$ and $[[C[t] ⟶ C'[t'] ]]$ then $[[⊢ C' [t'] : T]]$.
\end{thm}

\begin{thm}[Progress]
  If $[[⊢ C [t] : T]]$ and $\forall [[v]], [[C [t] ]] \neq [[ ⬜[v] ]]$ then $\exists [[C']], [[t']].~[[ C [t] ⟶ C' [t'] ]]$.
\end{thm}

A command of the form $[[ ⬜[v] ]]$ cannot be reduced further, as it only contains a fully determined value, and no pending computation. This it is the stopping point of the reduction, and any well-typed command eventually reaches this form.

\section{Formal proof of type safety}\label{sec:formal-proof}

We've proved type preservation and progress theorems with the Coq proof assistant. At time of writing, we have assumed, rather than proved, the substitution lemmas. Turning to a proof assistant was a pragmatic choice: the context handling in \destcalculus{} can be quite finicky, and it was hard, without computer assistance, to make sure that we hadn't made mistakes in our proofs. The version of \destcalculus{} that we've proved is written in Ott~\cite{sewell_ott_2007}, the same Ott file is used as a source for this article, making sure that we've proved the same system as we're presenting; though some visual simplification is applied by a script to produce the version in the article.

Most of the proof was done by an author with little prior experience with Coq. This goes to show that Coq is reasonably approachable even for non-trivial development. The proof is about 6000 lines long, and contains nearly 350 lemmas. Many of the cases of the type preservation and progress lemmas are similar. To handle such repetitive cases, the use of a large-language-model based autocompletion system has proven quite effective.

Binders are the biggest problem. We've largely managed to make the proof to be only about closed terms, to avoid any complication with binders. This worked up until the substitution lemmas, which is the reason why we haven't proved them in Coq yet (that and the fact that it's much easier to be confident in our pen-and-paper proofs for those).

The proofs aren't particularly elegant. For instance, we don't have any abstract formalization of semirings: it was more expedient to brute-force the properties we needed by hand. We've observed up to 232 simultaneous goals, but a computer makes short work of this: it was solved by a single call to the \verb|congruence| tactic. Nevertheless there are a few points of interest:
\begin{itemize}
\item We represent context as finite-domain functions, rather than as syntactic lists. This works much better when defining sums of context. There are a handful of finite-function libraries in the ecosystem, but we needed finite dependent functions (because the type of binders depend on whether we're binding a variable name or a hole name). This didn't exist, but for our limited purpose, it ended up not being too costly rolling our own. About 1000 lines of proofs. The underlying data type is actual functions, this was simpler to develop, but equality is more complex than with a bespoke data type.
\item Addition of context is partial since we can only add two binding of the same name if they also have the same type. Instead of representing addition as a binary function to an optional context, we represent addition as a total function to contexts, but we change contexts to have faulty bindings on some names. This simplifies reasoning about properties like commutativity and associativity, at the cost of having well-formedness preconditions in the premises of typing rules as well as some lemmas.
\end{itemize}

Mostly to simplify equalities, we assumed a few axioms: functional extensionality, classical logic, and indefinite description:

\begin{verbatim}
Axiom constructive_indefinite_description :
    forall (A : Type) (P : A->Prop), (exists x, P x) -> { x : A | P x }.
\end{verbatim}
Again this isn't particularly elegant, we could have avoided some of these axioms at the price of more complex development. But for the sake of this article, we decided to favor expediency over elegance.

% The inference rules produced by Ott aren't conducive to using setoid equality. This turned out to be a problem with our type for finite function:

% \begin{verbatim}
% Record T A B := {
%     underlying :> forall x:A, option (B x);
%     supported : exists l : list A, Support l underlying;
%   }.
% \end{verbatim}
% where \verb+Support l f+ means that \verb+l+ contains the domain of \verb+f+. To make the equality of finite function be strict equality \verb+eq+, we assumed functional extensionality and proof irrelevance. In some circumstances, we've also needed to list the finite functions' domains. But in the definition, the domain is sealed behind a proposition, so we also assumed classical logic as well as indefinite description:

% \begin{verbatim}
% Axiom constructive_indefinite_description :
%     forall (A : Type) (P : A->Prop), (exists x, P x) -> { x : A | P x }.
% \end{verbatim}
% Together, they let us extract the domain from the proposition. Again this isn't particularly elegant, we could have avoided some of these axioms at the price of more complex development. But for the sake of this article, we decided to favor expediency over elegance.


\section{Implementation of \destcalculus{} using in-place memory mutations}\label{sec:implementation}

The formal language presented in~\cref{sec:syntax-type-system,sec:ectxs-sem} is not meant to be implemented as-is.

First, \destcalculus{} doesn't have recursion, this would have obscured the presentation of the system. However, adding a standard form of recursion doesn't create any complication.

Secondly, ampars are not managed linearly in \destcalculus{}; only destinations are. That is to say that an ampar can be wrapped in an exponential, e.g. $[[ˢᴇ ων {h} ˢ⟨ ༼ˢ0 ˢ:: +h༽ ❟ -h ⟩]]$ (representing a non-linear difference list $0 \ottsctor{::} \holesq$), and then used twice, each time in a different way:
\codehere{[[
༼ˢᴇ ων {h} ˢ⟨ ˢ0 ˢ:: +h ❟ -h ⟩༽ ►case ¹ν ᴇ ων x ⟼⮒
‥‥let x1 ≔ x append ˢ1 in⮒
‥‥let x2 ≔ x append ˢ2 in⮒
‥‥‥‥toList (x1 concat x2)
]]\\[\interdefskip][[⟶*]][[༼ˢ0 ˢ:: ༼ˢ1 ˢ:: ༼ˢ0 ˢ:: ༼ˢ2 ˢ:: ˢ[]༽༽༽༽ ]]}

It may seem counter-intuitive at first, but this program is valid and safe in \destcalculus{}. Thanks to the renaming discipline we detailed in~\cref{ssec:sem}, every time an ampar is $\ottkw{map}$ped over, its hole names are renamed to fresh ones. One way we can support this is to allocate a fresh copy of $[[x]]$ every time we call $\ottkw{append}$ (which is implemented in terms of $\ottkw{map}$), in a copy-on-write fashion. This way filling destinations is still implemented as mutation.

However, this is a long way from the efficient implementation promised in \cref{sec:working-with-dests}. Copy-on-write can be optimized using fully-in-place functional programming in the style of~\cite{lorenzen_fp_2023}, where, using reference counting, we don't need to perform a copy when the difference list isn't aliased.

An alternative is to refine the linear type system further in order to guarantee that ampars are unique and avoid copy-on-write altogether. For that we follow a recipe proposed by~\cite{spiwack_linearly_2022} and introduce a new type $[[Token]]$, together with primitives $\ottkw{dup}$ and $\ottkw{drop}$ (remember that unqualified arrows have mode $[[¹ν]]$, so are linear):

\codehere{\phantom{a}\!\!\!\!\!\!\begin{array}[t]{l}%
\ottkw{dup} ~\pmb{:}~ [[Token ¹ν → Token ⨂ Token]]\\[\interdefskip]
\ottkw{drop} ~\pmb{:}~ [[Token ¹ν → ①]]\\[\interdefskip]
[[allocIP]] ~\pmb{:}~ [[Token ¹ν → T ⧔ ⌊ T ⌋ ¹ν]]\\[2\interdefskip]
[[allocCoW]] ~\pmb{:}~ [[T ⧔ ⌊ T ⌋ ¹ν]]
\end{array}}

We now have two possible allocation primitives: the new one with an in-place mutation memory model ($\ottkw{ip}$), that has to be managed linearly, and the old one that doesn't have to used linearly, and features a copy-on-write ($\ottsctor{cow}$) memory model.

% Such a token can be duplicated using $\ottkw{dup}$, but as soon as it is used to create an ampar, that ampar cannot be duplicated itself. Indeed, if the ampar were used twice, 
% that infects the ampar returned by $[[allocIP]]$

Ampar produced by $[[allocIP]]$ have a linear dependency on a linear $[[tokk]]$ variable. If an ampar produced by $[[allocIP tokk]]$ were to be used twice in a block $[[t]]$, then $[[t]]$ would require a typing context $\{[[{tokk : ων Token}]]\}$, that itself would require $[[tok0]]$ to have multiplicity $[[ω]]$ too. Thus the program would be rejected.

Having closed programs to typecheck in non-empty context $\{[[{tok0 : ¹∞ Token}]]\}$ is a slightly more ergonomic solution than adding a primitive function $\ottkw{withToken} ~\pmb{:}~ [[(Token ¹∞ → !ω∞ T) ¹ν → !ω∞ T]]$ as it is done in~\cite{bagrel_destination-passing_2024}.

In \destcalculus{} with $[[Token]]$s and $[[allocIP]]$, as ampars are managed linearly, we can change the allocation and renaming mechanisms:
\begin{itemize}
  \item the hole name for a new ampar is chosen fresh right from the start (this corresponds to a new heap allocation);
  \item adding a new hollow constructor still require freshness for its hole names (this corresponds to a new heap allocation too);
  \item $\ottkw{map}$ping over an ampar and filling destinations or composing two ampars using $\triangleleft\mycirc$ no longer require any renaming: we have the guarantee that the all the names involved are globally fresh, and can only be used once, so we can do in-place memory updates.
\end{itemize}

We decided to omit the linearity aspect of ampars in \destcalculus{} as it obfuscates the presentation of the system without adding much to the understanding of the latter.

\section{Related work}\label{sec:related-work}

\unsure{Subsection for each work seems a little heavyweight. On the other hand the italic paragraphs seem too lightweight. I'm longing for the days of paragraph heading in bold.}

\subsection{Destination-passing style for efficient memory management}\label{ssec:shaikhha-dps}

In~\cite{shaikhha_destination-passing_2017}, the authors present a destination-based intermediate language for a functional array programming language. They develop a system of destination-specific optimizations and boast near-C performance.

This is the most comprehensive evidence to date of the benefit of destination-passing style for performance in functional programming languages. Although their work is on array programming, while this article focuses on linked data structure. They can therefore benefit of optimizations that are perhaps less valuable for us, such as allocating one contiguous memory chunk for several arrays.\info{(Yann) This could be nuanced: allocating deeply nested trees like ASTs with a bump allocator so that they are packed in memory can also be beneficial, even if they are "linked" data structures, because of cache-friendlyness, I suppose}

The main difference between their work and ours is that their language is solely an intermediate language: it would be unsound to program in it manually. We, on the other hand, are proposing a type system to make it sound for the programmer to program directly with destinations.

We consider that these two aspects complement each other: good compiler optimization are important to alleviate the burden from the programmer and allowing high-level abstraction; having the possibility to use destinations in code affords the programmer more control would they need it.

\subsection{Tail modulo constructor}\label{ssec:tmc}

Another example of destinations in a compiler's optimizer is~\cite{bour_tmc_2021}. It's meant to address the perennial problem that the map function on linked lists isn't tail-recursive, hence consumes stack space. The observation is that there's a systematic transformation of functions where the only recursive call is under a constructor to a destination-passing tail-recursive implementation.

Here again, there's no destination in user land, only in the intermediate representation. However, there is a programmatic interface: the programmer annotates a function like
\begin{verbatim}
let[@tail_mod_cons] rec map =
\end{verbatim}
to ask the compiler to perform the translation. The compiler will then throw an error if it can't. This way, contrary to the optimizations in~\cite{shaikhha_destination-passing_2017}, this optimization is entirely predictable.

This has been available in OCaml since version 4.14. This is the one example we know of of destinations built in a production-grade compiler. Our \destcalculus{} makes it possible to express the result tail-modulo-constructor in a typed language. It can be used to write programs directly in that style,  or it could serve as a typed target language for and automatic transformation. On the flip-side, tail modulo constructor is too weak to handle our difference lists or breadth-first traversal examples.

\subsection{A functional representation of data structures with a hole}\label{ssec:minamide}

The idea of using linear types to let the user manipulate structures with holes safely dates back to~\cite{minamide_functional_1998}. Our system is strongly inspired by theirs. In their system, we can only compose functions that represent data structures with holes, but we can't pattern-match on the result; just like in our system we cannot act on the left-hand side of $[[S ⧔ T]]$, only the right hand part.

In~\cite{minamide_functional_1998}, it's only ever possible to represent structures with a single hole. But this is a rather superficial restriction. The author doesn't comment on this, but we believe that this restriction only exists for convenience of the exposition: the language is lowered to a language without function abstraction and where composition is performed by combinators. While it's easy to write a combinator for single-argument-function composition, it's cumbersome to write combinators for functions with multiple arguments. But having multiple-hole data structures wouldn't have changed their system in any profound way.

The more important difference is that while their system is based on a type of linear functions, our is based on the linear logic's par combinator. This, in turns, lets us define a type of destinations which are representations of holes in values, which~\cite{minamide_functional_1998} doesn't have. This means that using~\cite{minamide_functional_1998} --- or the more recent but similarly expressive system from~\cite{lorenzen_searchtree_2024} --- one can implement the examples with difference lists and queues from~\cref{ssec:efficient-queue}, but they can't do our breadth-first traversal example from~\cref{sec:bft}, since storing destinations in a data structure is the essential ingredient of this example.

This ability to store destination does come at a cost though: the system needs this additional notion of ages to ensure that destinations are use soundly. On the other hand, our system is strictly more general, in that the system from~\cite{minamide_functional_1998} can be embedded in \destcalculus{}, and if one stays in this fragment, we're never confronted with ages. Ages only show up when writing programs that go beyond Minamide's system.

\subsection{Destination-passing style programming: a Haskell implementation}\label{ssec:dps-haskell}

In~\cite{bagrel_destination-passing_2024}, the author proposes a system much like ours: it has a destination type, and a par-like construct (that they call $\ottstype{Incomplete}$), where only the right-hand side can be modified; together these two elements give extra expressiveness to the language compared to~\cite{minamide_functional_1998}.

In their system, $[[d ◀ t]]$ requires $[[t]]$ to be unrestricted, while in \destcalculus{}, $[[t]]$ can be linear. One consequence is that in~\cite{bagrel_destination-passing_2024}, destinations can be stored in data structures but not in data structures with holes; so in order to do a breadth-first search algorithm like in~\cref{sec:bft}, they can't use improved queues like we do. The other consequence is that their system require both primitive constructors and destination-filling primitives; it cannot be bootstrapped with the later alone, as we do in the current article.

However, \cite{bagrel_destination-passing_2024} is implemented in Haskell, which just features linear types. Our system subsumes theirs; but it requires the age system that is more than what Haskell provides. Encoding their system in ours will unfortunately make ages appear in the typing rules.

\subsection{Semi-axiomatic sequent calculus}\label{ssec:sax}

In~\cite{deyoung_sax_2020}, the author develop a system where constructors return to a destination rather than allocating memory. It is very unlike the other systems described in this section in that it's completely founded in the Curry-Howard isomorphism. Specifically it gives an interpretation of a sequent calculus which mixes Gentzen-style deduction rules and Hilbert-style axioms. As a consequence, the par connective is completely symmetric, and, unlike our $[[⌊ T ⌋ ¹ν]]$ type, their dualization connective is involutive.

The cost of this elegance is that computations may try to pattern-match on a hole, in which case they must wait for the hole to be filled. So the semantic of holes is that of a future or a promise. In turns this requires the semantic of their calculus to be fully concurrent. Which is a very different point in the design space.

\section{Conclusion and future work}\label{sec:conclusion}

Using a system of ages in addition to linearity, \destcalculus{} is a purely functional calculus which supports destinations in a very flexible way. It subsumes existing calculi from the literature for destination passing, allowing both composition of data structures with holes and storing destinations in data structures. Data structures are allowed to have multiple holes, and destinations can be stored in data structures that, themselves, have holes. The latter is the main reason to introduce ages and is key to \destcalculus{}'s flexibility.

We don't anticipate that a system of ages like \destcalculus{} will actually be used in a programming language: it's unlikely that destination are so central to the design of a programming language that it's worth baking them so deeply in the type system. Perhaps a compiler that makes heavy use of destinations in its optimizer could use \destcalculus{} as a typed intermediate representation. But, more realistically, our expectation is that \destcalculus{} can be used as a theoretical framework to analyze destination-passing systems: if an API can be defined in \destcalculus{} then it's sound.

In fact, we plan to use this very strategy to design an API for destination passing in Haskell, leveraging only the existing linear types, but retaining the possibility of storing destinations in data structures with holes.

