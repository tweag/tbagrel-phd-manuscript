 
\chapter{Linear $\lambda$-calculus}\label{chap:preli}

\section{From $\lambda$-calculus to linear $\lambda$-calculus}

At the end of the 30s, Church introduced the untyped $\lambda$-calculus as a formal mathematical model of computation. Untyped $\lambda$-calculus is based on the concept of function abstraction and application, and is Turing-complete: in other terms, it has the same expressive power as the empirical model of computation that Turing machines represent.

In 1940, Church defined a typed variant of its original calculus, the simply typed $\lambda$-calculus, or STLC, that give up Turing-completeness but become strongly-normalizing: every well-typed term eventually reduces to a normal form. STLC assign types to terms, and restricts the application of functions to terms of the right type. This restriction is enforced by the typing rules of the calculus. In the following we assume that the reader is familiar with the simply typed lambda calculus, its typing rules, and usual semantics. We also assume some degree of familiarity with natural deduction.

It has been observed by Howard in 1969 that the intuitionistic variant of natural deduction proof system is isomorphic to the simply typed $\lambda$-calculus. This observation relates to prior work by Curry where the former observed that the typed fragment of combinatory logic, another model of computation with similar power, is isomorphic to proof systems like implicational logic and Hilbert deduction systems. These observations led to the Curry-Howard isomorphism, which states that types in a typed $\lambda$-calculus correspond to formulas in a proof system, and terms correspond to proofs of these formulas. The Curry-Howard isomorphism has been later extended to other logics and calculi, and has been a fruitful source of inspiration for research on both the logical and computational side.

In that sense, Girard first introduced Linear Logic, in 1987, and only later studied the corresponding calculus, aka. linear $\lambda$-calculus. Linear logic follows from the observation that in sequent calculus\footnote{a very popular deduction system that is an alternative to natural deduction and that has also been introduced by Gentzen in the 30s}, hypotheses are duplicated or discarded using explicit rules of the system, named \emph{contraction} and \emph{weakening}, in contrast to natural deduction where all that happens implicitly, as it is part of the meta-theory. As a result, it is possible to track the number of times a formula is used by counting the use of these structural rules. Linear logic take this idea further, and deliberately restrict contraction and weakening, so by default, every hypothesis must be used exactly once. Consequently, logical implication $[[T → U]]$ is not part of linear logic, but is replaced by linear implication $[[T ⊸ U]]$, where $[[T]]$ must be used exactly once to prove $[[U]]$. Linear logic also introduces a modality $\ottstype{!}$, pronounced \emph{of course} or \emph{bang}, to allow weakening and contraction on specific formulas: $[[!T]]$ denotes that $[[T]]$ can be used an arbitrary number of times (we say it is \emph{unrestricted}). We say that linear logic is a \emph{substructural} logic because it restricts the use of structural rules of usual logic.

We present in \cref{fig:linlog} the natural deduction formulation of intuitionistic linear logic (\CILL), as it lends itself well to a computational interpretation as a linear $\lambda$-calculus with usual syntax. We borrow the \emph{sequent style} notation of sequent calculus for easier transition into typing rules of terms later. However, as we are in an intuitionistic setting, rules only derive a single conclusion from a multiset of formulas.

\bgroup
\renewcommand\ottaltinferrule[4]{
  \inferrule*[narrower=0.3,right=#1,#2]
    {#3}
    {#4}
}

All the rules of \CILL, except the ones related to the $\ottstype{!}$ modality, are directly taken (and slightly adapted) from natural deduction. $\ottstype{\oplus}$ denotes (additive) disjunction, and $\ottstype{\otimes}$ denotes (multiplicative) conjunction. Hypotheses are represented by multisets $[[P]]$. These multisets keep track of how many times each formula appear in them. The comma operator in $[[P1,P2]]$ is multiset union, so it sums the number of occurrences of each formula in $[[P1]]$ and $[[P2]]$.

Let's focus on the four rules for the $\ottstype{!}$ modality now. The promotion rule \CILL\CSep\CBangProm states that a formula $[[T]]$ can become an unrestricted formula $[[!T]]$ if it only depends on formulas that are themselves unrestricted. This is denoted by the (potentially empty) multiset $[[!P]]$. The dereliction rule \CILL\CSep\CBangDerel states that an unrestricted formula $[[!T]]$ can be used in a place expecting a normal i.e. linear formula $[[T]]$. The contraction rule \CILL\CSep\CBangContr and  weakening rule \CILL\CSep\CBangWeak states respectively that an unrestricted formula $[[!T]]$ can be cloned or discarded at any time.

The linear logic system might appear very restrictive, but we can always\unsure{We might need other connectives for that, such as \emph{with} $\ottstype{\&}$} simulate the usual non-linear natural deduction in \CILL. Girard gives precise rules for such a translation in Section 2.2.6 of~\cite{girard_linear_1995}, whose main idea is to prefix most formulas with $\ottstype{!}$ and encode the non-linear implication $[[T → U]]$ as $[[!T ⊸ U]]$.

\begin{ottfig}{\caption{Natural deduction formulation of intuitionistic linear logic (sequent-style)}\label{fig:linlog}}
\bgroup\renewcommand{\ottdrulename}[1]{\CILL\CSep}
\ottdefnLinMonXXLog{}\egroup
\end{ottfig}

\section{Linear $\lambda$-calculus: a computational interpretation of linear logic}

There exists several possible interpretations of linear logic as a linear $\lambda$-calculus. The first one, named \emph{monadic} presentation of linear $\lambda$-calculus in~\cite{andreoli_linlog_1992}, and denoted \CLOne in this document, is a direct term assignment of the natural deduction rules of \CILL{} given in \cref{fig:linlog}. The syntax and typing rules of this presentation, inspired greatly from the work of~\cite{bierman_linlog_phd_1994}, are given in \cref{fig:linmon-grammar,fig:linmon-ty-term}.

\begin{codefig}{\caption{Grammar of linear $\lambda$-calculus in monadic presentation (\CLOne)}\label{fig:linmon-grammar}}{\setlength{\arraycolsep}{1ex}
\!\!\!\begin{array}{rrl}
       [[v]] &::=& [[λ x ⟼ u]] \grammsep [[()]] \grammsep [[Inl v]] \grammsep [[Inr v]] \grammsep [[( v1 , v2 )]] \grammsep [[ᴇ v]] \\
[[t]], [[u]] &::=& [[v]] \grammsep [[x]] \grammsep [[ˢInl t]] \grammsep [[ˢInr t]] \grammsep [[ˢ( t1 , t2 )]] \grammsep [[ᴇ t]] \grammsep [[t t']] \grammsep [[t ; t']] \\
&|\,& [[ t ►case ¹ν { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } ]] \grammsep [[t ►case ¹ν ( x1 , x2 ) ⟼ u]] \\ &|\,& [[dup t as x1, x2 in u]] \grammsep [[drop t in u]] \grammsep [[derelict t]] \\
&&\\
[[T]], [[U]] &::=& [[T ⊸ U]] \grammsep [[①]] \grammsep [[T1 ⨁ T2]] \grammsep [[T1 ⨂ T2]] \grammsep [[! T]] \\
&&\\
[[P]] &::=& [[{ }]] \grammsep [[{ x ⫶ T }]] \grammsep [[P1 , P2]] \\
\end{array}
}\end{codefig}

\begin{ottfig}{\caption{Typing rules for linear $\lambda$-calculus in monadic presentation (\CLOne)}\label{fig:linmon-ty-term}}
\bgroup\renewcommand{\ottdrulename}[1]{\CLOne\CTy\CSep}
\ottdefnLinMonXXTyXXterm{}\egroup
\end{ottfig}

In \CLOne, $[[P]]$ is now a finite map of variables to types, that can be represented as a set of variable bindings $[[{x ⫶ T}]]$. As usual, duplicated variable names are not allowed in a context $[[P]]$. The comma operator denotes disjoint union for finite maps.

Term grammar for \CLOne{} borrows most of simply typed lambda calculus grammar. In addition, the language has a data constructor/wrapper for unrestricted terms and values, denoted by $[[ᴇ t]]$ and $[[ᴇ v]]$. Elimination of unit type $[[①]]$ is made with $\patu$ operator. Pattern-matching on sum and product types is made with the $\ottkw{case}$ keyword. Finally, we have new operators $\ottkw{dup}$, $\ottkw{drop}$ and $\ottkw{derelict}$ for respective contraction, weakening and dereliction of unrestricted terms of type $[[!T]]$. Promotion of a term to an unrestricted form is made by direct application of constructor $\expcons{}$. For easier presentation, we also introduce syntactic sugar $[[let x ≔ t in u]]$ and encode it as $[[(λ x ⟼ u)(t)]]$.

\section{Implicit structural rules for unrestricted resources}

In the monadic presentation \CLOne, the use of unrestricted terms can become very verbose and unhandy because of the need for explicit contraction, weakening and dereliction. A second and equivalent presentation of our linear $\lambda$-calculus, named \emph{dyadic} presentation or \CLTwo, tend to alleviate this issue by using two typing contexts on each judgment, one for linear variables and one for unrestricted variables. The syntax and typing rules of \CLTwo{} are given in \cref{fig:lindya-grammar,fig:lindya-ty-term}.

\begin{codefig}{\caption{Grammar of linear $\lambda$-calculus in dyadic presentation (\CLTwo)}\label{fig:lindya-grammar}}{\setlength{\arraycolsep}{1ex}
\!\!\!\begin{array}{rrl}
       [[v]] &::=& [[λ x ⟼ u]] \grammsep [[()]] \grammsep [[Inl v]] \grammsep [[Inr v]] \grammsep [[( v1 , v2 )]] \grammsep [[ᴇ v]] \\
[[t]], [[u]] &::=& [[v]] \grammsep [[x]] \grammsep [[ˢInl t]] \grammsep [[ˢInr t]] \grammsep [[ˢ( t1 , t2 )]] \grammsep [[ᴇ t]] \grammsep [[t t']] \grammsep [[t ; t']] \\
&|\,& [[ t ►case ¹ν { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } ]] \grammsep [[t ►case ¹ν ( x1 , x2 ) ⟼ u]] \grammsep [[t ►case ¹ν ᴇ x ⟼ u]] \\
&&\\
[[T]], [[U]] &::=& [[T ⊸ U]] \grammsep [[①]] \grammsep [[T1 ⨁ T2]] \grammsep [[T1 ⨂ T2]] \grammsep [[! T]] \\
&&\\
[[P]] &::=& [[{ }]] \grammsep [[{ x ⫶ T }]] \grammsep [[P1 , P2]] \\
[[Ur]] &::=& [[{ }]] \grammsep [[{ x ⫶ T }]] \grammsep [[Ur1 , Ur2]]
\end{array}
}\end{codefig}

\begin{ottfig}{\caption{Typing rules for linear $\lambda$-calculus in dyadic presentation (\CLTwo)}\label{fig:lindya-ty-term}}
\bgroup\renewcommand{\ottdrulename}[1]{\CLTwo\CTy\CSep}
\ottdefnLinDyaXXTyXXterm{}\egroup
\end{ottfig}

In \CLTwo there is no longer rules for contraction, weakening, and dereliction of unrestricted resources. Instead, each judgment is equipped with a second context $[[Ur]]$ that holds variable bindings that can be used in an unrestricted fashion. The $[[t ►case ¹ν ᴇ x ⟼ u]]$ construct is used to bind a term of type $[[!T]]$ as a variable binding $[[{x ⫶ T}]]$ in the unrestricted context $[[Ur]]$. It's important to note that $[[t ►case ¹ν ᴇ x ⟼ u]]$ is not dereliction: one can still use $[[x]]$ several times within body $[[u]]$, or recreate $[[t]]$ by wrapping $[[x]]$ back as $[[ᴇ x]]$; while that wouldn't be possible in $[[let x ≔ derelict t in u]]$ of \CLOne. Morally, we can view the pair of contexts $[[P]] ; [[Ur]]$ of \CLTwo as a single context $[[P,!Ur]]$ of \CLOne, where $[[!Ur]]$ is the context with the same variable bindings as $[[Ur]]$, except that all types are prefixed by $\ottstype{!}$.

In \CLTwo, contraction for unrestricted resources happens implicitly every time a rule has two subterms as premises. Indeed, the unrestricted context $[[Ur]]$ is duplicated in both premises, unlike the linear context $[[P]]$ that must be split into two disjoint parts. All unrestricted variable bindings are thus propagated to the leaves of the typing tree, that is, the rules with no premises \rref*{\CLTwo\CTy\CSep\CId\textsubscript{Lin}}, \rref*{\CLTwo\CTy\CSep\CId\textsubscript{Ur}}, and \rref*{\CLTwo\CTy\CSep\CUnit}. These three rules discard all bindings of the unrestricted context $[[Ur]]$ that aren't used, performing several implicit weakening steps. Finally, this system has two identity rules. The first one, \rref*{\CLTwo\CTy\CSep\CId\textsubscript{Lin}}, is the usual linear identity: it asks for the variable $[[x]]$ to be in the linear typing context, and later $[[x]]$ cannot be reused in another subterm. The second one, \rref*{\CLTwo\CTy\CSep\CId\textsubscript{Ur}}, is the unrestricted identity: it lets us use the variable $[[x]]$ from the unrestricted typing context in a place where a linear variable is expected, performing a sort of implicit dereliction.

\cite{andreoli_linlog_1992} has a detailed proof that both \CLOne{} and \CLTwo{} are equivalent, in other terms, that a program $[[t]]$ types in the pair of contexts $[[P]] ; [[Ur]]$ in \CLTwo{} if and only if it types in context $[[P,!Ur]]$ in \CLOne.

\section{Back to a single context with the graded modal approach}

So far, we only considered type systems that are linear, but that are otherwise fairly standard with relation to usual simply-typed $\lambda$-calculus. Anticipating on our future needs, further in this document we'll need to encode more information and ensure more invariants throughout the type system than just linearity alone.

Naively, we could just multiply the typing contexts, for each new modality or control axis that we need (linearity being one of them, with two values, either \emph{linear} or \emph{unrestricted}). The problem is, that approach is not really scalable: as we increase the number of axes, in the end, we need one context per combination of value on each axis, so it grows really quickly.

Even without multiple axis, we already have a problem if we want a finer control over linearity. What if we want to allow variables to be used a fixed number of times that isn't just 1 or unlimited? In~\cite{girard_bounded_1992}, Girard considers that \emph{bounded} extension of linear logic, where the number of uses of hypotheses can be restricted to any value aka. multiplicity $[[m]]$ instead of being just linear or unrestricted. For that he extends the $\ottstype{!}$ modality with an index $[[m]]$ that specifies how many times an hypothesis should be used. We say that $\ottstype{!}_{[[m]]}$ is a \emph{graded modality}.

Having a family of modalities $\left(\ottstype{!}_{[[m]]}\right)_{[[m]] \in \ottsmode{M}}$ with an arbitrary number of elements instead of the single $\ottstype{!}$ modality of original linear logic means that we cannot really have a distinct context for each of them as in the dyadic presentation. One solution is to go back to the monadic presentation, where variables carry their modality on their type until the very end where they get used. We would need a new operator to go from $\ottstype{!}_{[[m]]} [[T]]$ to a pair $\ottstype{!}_{[[m]]\ottsmode{-1}} [[T]], [[T]]$ so that we can extract a single use from a value wrapped in a modality allowing several uses. Actually, it gets hairy and unpractical very fast.

Fortunately, there's a way out of this. Instead of having $[[m]]$ be part of the modality and thus of the type of terms, we can bake it in as an annotation on variable bindings. In place of $[[x]]:[[S]],[[y]]:[[! m T]],[[z]]:[[! n U]] \pmb{\vdash} \ldots$, we can have $[[x]]:_{\ottsmode{1}} [[S]], [[y]]:_{[[m]]} [[T]], [[z]]:_{[[n]]} [[U]] \pmb{\vdash} \ldots$ without adding or losing any information. We'll call the new annotations on bindings \emph{modes}. Note that every binding is equipped with a mode $[[m]]$, even linear bindings that previously didn't have modalities on their types\footnote{This uniform approach where every binding receive a mode seems to originate from \cite{ghica_bounded_2014} and \cite{petricek_coeffects_2014}.}. Now, we can completely encode the restrictions and rules of our system by defining operations on modes and by extension, on typing contexts, and use these operations in typing rules, instead of needing extra operators such as $\ottkw{derelict}$ or $\ottkw{dup}$ that need their own typing rules and have to be used explicitly by the user. With that modal approach, we recover a system, like the dyadic one, in which contraction, weakening, and dereliction can be made conveniently implicit, without loosing any control power over resource use, and with no explosion of the number of contexts!

Moreover, we build on the key insight, which seem to originate with~\cite{ghica_bounded_2014}, that equipping the set of modes with a semiring structure is sufficient to express, algebraically, all the typing context manipulation that we need. The idea is to have two operations on modes: \emph{times} $\ottsmode{\cdot}$ that represents what happens to modes when there is composition (e.g. for linearity, if function $[[f]]$ uses its argument $\ottsmode{2}$ times and $[[g]]$ too, then $[[f (g x)]]$ uses $[[x]]$ $\ottsmode{2\cdot 2}$ times), while \emph{plus} $\ottsmode{+}$ describes what happens to modes when a same variable is used in two (or more) subterms (if subterm $[[t]]$ uses $[[x]]$ $\ottsmode{2}$ times and $[[u]]$ uses $[[x]]$ $\ottsmode{3}$ times, then $[[t ; u]]$ uses $[[x]]$ $\ottsmode{2+3}$ times).

We then lift these operations to variable bindings, and then to typing contexts themselves in the following way. We lift \emph{times} so that it can scale a variable binding by a mode $[[n]]$: we pose $[[n·({ x : m T })]] \btriangleq [[{ x : n · m T }]]$. We then extend this operator point-wise to act on whole typing contexts as in $[[n·P]]$, not just single bindings.

We also define typing context \emph{plus} as a partial operation where $[[({ x : m T }) + ({ x : m' T })]] = [[x]]:\!_{\![[m]]\ottsmode{+}[[m']]}[[T]]$ and  $[[({ x : m T }) + P]] = [[{ x : m T },P]]$\hspace*{0.6em}if $[[x]] \notin [[P]]$.

We'll now show what the concrete \emph{modal} presentation for intuitionistic $\lambda$-calculus or \CLm looks like. We will go back to a very simple ringoid\footnote{We still get all the algebraic benefits of \cite{ghica_bounded_2014} even without a zero for our structure.} for modes, that just models linearity equivalently as the previous presentations \CLOne and \CLTwo{}: $[[˥]]$ for variables that must be managed in strict linear fashion, and $[[ɷ]]$ for unrestricted ones. We give the following operation tables:

%\begin{figure}[t]
\begin{center}
\begin{tabular}{|c||c|c|}\hline
$\ottsmode{+}$ & $[[¹]]$ & $[[ω]]$ \\\hhline{|=#=|=|}
$[[¹]]$        & $[[ω]]$ & $[[ω]]$ \\\hline
$[[ω]]$        & $[[ω]]$ & $[[ω]]$ \\\hline
\end{tabular}
\hspace{1cm}
\begin{tabular}{|c||c|c|}\hline
$[[·]]$        & $[[¹]]$ & $[[ω]]$ \\\hhline{|=#=|=|}
$[[¹]]$        & $[[¹]]$ & $[[ω]]$ \\\hline
$[[ω]]$        & $[[ω]]$ & $[[ω]]$ \\\hline
\end{tabular}
\end{center}

Equipped with those, we can move to the grammar and typing rules of \CLm, given in \cref{fig:linmod-grammar,fig:linmod-ty-term}. Constructor for $[[! m T]]$ is now $[[ˢᴇ n t]]$ (instead of $[[ᴇ t]]$ for $[[! T]]$).

\begin{codefig}{\caption{Grammar of linear $\lambda$-calculus in modal presentation (\CLm)}\label{fig:linmod-grammar}}{\setlength{\arraycolsep}{1ex}
\!\!\!\begin{array}{rrl}
       [[v]] &::=& [[ˢλ x m ⟼ u]] \grammsep [[()]] \grammsep [[Inl v]] \grammsep [[Inr v]] \grammsep [[( v1 , v2 )]] \grammsep [[ᴇ n v]] \\
[[t]], [[u]] &::=& [[v]] \grammsep [[x]] \grammsep [[ˢInl t]] \grammsep [[ˢInr t]] \grammsep [[ˢ( t1 , t2 )]] \grammsep [[ˢᴇ n t]] \grammsep [[t t']] \grammsep [[t ; t']] \\
&|\,& [[ t ►case ¹ν { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 } ]] \grammsep [[t ►case ¹ν ( x1 , x2 ) ⟼ u]] \grammsep [[t ►case ¹ν ᴇ n x ⟼ u]] \\
&&\\
[[T]], [[U]] &::=& [[T m → U]] \grammsep [[①]] \grammsep [[T1 ⨁ T2]] \grammsep [[T1 ⨂ T2]] \grammsep [[! n T]] \\
[[m]], [[n]] &::=& [[˥]] \grammsep [[ɷ]] \\
&&\\
[[P]] &::=& [[{ }]] \grammsep [[{ x : m T }]] \grammsep [[P1 , P2]]\\
\end{array}
}\end{codefig}

\begin{ottfig}{\caption{Typing rules for linear $\lambda$-calculus in modal presentation (\CLm)}\label{fig:linmod-ty-term}}
\bgroup\renewcommand{\ottdrulename}[1]{\CLm\CTy\CSep}
\ottdefnLinModXXTyXXterm{}\egroup
\end{ottfig}

In \CLm{} we're back to a single identity rule \rref*{\CLm\CTy\CSep\CId}, that asks for $[[x]]$ to be in the typing context with a mode $[[m]]$ that must be \emph{compatible with a single linear use} (we note $[[˥ ⥶ m]]$). In our ringoid, with only two elements, we have both $[[˥ ⥶ ˥]]$ and $[[˥ ⥶ ɷ]]$, so $[[x]]$ can actually have any mode (either linear or unrestricted, so encompassing both \rref*{\CLTwo\CTy\CSep\CId\textsubscript{Lin}} and \rref*{\CLTwo\CTy\CSep\CId\textsubscript{Ur}}), but in more complex modal systems, not all modes have to be compatible with the unit of the ringoid\footnote{Actually, in the type system for \destcalculus{} detailed in \cref{sec:sec:syntax-type-system}, mode $[[¹↑]]$ is not compatible with unit $[[¹ν]]$.}. Rules \rref*{\CLm\CTy\CSep\CId} and \rref*{\CLm\CTy\CSep\CUnit} also allows to discard any context composed only of unrestricted bindings, denoted by $[[ɷ·P]]$ (equivalent to notation $[[!P]]$ in \CLOne), so they are performing implicit weakening as in \CLTwo.

Every rule of \CLm{} that mentions two subterms uses the newly defined $+$ operator on typing contexts in the conclusion of the rule. If a same variable $[[x]]$ is required in both $[[P1]]$ and $[[P2]]$ (either with mode $[[˥]]$ or $[[ɷ]]$, it doesn't matter), then $[[P1+P2]]$ will contain binding $[[{x : ɷ T}]]$. Said differently, the parent term will automatically deduce wether $[[x]]$ needs to be linear or unrestricted based on how (many) subterms use $[[x]]$, thanks to the $+$ operator. It's a vastly different approach than the linear context split for subterms in \CLOneOrTwo{} and unrestricted context duplication for subterms in \CLTwo. I would argue that it makes the system smoother, and allows for easy extension without changing the typing rules much (compared to the monadic / dyadic presentation that are very specialized to handle linearity/unrestrictedness, and that alone).

Much as in \CLTwo, the exponential modality $\ottstype{!}_{[[n]]}$ is eliminated by a $[[t ►case ¹ν ᴇ n x ⟼ u]]$ expression, that binds the payload to a new variable $[[x]]$ with modality $[[n]]$. The original boxed value can be recreated if needed with $[[ˢᴇ n x]]$; indeed, as in \CLTwo, elimination for $\ottstype{!}_{[[n]]}$ is \emph{not} dereliction.

The last specificity of this system is that the function arrow $\ottstype{\multimap}$ now has a mode $[[m]]$ to which it consumes its argument. Actually that doesn't change the expressivity of the system compared to previous presentations; we would have been just fine with only a purely linear arrow, but because we have to assign a mode to any variable binding in this presentation, then it makes sense to allow this mode $[[m]]$ to be whatever the programmer wants, and not just default to $[[˥]]$. In application rule \rref*{\CLm\CTy\CSep\CApp}, the typing context $[[P1]]$ required to type the argument is scaled in the conclusion of the rule by the mode $[[m]]$ that represent the "number" of use of the argument by the function.

\section{Deep modes: projecting modes through fields of data structures}

In original linear logic from Girard (see \CILL{} and presentation \CLOne{} above), there is only a one-way morphism between $[[!T ⨂ !U]]$ and $[[!(T⨂U)]]$; we cannot go from $[[!(T⨂U)]]$ to $[[!T ⨂ !U]]$. In other terms, an unrestricted pair $[[!(T⨂U)]]$ doesn't allow for unrestricted use of its components. The pair can be duplicated or discarded at will, but to be used, it needs to be derelicted first, to become $[[T⨂U]]$, that no longer allow to duplicate or discard any of $[[T]]$ or $[[U]]$. As a result, $[[T]]$ and $[[U]]$ will have to be used exactly the same number of times, even though they are part of an unrestricted pair!

Situation is no different in \CLTwo{} (resp. \CLm): although the pair of type $[[!(T⨂U)]]$ can be bound in an unrestricted binding $[[{x ⫶ T⨂U}]] \in [[Ur]]$ (resp. $[[{x : ɷ T⨂U}]]$) and be used as this without need for dereliction, when it will be pattern-matched on with \rref*{\CLTwoOrm\CTy\CSep\CPatP}, implicit dereliction will still happen, and linear-only bindings will be made for its components: $[[{x1 ⫶ T},{x2 ⫶ U}]]$ in the linear typing context (resp. $[[{x1 : ˥ T},{x2 : ˥ U}]]$).

It's in fact useful to lift this limitation. One motivation for \emph{deep modes} (in the sense that they propagate throughout a data structure) is that they make it more convenient to write non-linear programs in a linear language. Indeed, in a modal linear $\lambda$-calculus with deep modes (\CLdm), functions of type $[[T ɷ → U]]$ have exactly the same expressive power has ones with type $[[T → U]]$ in STLC. In other terms, any program that is valid in STLC but doesn't abide by linearity can still type in \CLdm{} without any restructuration needed!

Let's take the $\ottkw{fst}$ function as an example, that extracts the first component of a pair. With deep modes in \CLdm{} we are able to write

\codehere{
\newoperator
  {\ottkw{fst}_{\ottkw{dm}}}{[[T⨂U ɷ → T]]}
  {\ottkw{fst}_{\ottkw{dm}}}{[[ˢλ x ɷ ⟼ x ►case ɷ (x1, x2) ⟼ x1]]}
}

as we would do in a non-linear language, like STLC, in which $\ottkw{fst}$ would have type $[[T⨂U → T]]$. On the other hand, in \CLm{} as presented in \cref{fig:linmod-grammar,fig:linmod-ty-term}, we need to indicate individually for each component of the pair that we want them unrestricted (at least for the second one that we intent on discarding), and add extra elimination for the $\ottstype{!}$ modality:

\codehere{
\newoperator
  {\ottkw{fst}_{\ottkw{m}}}{[[T⨂(!ɷ U) ˥ → T]]}
  {\ottkw{fst}_{\ottkw{m}}}{\!\!\!\begin{array}[t]{l}[[
ˢλ x ˥ ⟼ x ►case ¹ν (x1, ux2) ⟼⮒
‥‥༼ux2 ►case ¹ν ᴇ ɷ x2 ⟼ x1༽
]]\end{array}}
}

Adding deep modes to a practical linear language is not a very original take; it has been done in Linear Haskell~\cite{bernardy_linear_2018} and \cite{lorenzen_oxidizing_2024}.
With deep modes, we get the following equivalences:

\codehere{\!\!\!\begin{array}[t]{rcl}
[[!m (T⨂U)]] &\simeq& [[(!m T) ⨂ (!m U)]] \\
[[!m (T⨁U)]] &\simeq& [[(!m T) ⨁ (!m U)]] \\
[[!m (!n T)]] &\simeq& [[!(m·n) T]]
\end{array}}

The only change needed on the grammar is that $\ottkw{case}$ constructs now take a mode $[[m]]$ to which they consume the scrutinee, that is propagated to the field(s) of the scrutinee in the body of the $\ottkw{case}$. The new typing rules for $\ottkw{case}$ are presented in \cref{fig:lindeepmod-ty-term}, all the other rules of linear $\lambda$-calculus with deep modes, \CLdm, are supposed identical to \cref{fig:linmod-ty-term}.

\begin{ottfig}{\caption{Altered typing rules for deep modes in linear $\lambda$-calculus in modal presentation (\CLdm)}\label{fig:lindeepmod-ty-term}}
\bgroup\renewcommand{\ottdrulename}[1]{\CLdm\CTy\CSep}
\ottdefnLinDeepModXXTyXXterm{}\egroup
\end{ottfig}

We observe that the typing context $[[P1]]$ in which the scrutinee types is scaled by $[[m]]$ in the conclusion of all the $\ottkw{case}$ rules. This is very analog to the application rule \rref*{\CLm\CTy\CSep\CApp} : it makes sure that the resources required to type $[[t]]$ are consumed $[[m]]$ times if we want to use $[[t]]$ at mode $[[m]]$. Given that $[[{ x2 : ˥ T2 } ⊢ ˢ((), x2) : ① ⨂ T2]]$ (the pair uses $[[x2]]$ exactly once), if we want to extract the pair components with mode $[[ɷ]]$ to drop $[[x2]]$ (as in $\ottkw{fst}_{\ottkw{dm}}$), then $[[ˢ((), x2) ►case ɷ (x1, x2) ⟼ x2]]$ will require context $[[ɷ·({ x2 : ˥ T2 })]]$ i.e. $[[{ x2 : ɷ T2 }]]$. In other terms, we cannot use parts of a structure made using linear resources in an unrestricted way (as that would break linearity).

The linear $\lambda$-calculus with deep modes, \CLdm, will be the basis for our core contribution that follows in next chapter: the destination calculus \destcalculus{}.

\section{Semantics of linear $\lambda$-calculus (with deep modes)}

Many semantics presentations exist for lambda calculus. In \cref{fig:linsem} I present a small-step reduction system for \CLdm, in \emph{reduction semantics} style inspired from~\cite{felleisen_calculi_1987} and subsequent~\cite{danvy_refocusing_2004,biernacka_syntactic_2007}, that is, a semantics in which the evaluation context $[[C]]$ is manipulated explicitly and syntactically as a stack.

\def\foreverunspace{%
  \ifnum\lastnodetype=11
    \unskip\foreverunspace
  \else
    \ifnum\lastnodetype=12
      \unkern\foreverunspace
    \else
      \ifnum\lastnodetype=13
        \unpenalty\foreverunspace
      \fi
    \fi
  \fi
}

\begin{ottfig}{\caption{Small-step semantics for \CLdm}\label{fig:linsem}}
\begin{augmentwidth}{2cm}
\bgroup
\renewcommand{\ottdrulename}[1]{\CLdm\CSem\CSep}
\renewcommand\arraystretch{1.5}
\renewcommand\ottaltinferrule[4]{
  % #4 is conclusion
  % #3 is premise
  % #1 is rule name
  %  & \text{#1}
  \ensuremath{#4} & \setbox0=\hbox{\ensuremath{#3}\foreverunspace}\ifdim\wd0=0pt ~ \else$\star$\fi & \text{\textsc{#1}} \\
}
\makeatletter
\renewenvironment{drulepar}[3][\relax]
  {\ifx#1\relax\else\def\ottalt@rulesection@prefix{#1-}\fi
  \drulesectionhead{#2}{#3}$\!\!\!\array{lll}}
  {\endarray$}
\makeatother
\drules{$[[C [ t ] ⟶ C' [ t' ] ]]$}{Small-step evaluation}{%
LinFocus-Left,
LinUnfocus-Left,
LinFocus-Right,
LinUnfocus-Right,
LinFocus-ProdOne,
LinUnfocus-ProdOne,
LinFocus-ProdTwo,
LinUnfocus-ProdTwo,
LinFocus-Exp,
LinUnfocus-Exp,
LinFocus-AppOne,
LinUnfocus-AppOne,
LinFocus-AppTwo,
LinUnfocus-AppTwo,
LinRed-App,
LinFocus-PatU,
LinUnfocus-PatU,
LinRed-PatU,
LinFocus-PatS,
LinUnfocus-PatS,
LinRed-PatL,
LinRed-PatR,
LinFocus-PatP,
LinUnfocus-PatP,
LinRed-PatP,
LinFocus-PatE,
LinUnfocus-PatE,
LinRed-PatE}
\egroup

\vspace{-0.5cm}

\begin{center}
$\star$~:~only allowed if $[[t]]$ is not already a value
\end{center}
\end{augmentwidth}
\end{ottfig}

\egroup

Small-step evaluation rules are of three kinds:
\begin{itemize}
\item focusing rules (F) that split the current term under focus in two parts: an evaluation context component that is pushed on the stack $[[C]]$ for later use, and a subterm that is put under focus;
\item unfocusing rules (U) that recreate a larger term once the term under focus is a value, by popping the most recent evaluation component from the stack and merging it with the value;
\item contraction rules (C) that do not operate on the stack $[[C]]$ but just transform the term under focus when it's a redex.
\end{itemize}

To have a fully deterministic and and straightforward reduction system, focusing rules can only trigger when the subterm in question is not already a value (denoted by $\star$ in \cref{fig:linsem}).

Data constructors only have focusing and unfocusing rules, as they do not describe computations that can be reduced. In that regard, $[[ˢᴇ n t]]$ is treated as an unary data constructor. Once a data constructor is focused, it is evaluated fully to a value form.

In most cases, unfocusing and contraction rules could be merged into a single step. For example, a contraction could be triggered as soon as we have $[[(C ∘ (⬜ ►case m (x1,x2) ⟼ u))[(v1, v2)] ]]$, without needing recreate the term $[[(v1, v2) ►case m (x1,x2) ⟼ u]]$. However, I prefer the presentation in three distinct steps, that despite being more verbose, clear shows that contraction rules do not modify the evaluation context.

The rest of the system is very standard. In particular, contraction rules of \CLdm{} --- that capture the essence of the calculus --- are very similar to those of strict lambda-calculi with sum and product types.
