@inproceedings{bagrel_destination-passing_2024,
  title       = {{Destination-passing style programming: a Haskell implementation}},
  author      = {Bagrel, Thomas},
  url         = {https://inria.hal.science/hal-04406360},
  booktitle   = {{35es Journ{\'e}es Francophones des Langages Applicatifs (JFLA 2024)}},
  address     = {Saint-Jacut-de-la-Mer, France},
  year        = {2024},
  month       = Jan,
  pdf         = {https://inria.hal.science/hal-04406360/file/jfla2024-paper-16.pdf},
  hal_id      = {hal-04406360},
  hal_version = {v1}
}

@inproceedings{shaikhha_destination-passing_2017,
	address = {Oxford UK},
	title = {Destination-passing style for efficient memory management},
	isbn = {978-1-4503-5181-2},
	url = {https://dl.acm.org/doi/10.1145/3122948.3122949},
	doi = {10.1145/3122948.3122949},
	abstract = {We show how to compile high-level functional array-processing programs, drawn from image processing and machine learning, into C code that runs as fast as hand-written C. The key idea is to transform the program to destination-passing style, which in turn enables a highly-efficient stack-like memory allocation discipline.},
	language = {en},
	urldate = {2022-03-15},
	booktitle = {Proceedings of the 6th {ACM} {SIGPLAN} {International} {Workshop} on {Functional} {High}-{Performance} {Computing}},
	publisher = {ACM},
	author = {Shaikhha, Amir and Fitzgibbon, Andrew and Peyton Jones, Simon and Vytiniotis, Dimitrios},
	month = sep,
	year = {2017},
	keywords = {destination, mutable},
	pages = {12--23},
}

@inproceedings{minamide_functional_1998,
	address = {New York, NY, USA},
	series = {{POPL} '98},
	title = {A functional representation of data structures with a hole},
	isbn = {978-0-89791-979-1},
	url = {https://doi.org/10.1145/268946.268953},
	doi = {10.1145/268946.268953},
	abstract = {Data structures with a hole, in other words data structures with an uninitialized field, are useful to write efficient programs: they enable us to construct functional data structures flexibly and write functions such as append and map as tail recursive functions. In this paper we present an approach to introducing data structures with a hole into call-by-value functional programming languages like ML. Data structures with a hole are formalized as a new form of λ-abstraction called hole abstraction. The novel features of hole abstraction are that expressions inside hole abstraction are evaluated and application is implemented by destructive update of a hole. We present a simply typed call-by-value λ-calculus extended with hole abstractions. Then we show a compilation method of hole abstraction and prove correctness of the compilation.},
	urldate = {2022-03-15},
	booktitle = {Proceedings of the 25th {ACM} {SIGPLAN}-{SIGACT} symposium on {Principles} of programming languages},
	publisher = {Association for Computing Machinery},
	author = {Minamide, Yasuhiko},
	month = jan,
	year = {1998},
	keywords = {calculus, destination},
	pages = {75--84},
}

@incollection{girard_linear_1995,
	address = {Cambridge},
	title = {Linear {Logic}: its syntax and semantics},
	isbn = {978-0-511-62915-0},
	shorttitle = {Linear {Logic}},
	url = {https://www.cambridge.org/core/product/identifier/CBO9780511629150A008/type/book_part},
	language = {en},
	urldate = {2022-03-21},
	booktitle = {Advances in {Linear} {Logic}},
	publisher = {Cambridge University Press},
	author = {Girard, J.-Y.},
	editor = {Girard, Jean-Yves and Lafont, Yves and Regnier, Laurent},
	year = {1995},
	doi = {10.1017/CBO9780511629150.002},
	keywords = {linear, logic},
	pages = {1--42},
}

@article{bour_tmc_2021,
	title = {Tail {Modulo} {Cons}},
	url = {http://arxiv.org/abs/2102.09823},
	abstract = {OCaml function calls consume space on the system stack. Operating systems set default limits on the stack space which are much lower than the available memory. If a program runs out of stack space, they get the dreaded "Stack Overflow" exception -- they crash. As a result, OCaml programmers have to be careful, when they write recursive functions, to remain in the so-called \_tail-recursive\_ fragment, using \_tail\_ calls that do not consume stack space. This discipline is a source of difficulties for both beginners and experts. Beginners have to be taught recursion, and then tail-recursion. Experts disagree on the "right" way to write `List.map`. The direct version is beautiful but not tail-recursive, so it crashes on larger inputs. The naive tail-recursive transformation is (slightly) slower than the direct version, and experts may want to avoid that cost. Some libraries propose horrible implementations, unrolling code by hand, to compensate for this performance loss. In general, tail-recursion requires the programmer to manually perform sophisticated program transformations. In this work we propose an implementation of "Tail Modulo Cons" (TMC) for OCaml. TMC is a program transformation for a fragment of non-tail-recursive functions, that rewrites them in \_destination-passing style\_. The supported fragment is smaller than other approaches such as continuation-passing-style, but the performance of the transformed code is on par with the direct, non-tail-recursive version. Many useful functions that traverse a recursive datastructure and rebuild another recursive structure are in the TMC fragment, in particular `List.map` (and `List.filter`, `List.append`, etc.). Finally those functions can be written in a way that is beautiful, correct on all inputs, and efficient.},
	urldate = {2022-03-22},
	journal = {arXiv:2102.09823 [cs]},
	author = {Bour, Frédéric and Clément, Basile and Scherer, Gabriel},
	month = feb,
	year = {2021},
	note = {arXiv: 2102.09823},
	keywords = {caml, destination, mutable, tail-recursion},
}

@inproceedings{yang_efficient_2015,
	address = {Vancouver BC Canada},
	title = {Efficient communication and collection with compact normal forms},
	isbn = {978-1-4503-3669-7},
	url = {https://dl.acm.org/doi/10.1145/2784731.2784735},
	doi = {10.1145/2784731.2784735},
	abstract = {In distributed applications, the transmission of non-contiguous data structures is greatly slowed down by the need to serialize them into a buffer before sending. We describe Compact Normal Forms, an API that allows programmers to explicitly place immutable heap objects into regions, which can both be accessed like ordinary data as well as efﬁciently transmitted over the network. The process of placing objects into compact regions (essentially a copy) is faster than any serializer and can be amortized over a series of functional updates to the data structure in question. We implement this scheme in the Glasgow Haskell Compiler and show that even with the space expansion attendant with memory-oriented data structure representations, we achieve between ×2 and ×4 speedups on fast local networks with sufﬁciently large data structures.},
	language = {en},
	urldate = {2022-04-04},
	booktitle = {Proceedings of the 20th {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	publisher = {ACM},
	author = {Yang, Edward Z. and Campagna, Giovanni and Ağacan, Ömer S. and El-Hassany, Ahmed and Kulkarni, Abhishek and Newton, Ryan R.},
	month = aug,
	year = {2015},
	keywords = {compact-regions, memory, serialization},
	pages = {362--374},
}

@article{bernardy_linear_2018,
	title = {Linear {Haskell}: practical linearity in a higher-order polymorphic language},
	volume = {2},
	issn = {2475-1421},
	shorttitle = {Linear {Haskell}},
	url = {http://arxiv.org/abs/1710.09756},
	doi = {10.1145/3158093},
	abstract = {Linear type systems have a long and storied history, but not a clear path forward to integrate with existing languages such as OCaml or Haskell. In this paper, we study a linear type system designed with two crucial properties in mind: backwards-compatibility and code reuse across linear and non-linear users of a library. Only then can the benefits of linear types permeate conventional functional programming. Rather than bifurcate types into linear and non-linear counterparts, we instead attach linearity to function arrows. Linear functions can receive inputs from linearly-bound values, but can also operate over unrestricted, regular values. To demonstrate the efficacy of our linear type system - both how easy it can be integrated in an existing language implementation and how streamlined it makes it to write programs with linear types - we implemented our type system in GHC, the leading Haskell compiler, and demonstrate two kinds of applications of linear types: mutable data with pure interfaces; and enforcing protocols in I/O-performing functions.},
	number = {POPL},
	urldate = {2022-06-23},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Bernardy, Jean-Philippe and Boespflug, Mathieu and Newton, Ryan R. and Jones, Simon Peyton and Spiwack, Arnaud},
	month = jan,
	year = {2018},
	note = {arXiv:1710.09756 [cs]},
	keywords = {Computer Science - Programming Languages},
	pages = {1--29},
}

@inproceedings{gibbons_phases_2023,
	address = {Seattle WA USA},
	title = {Phases in {Software} {Architecture}},
	isbn = {9798400702976},
	url = {https://dl.acm.org/doi/10.1145/3609025.3609479},
	doi = {10.1145/3609025.3609479},
	abstract = {The large-scale structure of executing a computation can often be thought of as being separated into distinct phases. But the most natural form in which to specify that computation may well have a different and conflicting structure. For example, the computation might consist of gathering data from some locations, processing it, then distributing the results back to the same locations; it may be executed in three phases—gather, process, distribute—but mostly conveniently specified orthogonally—by location. We have recently shown that this multi-phase structure can be expressed as a novel applicative functor (also known as an idiom, or lax monoidal functor). Here we summarize the idea from the perspective of software architecture. At the end, we speculate about applications to choreography and multi-tier architecture.},
	language = {en},
	urldate = {2023-10-02},
	booktitle = {Proceedings of the 1st {ACM} {SIGPLAN} {International} {Workshop} on {Functional} {Software} {Architecture}},
	publisher = {ACM},
	author = {Gibbons, Jeremy and Kidney, Donnacha Oisín and Schrijvers, Tom and Wu, Nicolas},
	month = aug,
	year = {2023},
	pages = {29--33},
}

@inproceedings{protzenko_mezzo_2013,
	title = {Programming with {Permissions} in {Mezzo}},
	url = {http://arxiv.org/abs/1311.7242},
	doi = {10.1145/2500365.2500598},
	abstract = {We present Mezzo, a typed programming language of ML lineage. Mezzo is equipped with a novel static discipline of duplicable and affine permissions, which controls aliasing and ownership. This rules out certain mistakes, including representation exposure and data races, and enables new idioms, such as gradual initialization, memory re-use, and (type)state changes. Although the core static discipline disallows sharing a mutable data structure, Mezzo offers several ways of working around this restriction, including a novel dynamic ownership control mechanism which we dub "adoption and abandon".},
	urldate = {2023-10-16},
	booktitle = {Proceedings of the 18th {ACM} {SIGPLAN} international conference on {Functional} programming},
	author = {Protzenko, Jonathan and Pottier, François},
	month = sep,
	year = {2013},
	note = {arXiv:1311.7242 [cs]},
	keywords = {Computer Science - Programming Languages, D.3.2},
	pages = {173--184},
}


@inproceedings{okasaki_bfs_2000,
	address = {New York, NY, USA},
	series = {{ICFP} '00},
	title = {Breadth-first numbering: lessons from a small exercise in algorithm design},
	isbn = {978-1-58113-202-1},
	shorttitle = {Breadth-first numbering},
	url = {https://dl.acm.org/doi/10.1145/351240.351253},
	doi = {10.1145/351240.351253},
	abstract = {Every programmer has blind spots. Breadth-first numbering is an interesting toy problem that exposes a blind spot common to many---perhaps most---functional programmers.},
	urldate = {2023-10-12},
	booktitle = {Proceedings of the fifth {ACM} {SIGPLAN} international conference on {Functional} programming},
	publisher = {Association for Computing Machinery},
	author = {Okasaki, Chris},
	month = sep,
	year = {2000},
	keywords = {Breadth-first numbering, breadth-first traversal, views},
	pages = {131--136},
	file = {Full Text PDF:/home/thomas/Zotero/storage/RWTQGQAF/Okasaki - 2000 - Breadth-first numbering lessons from a small exer.pdf:application/pdf},
}

@phdthesis{larus_restructuring_1989,
	type = {phd},
	title = {Restructuring symbolic programs for concurrent execution on multiprocessors},
	abstract = {C scURARE, the program restructurer described in this dissertation, automatically transforms a sequential Lisp program into an equivalent concurrent program that executes on a multiprocessor. C scURARE first analyzes a program to find its control and data dependences. This analysis is most difficult for references to structures connected by pointers. C scURARE uses a new data-dependence algorithm, which finds and classifies these dependences. The analysis is conservative and may detect conflicts that do not arise in practice. A programmer can temper and refine its results with declarations. Dependences constrain the program's concurrent execution because, in general, two conflicting statements cannot execute in a different order without affecting the program's result. A restructurer must know all dependences in order to preserve them. However, not all dependences are essential to produce the program's result. C scURARE attempts to transform the program so it computes its result with fewer conflicts. An optimized program will execute with less synchronization and more concurrency. C scURARE then examines loops in a program to find those that are unconstrained or lightly constrained by dependences. By necessity, C scURARE treats recursive functions as loops and does not limit itself to explicit program loops. Recursive functions offer several advantages over explicit loops since they provide a convenient framework for inserting locks and handling the dynamic behavior of symbolic programs. Loops that are suitable for concurrent execution are changed to execute on a set of concurrent server processes. These servers execute single loop iterations and therefore need to be extremely inexpensive to invoke. Restructured programs execute significantly faster than the original sequential programs. This improvement is large enough to attract programmers to a multiprocessor, particularly since it requires little effort on their part. Although restructured programs may not make optimal use of a multiprocessor's parallelism, they make good use of a programmer's time.},
	school = {University of California, Berkeley},
	author = {Larus, James Richard},
	year = {1989},
	note = {AAI9006407},
}

@article{spiwack_linearly_2022,
	title = {Linearly qualified types: generic inference for capabilities and uniqueness},
	volume = {6},
	shorttitle = {Linearly qualified types},
	url = {https://dl.acm.org/doi/10.1145/3547626},
	doi = {10.1145/3547626},
	abstract = {A linear parameter must be consumed exactly once in the body of its function. When declaring resources such as file handles and manually managed memory as linear arguments, a linear type system can verify that these resources are used safely. However, writing code with explicit linear arguments requires bureaucracy. This paper presents linear constraints, a front-end feature for linear typing that decreases the bureaucracy of working with linear types. Linear constraints are implicit linear arguments that are filled in automatically by the compiler. We present linear constraints as a qualified type system,together with an inference algorithm which extends GHC's existing constraint solver algorithm. Soundness of linear constraints is ensured by the fact that they desugar into Linear Haskell.},
	number = {ICFP},
	urldate = {2023-10-16},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Spiwack, Arnaud and Kiss, Csongor and Bernardy, Jean-Philippe and Wu, Nicolas and Eisenberg, Richard A.},
	month = aug,
	year = {2022},
	keywords = {constraints, GHC, Haskell, inference, linear logic, linear types, qualified types},
	pages = {95:137--95:164},
}

@article{jones_gibbons_linearbfs_93,
	title = {Linear-time {Breadth}-first {Tree} {Algorithms}: {An} {Exercise} in the {Arithmetic} of {Folds} and {Zips}},
	shorttitle = {Linear-time {Breadth}-first {Tree} {Algorithms}},
	url = {https://www.cs.ox.ac.uk/publications/publication2363-abstract.html},
	abstract = {This paper is about an application of the mathematics of the zip, reduce (fold) and accumulate (scan) operations on lists. It gives an account of the derivation of a linear-time breadth-first tree traversal algorithm, and of a subtle and efficient breadth-first tree labelling algorithm.},
	language = {en-gb},
	number = {No. 71},
	urldate = {2023-10-18},
	author = {Gibbons, Jeremy},
	year = {1993},
	note = {Number: No. 71},
}

@misc{custom_ghc,
  title        = "{GHC} with support for hollow constructor allocation",
  author       = "{Bagrel, Thomas}",
  howpublished = "\\Software Heritage,\\\href{https://archive.softwareheritage.org/swh:1:dir:84c7e717fd5f189c6b6222e0fc92d0a82d755e7c;origin=https://github.com/tweag/ghc;visit=swh:1:snp:141fa3c28e01574deebb6cc91693c75f49717c32;anchor=swh:1:rev:184f838b352a0d546e574bdeb83c8c190e9dfdc2}{\texttt{swh:1:dir:84c7e717fd5f189c6b6222e0fc92d0a82d755e7c;\\
origin=https://github.com/tweag/ghc;\\
visit=swh:1:snp:141fa3c28e01574deebb6cc91693c75f49717c32;\\
anchor=swh:1:rev:184f838b352a0d546e574bdeb83c8c190e9dfdc2}}",
  year         = 2023,
  note         = "\\Accessed: 2023-10-19"
}

@misc{linear_dest,
  title        = "\texttt{linear-dest}, a {Haskell} library that adds supports for {DPS} programming",
  author       = "{Bagrel, Thomas}",
  howpublished = "Software Heritage,\\ \href{https://archive.softwareheritage.org/swh:1:rev:0e7db2e6b24aad348837ac78d8137712c1d8d12a;origin=https://github.com/tweag/linear-dest;visit=swh:1:snp:c0eb2661963bb176204b46788f4edd26f72ac83c}{\texttt{swh:1:rev:0e7db2e6b24aad348837ac78d8137712c1d8d12a;\\origin=https://github.com/tweag/linear-dest;\\visit=swh:1:snp:c0eb2661963bb176204b46788f4edd26f72ac83c}}",
  year         = 2023,
  note         = "\\Accessed: 2023-10-19"
}

@inproceedings{launchbury_lazy_1994,
	address = {New York, NY, USA},
	series = {{PLDI} '94},
	title = {Lazy functional state threads},
	isbn = {978-0-89791-662-2},
	url = {https://dl.acm.org/doi/10.1145/178243.178246},
	doi = {10.1145/178243.178246},
	abstract = {Some algorithms make critical internal use of updatable state, even though their external specification is purely functional. Based on earlier work on monads, we present a way of securely encapsulating stateful computations that manipulate multiple, named, mutable objects, in the context of a non-strict, purely-functional language. The security of the encapsulation is assured by the type system, using parametricity. Intriguingly, this parametricity requires the provision of a (single) constant with a rank-2 polymorphic type.},
	urldate = {2023-12-11},
	booktitle = {Proceedings of the {ACM} {SIGPLAN} 1994 conference on {Programming} language design and implementation},
	publisher = {Association for Computing Machinery},
	author = {Launchbury, John and Peyton Jones, Simon L.},
	month = jun,
	year = {1994},
	pages = {24--35}
}


@article{lorenzen_fp_2023,
	title = {{FP}$^2$: {Fully} in-{Place} {Functional} {Programming}},
	volume = {7},
	issn = {2475-1421},
	shorttitle = {{FP}$^2$},
	url = {https://dl.acm.org/doi/10.1145/3607840},
	doi = {10.1145/3607840},
	abstract = {As functional programmers we always face a dilemma: should we write purely  
functional code, or sacrifice purity for efficiency and resort to in-place  
updates? This paper identifies precisely when we can have the best of both  
worlds: a wide class of purely functional programs can be executed safely using  
in-place updates without requiring allocation, provided their arguments are not  
shared elsewhere.
            We describe a linear \_fully in-place\_ (FIP) calculus where we prove that we can  
always execute such functions in a way that requires no (de)allocation and uses  
constant stack space. Of course, such a calculus is only relevant if we can  
express interesting algorithms; we provide numerous examples of in-place  
functions on datastructures such as splay trees or finger trees, together with  
in-place versions of merge sort and quick sort.
            We also show how we can generically derive a map function over \_any\_ polynomial  
data type that is fully in-place. Finally, we have implemented the rules of the  
FIP calculus in the Koka language. Using the Perceus reference counting garbage  
collection, this implementation dynamically executes FIP functions in-place  
whenever possible.},
	language = {en},
	number = {ICFP},
	urldate = {2023-12-11},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Lorenzen, Anton and Leijen, Daan and Swierstra, Wouter},
	month = aug,
	year = {2023},
	pages = {275--304},
}


@article{leijen_trmc_2023,
  title      = {Tail {Recursion} {Modulo} {Context}: {An} {Equational} {Approach}},
  volume     = {7},
  issn       = {2475-1421},
  shorttitle = {Tail {Recursion} {Modulo} {Context}},
  url        = {https://dl.acm.org/doi/10.1145/3571233},
  doi        = {10.1145/3571233},
  abstract   = {The tail-recursion modulo
                cons
                transformation can rewrite functions that are not quite tail-recursive into a tail-recursive form that can be executed efficiently. In this article we generalize tail recursion modulo
                cons
                (TRMc) to modulo
                contexts
                (TRMC), and calculate a general TRMC algorithm from its specification. We can instantiate our general algorithm by providing an implementation of application and composition on abstract contexts, and showing that our
                context
                laws\_ hold. We provide some known instantiations of TRMC, namely modulo
                evaluation contexts
                (CPS), and
                associative operations
                , and further instantiantions not so commonly associated with TRMC, such as
                defunctionalized
                evaluation contexts,
                monoids
                ,
                semirings
                ,
                exponents
                , and
                cons products
                . We study the modulo
                cons
                instantiation in particular and prove that an instantiation using Minamide’s hole calculus is sound. We also calculate a second instantiation in terms of the Perceus heap semantics to precisely reason about the soundness of in-place update. While all previous approaches to TRMc fail in the presence of non-linear control (for example induced by call/cc, shift/reset or algebraic effect handlers), we can elegantly extend the heap semantics to a hybrid approach which dynamically adapts to non-linear control flow. We have a full implementation of hybrid TRMc in the Koka language and our benchmark shows the TRMc transformed functions are always as fast or faster than using manual alternatives.},
  language   = {en},
  number     = {POPL},
  urldate    = {2024-01-25},
  journal    = {Proceedings of the ACM on Programming Languages},
  author     = {Leijen, Daan and Lorenzen, Anton},
  month      = jan,
  year       = {2023},
  pages      = {1152--1181}
}

@article{bernardy_modality_2020,
  author     = {Abel, Andreas and Bernardy, Jean-Philippe},
  title      = {A unified view of modalities in type systems},
  year       = {2020},
  issue_date = {August 2020},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {4},
  number     = {ICFP},
  url        = {https://doi.org/10.1145/3408972},
  doi        = {10.1145/3408972},
  abstract   = {We propose to unify the treatment of a broad range of modalities in typed lambda calculi. We do so by defining a generic structure of modalities, and show that this structure arises naturally from the structure of intuitionistic logic, and as such finds instances in a wide range of type systems previously described in literature. Despite this generality, this structure has a rich metatheory, which we expose.},
  journal    = {Proc. ACM Program. Lang.},
  month      = {aug},
  articleno  = {90},
  numpages   = {28},
  keywords   = {linear types, modal logic, subtyping}
}

@inproceedings{sewell_ott_2007,
  author    = {Sewell, Peter and Nardelli, Francesco Zappa and Owens, Scott and Peskine, Gilles and Ridge, Thomas and Sarkar, Susmit and Strni\v{s}a, Rok},
  title     = {Ott: effective tool support for the working semanticist},
  year      = {2007},
  isbn      = {9781595938152},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/1291151.1291155},
  doi       = {10.1145/1291151.1291155},
  abstract  = {It is rare to give a semantic definition of a full-scale programming language, despite the many potential benefits. Partly this is because the available metalanguages for expressing semantics - usually either L<scp>a</scp>TEX for informal mathematics, or the formal mathematics of a proof assistant - make it much harder than necessary to work with large definitions.We present a metalanguage specifically designed for this problem, and a tool, ott, that sanity-checks such definitions and compiles them into proof assistant code for Coq, HOL, Isabelle, and (in progress) Twelf, together with L<scp>a</scp>TEX code for production-quality typesetting, and OCaml boilerplate. The main innovations are:(1) metalanguage design to make definitions concise, and easy to read and edit;(2) an expressive but intuitive metalanguage for specifying binding structures; and (3) compilation to proof assistant code.This has been tested in substantial case studies, including modular specifications of calculi from the TAPL text, a Lightweight Java with Java JSR 277/294 module system proposals, and a large fragment of OCaml (around 306 rules), with machine proofs of various soundness results. Our aim with this work is to enable a phase change: making it feasible to work routinely, without heroic effort, with rigorous semantic definitions of realistic languages.},
  booktitle = {Proceedings of the 12th ACM SIGPLAN International Conference on Functional Programming},
  pages     = {1–12},
  numpages  = {12},
  location  = {Freiburg, Germany},
  series    = {ICFP '07}
}


@misc{nardelli_nameless_2009,
  type    = {Blog post},
  title   = {Locally nameless backend for {Ott}},
  url     = {https://fzn.fr/projects/ln_ott/},
  urldate = {2024-07-08},
  author  = {Nardelli, Francesco Zappa},
  month   = mar,
  year    = {2009}
}

@inproceedings{deyoung_sax_2020,
  author    = {DeYoung, Henry and Pfenning, Frank and Pruiksma, Klaas},
  title     = {{Semi-Axiomatic Sequent Calculus}},
  booktitle = {5th International Conference on Formal Structures for Computation and Deduction (FSCD 2020)},
  pages     = {29:1--29:22},
  series    = {Leibniz International Proceedings in Informatics (LIPIcs)},
  isbn      = {978-3-95977-155-9},
  issn      = {1868-8969},
  year      = {2020},
  volume    = {167},
  editor    = {Ariola, Zena M.},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address   = {Dagstuhl, Germany},
  url       = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.FSCD.2020.29},
  urn       = {urn:nbn:de:0030-drops-123515},
  doi       = {10.4230/LIPIcs.FSCD.2020.29},
  annote    = {Keywords: Sequent calculus, Curry-Howard isomorphism, shared memory concurrency}
}

@article{hughes_dlist_1986,
  author  = {Hughes, John},
  year    = {1986},
  month   = {01},
  pages   = {141-144},
  title   = {A Novel Representation of Lists and its Application to the Function "reverse".},
  volume  = {22},
  journal = {Inf. Process. Lett.}
}


@article{hood_queue_1981,
  title    = {Real-time queue operations in pure {LISP}},
  volume   = {13},
  issn     = {0020-0190},
  url      = {https://www.sciencedirect.com/science/article/pii/0020019081900302},
  doi      = {https://doi.org/10.1016/0020-0190(81)90030-2},
  number   = {2},
  journal  = {Information Processing Letters},
  author   = {Hood, Robert and Melville, Robert},
  year     = {1981},
  keywords = {Lisp, real-time queue},
  pages    = {50--54}
}

@article{granule_2019,
  author     = {Orchard, Dominic and Liepelt, Vilem-Benjamin and Eades III, Harley},
  title      = {Quantitative program reasoning with graded modal types},
  year       = {2019},
  issue_date = {August 2019},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {3},
  number     = {ICFP},
  url        = {https://doi.org/10.1145/3341714},
  doi        = {10.1145/3341714},
  abstract   = {In programming, some data acts as a resource (e.g., file handles, channels) subject to usage constraints. This poses a challenge to software correctness as most languages are agnostic to constraints on data. The approach of linear types provides a partial remedy, delineating data into resources to be used but never copied or discarded, and unconstrained values. Bounded Linear Logic provides a more fine-grained approach, quantifying non-linear use via an indexed-family of modalities. Recent work on coeffect types generalises this idea to graded comonads, providing type systems which can capture various program properties. Here, we propose the umbrella notion of graded modal types, encompassing coeffect types and dual notions of type-based effect reasoning via graded monads. In combination with linear and indexed types, we show that graded modal types provide an expressive type theory for quantitative program reasoning, advancing the reach of type systems to capture and verify a broader set of program properties. We demonstrate this approach via a type system embodied in a fully-fledged functional language called Granule, exploring various examples.},
  journal    = {Proc. ACM Program. Lang.},
  month      = {jul},
  articleno  = {110},
  numpages   = {30},
  keywords   = {linear types, implementation, graded modal types, coeffects}
}

@inproceedings{qtt_2018,
  author    = {Atkey, Robert},
  title     = {Syntax and Semantics of Quantitative Type Theory},
  year      = {2018},
  isbn      = {9781450355834},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3209108.3209189},
  doi       = {10.1145/3209108.3209189},
  abstract  = {We present Quantitative Type Theory, a Type Theory that records usage information for each variable in a judgement, based on a previous system by McBride. The usage information is used to give a realizability semantics using a variant of Linear Combinatory Algebras, refining the usual realizability semantics of Type Theory by accurately tracking resource behaviour. We define the semantics in terms of Quantitative Categories with Families, a novel extension of Categories with Families for modelling resource sensitive type theories.},
  booktitle = {Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science},
  pages     = {56–65},
  numpages  = {10},
  keywords  = {Linear Logic, Type Theory},
  location  = {Oxford, United Kingdom},
  series    = {LICS '18}
}

@article{lorenzen_searchtree_2024,
  author     = {Lorenzen, Anton and Leijen, Daan and Swierstra, Wouter and Lindley, Sam},
  title      = {The Functional Essence of Imperative Binary Search Trees},
  year       = {2024},
  issue_date = {June 2024},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {8},
  number     = {PLDI},
  url        = {https://doi.org/10.1145/3656398},
  doi        = {10.1145/3656398},
  abstract   = {Algorithms on restructuring binary search trees are typically 
                presented in imperative pseudocode. Understandably so, as their 
                performance relies on in-place execution, rather than the repeated 
                allocation of fresh nodes in memory. Unfortunately, these imperative 
                algorithms are notoriously difficult to verify as their loop 
                invariants must relate the unfinished tree fragments being 
                rebalanced. This paper presents several novel functional algorithms 
                for accessing and inserting elements in a restructuring binary search 
                tree that are as fast as their imperative counterparts; yet the 
                correctness of these functional algorithms is established using a 
                simple inductive argument. For each data structure, move-to-root, 
                splay, and zip trees, this paper describes both a bottom-up 
                algorithm using zippers and a top-down algorithm using a novel 
                first-class constructor context primitive. 
                The functional and imperative algorithms are equivalent: 
                we mechanise the proofs establishing this in the Coq 
                proof assistant using the Iris framework. This yields a first fully 
                verified implementation of well known algorithms on binary search trees with 
                performance on par with the fastest implementations in C.},
  journal    = {Proc. ACM Program. Lang.},
  month      = {jun},
  articleno  = {168},
  numpages   = {25},
  keywords   = {FBIP, FIP, Splay Trees, Tail Recursion Modulo Cons, Zip Trees, Zippers}
}

@inproceedings{herbelin_curien_2000,
author = {Curien, Pierre-Louis and Herbelin, Hugo},
title = {The duality of computation},
year = {2000},
isbn = {1581132026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/351240.351262},
doi = {10.1145/351240.351262},
abstract = {We present the μ -calculus, a syntax for λ-calculus + control operators exhibiting symmetries such as program/context and call-by-name/call-by-value. This calculus is derived from implicational Gentzen's sequent calculus LK, a key classical logical system in proof theory. Under the Curry-Howard correspondence between proofs and programs, we can see LK, or more precisely a formulation called LKμ , as a syntax-directed system of simple types for μ -calculus. For μ -calculus, choosing a call-by-name or call-by-value discipline for reduction amounts to choosing one of the two possible symmetric orientations of a critical pair. Our analysis leads us to revisit the question of what is a natural syntax for call-by-value functional computation. We define a translation of λμ-calculus into μ -calculus and two dual translations back to λ-calculus, and we recover known CPS translations by composing these translations.},
booktitle = {Proceedings of the Fifth ACM SIGPLAN International Conference on Functional Programming},
pages = {233–243},
numpages = {11},
series = {ICFP '00}
}
